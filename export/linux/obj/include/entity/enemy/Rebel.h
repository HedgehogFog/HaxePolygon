// Generated by Haxe 3.4.7
#ifndef INCLUDED_entity_enemy_Rebel
#define INCLUDED_entity_enemy_Rebel

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS2(entity,enemy,Rebel)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace entity{
namespace enemy{


class HXCPP_CLASS_ATTRIBUTES Rebel_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef Rebel_obj OBJ_;
		Rebel_obj();

	public:
		enum { _hx_ClassId = 0x4fd36c71 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="entity.enemy.Rebel")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"entity.enemy.Rebel"); }
		static hx::ObjectPtr< Rebel_obj > __new();
		static hx::ObjectPtr< Rebel_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Rebel_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Rebel","\x56","\xd3","\xe8","\x79"); }

};

} // end namespace entity
} // end namespace enemy

#endif /* INCLUDED_entity_enemy_Rebel */ 
