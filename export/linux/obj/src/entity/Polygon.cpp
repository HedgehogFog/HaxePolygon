// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_entity_Polygon
#include <entity/Polygon.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_debug_FlxDebugger
#include <flixel/system/debug/FlxDebugger.h>
#endif
#ifndef INCLUDED_flixel_system_debug_Window
#include <flixel/system/debug/Window.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_Watch
#include <flixel/system/debug/watch/Watch.h>
#endif
#ifndef INCLUDED_flixel_system_debug_watch_WatchEntryData
#include <flixel/system/debug/watch/WatchEntryData.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_WatchFrontEnd
#include <flixel/system/frontEnds/WatchFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_10_new,"entity.Polygon","new",0x202e6e81,"entity.Polygon.new","entity/Polygon.hx",10,0xab7d0750)
HX_LOCAL_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_34_update,"entity.Polygon","update",0xd0f1b288,"entity.Polygon.update","entity/Polygon.hx",34,0xab7d0750)
static const int _hx_array_data_69db1a0f_2[] = {
	(int)81,
};
static const int _hx_array_data_69db1a0f_3[] = {
	(int)69,
};
static const int _hx_array_data_69db1a0f_4[] = {
	(int)187,
};
static const int _hx_array_data_69db1a0f_5[] = {
	(int)189,
};
HX_LOCAL_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_74_draw,"entity.Polygon","draw",0x01dfeac3,"entity.Polygon.draw","entity/Polygon.hx",74,0xab7d0750)
HX_LOCAL_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_100_mouseDown,"entity.Polygon","mouseDown",0x09ac1e08,"entity.Polygon.mouseDown","entity/Polygon.hx",100,0xab7d0750)
HX_LOCAL_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_115_getTransformedPoints,"entity.Polygon","getTransformedPoints",0x97970c97,"entity.Polygon.getTransformedPoints","entity/Polygon.hx",115,0xab7d0750)
HX_LOCAL_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_153_boundsFind,"entity.Polygon","boundsFind",0xe825394d,"entity.Polygon.boundsFind","entity/Polygon.hx",153,0xab7d0750)
HX_LOCAL_STACK_FRAME(_hx_pos_d0f801917b2b4eb7_172_degToRad,"entity.Polygon","degToRad",0x546419b3,"entity.Polygon.degToRad","entity/Polygon.hx",172,0xab7d0750)
namespace entity{

void Polygon_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_10_new)
HXLINE(  32)		this->scaleSize = ((Float)1.0);
HXLINE(  31)		this->rotation = ((Float)0.0);
HXLINE(  18)		this->maxY = ((Float)0.0);
HXLINE(  17)		this->minY = ::flixel::FlxG_obj::height;
HXLINE(  15)		this->maxX = ((Float)0.0);
HXLINE(  14)		this->minX = ::flixel::FlxG_obj::width;
HXLINE(  21)		super::__construct(null(),null(),null());
HXLINE(  22)		this->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,(int)-16777216,null(),null());
HXLINE(  23)		this->points = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  28)		{
HXLINE(  28)			 ::flixel::_hx_system::frontEnds::WatchFrontEnd _this = ::flixel::FlxG_obj::watch;
HXDLIN(  28)			 ::flixel::_hx_system::debug::watch::Watch _hx_tmp = ::flixel::FlxG_obj::game->debugger->watch;
HXDLIN(  28)			_hx_tmp->add(null(),::flixel::_hx_system::debug::watch::WatchEntryData_obj::FIELD(hx::ObjectPtr<OBJ_>(this),HX_("points",23,12,2e,f7)));
            		}
HXLINE(  29)		this->set_antialiasing(true);
            	}

Dynamic Polygon_obj::__CreateEmpty() { return new Polygon_obj; }

void *Polygon_obj::_hx_vtable = 0;

Dynamic Polygon_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Polygon_obj > _hx_result = new Polygon_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Polygon_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x54e9f06b;
	}
}

void Polygon_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_34_update)
HXLINE(  36)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == (int)2)) {
HXLINE(  37)			this->mouseDown((int)0,::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y);
            		}
HXLINE(  39)		 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_rightButton;
HXDLIN(  39)		bool _hx_tmp;
HXDLIN(  39)		if ((_this->current != (int)1)) {
HXLINE(  39)			_hx_tmp = (_this->current == (int)2);
            		}
            		else {
HXLINE(  39)			_hx_tmp = true;
            		}
HXDLIN(  39)		if (_hx_tmp) {
HXLINE(  40)			this->minX = ::flixel::FlxG_obj::width;
HXLINE(  41)			this->maxX = ((Float)0.0);
HXLINE(  43)			this->minY = ::flixel::FlxG_obj::height;
HXLINE(  44)			this->maxY = ((Float)0.0);
HXLINE(  46)			this->boundsFind();
HXLINE(  48)			this->points->pop().StaticCast<  ::flixel::math::FlxPoint >();
            		}
HXLINE(  50)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_69db1a0f_2,1),(int)1)) {
HXLINE(  51)			 ::entity::Polygon _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  51)			_hx_tmp1->rotation = (_hx_tmp1->rotation + (int)1);
            		}
HXLINE(  54)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_69db1a0f_3,1),(int)1)) {
HXLINE(  55)			 ::entity::Polygon _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  55)			_hx_tmp2->rotation = (_hx_tmp2->rotation - (int)1);
            		}
HXLINE(  58)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_69db1a0f_4,1),(int)1)) {
HXLINE(  59)			 ::entity::Polygon _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  59)			_hx_tmp3->scaleSize = (_hx_tmp3->scaleSize + ((Float)0.1));
HXLINE(  60)			this->boundsFind();
            		}
HXLINE(  63)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_69db1a0f_5,1),(int)1)) {
HXLINE(  64)			if (((this->scaleSize - ((Float)0.1)) > (int)0)) {
HXLINE(  65)				 ::entity::Polygon _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  65)				_hx_tmp4->scaleSize = (_hx_tmp4->scaleSize - ((Float)0.1));
            			}
HXLINE(  66)			this->boundsFind();
            		}
            	}


void Polygon_obj::draw(){
            	HX_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_74_draw)
HXLINE(  75)		::flixel::util::FlxSpriteUtil_obj::fill(hx::ObjectPtr<OBJ_>(this),(int)-16777216);
HXLINE(  76)		this->locPoints = this->getTransformedPoints();
HXLINE(  77)		{
HXLINE(  77)			int _g1 = (int)0;
HXDLIN(  77)			int _g = (this->locPoints->length - (int)1);
HXDLIN(  77)			while((_g1 < _g)){
HXLINE(  77)				_g1 = (_g1 + (int)1);
HXDLIN(  77)				int i = (_g1 - (int)1);
HXLINE(  80)				::Array< ::Dynamic> this1 = this->locPoints;
HXDLIN(  80)				::Array< ::Dynamic> this2 = this->locPoints;
HXLINE(  79)				::flixel::util::FlxSpriteUtil_obj::drawLine(hx::ObjectPtr<OBJ_>(this),this->locPoints->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->x,this->locPoints->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->y,this1->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x,this2->__get((i + (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y,null(),null());
            			}
            		}
HXLINE(  83)		if ((this->locPoints->length >= (int)2)) {
HXLINE(  91)			::Array< ::Dynamic> this3 = this->locPoints;
HXLINE(  92)			::Array< ::Dynamic> this4 = this->locPoints;
HXLINE(  90)			::flixel::util::FlxSpriteUtil_obj::drawLine(hx::ObjectPtr<OBJ_>(this),this->locPoints->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >()->x,this->locPoints->__get((int)0).StaticCast<  ::flixel::math::FlxPoint >()->y,this3->__get((this->locPoints->length - (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->x,this4->__get((this->locPoints->length - (int)1)).StaticCast<  ::flixel::math::FlxPoint >()->y,null(),null());
            		}
HXLINE(  95)		this->super::draw();
            	}


void Polygon_obj::mouseDown(int button,int x,int y){
            	HX_GC_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_100_mouseDown)
HXDLIN( 100)		if ((button == (int)0)) {
HXLINE( 101)			::Array< ::Dynamic> locPoints = this->getTransformedPoints();
HXLINE( 102)			this->rotation = (int)0;
HXLINE( 103)			this->scaleSize = (int)1;
HXLINE( 106)			{
HXLINE( 106)				int _g1 = (int)0;
HXDLIN( 106)				int _g = locPoints->length;
HXDLIN( 106)				while((_g1 < _g)){
HXLINE( 106)					_g1 = (_g1 + (int)1);
HXDLIN( 106)					int i = (_g1 - (int)1);
HXLINE( 107)					::Array< ::Dynamic> _hx_tmp = this->points;
HXDLIN( 107)					_hx_tmp[i] = locPoints->__get(i).StaticCast<  ::flixel::math::FlxPoint >();
            				}
            			}
HXLINE( 109)			::Array< ::Dynamic> _hx_tmp1 = this->points;
HXDLIN( 109)			 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,x,y);
HXDLIN( 109)			_hx_tmp1->push(this1);
HXLINE( 111)			this->boundsFind();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Polygon_obj,mouseDown,(void))

::Array< ::Dynamic> Polygon_obj::getTransformedPoints(){
            	HX_GC_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_115_getTransformedPoints)
HXLINE( 116)		::Array< ::Dynamic> locPoints = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 119)		Float cos = ::Math_obj::cos(this->degToRad(this->rotation));
HXLINE( 120)		Float sin = ::Math_obj::sin(this->degToRad(this->rotation));
HXLINE( 122)		{
HXLINE( 122)			int _g1 = (int)0;
HXDLIN( 122)			int _g = this->points->length;
HXDLIN( 122)			while((_g1 < _g)){
HXLINE( 122)				_g1 = (_g1 + (int)1);
HXDLIN( 122)				int i = (_g1 - (int)1);
HXLINE( 123)				Float x = (this->points->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->x - this->centroid->x);
HXLINE( 124)				Float y = (this->points->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->y - this->centroid->y);
HXLINE( 126)				if ((this->scaleSize > (int)0)) {
HXLINE( 127)					x = (x * this->scaleSize);
HXLINE( 128)					y = (y * this->scaleSize);
            				}
HXLINE( 131)				if ((this->rotation != (int)0)) {
HXLINE( 132)					Float oldX = x;
HXLINE( 133)					x = ((cos * x) - (sin * y));
HXLINE( 134)					y = ((sin * oldX) + (cos * y));
            				}
HXLINE( 136)				 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,(x + this->centroid->x),(y + this->centroid->y));
HXDLIN( 136)				locPoints->push(this1);
            			}
            		}
HXLINE( 139)		return locPoints;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,getTransformedPoints,return )

void Polygon_obj::boundsFind(){
            	HX_GC_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_153_boundsFind)
HXLINE( 154)		{
HXLINE( 154)			int _g = (int)0;
HXDLIN( 154)			::Array< ::Dynamic> _g1 = this->points;
HXDLIN( 154)			while((_g < _g1->length)){
HXLINE( 154)				 ::flixel::math::FlxPoint point = _g1->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN( 154)				_g = (_g + (int)1);
HXLINE( 155)				if ((point->x < this->minX)) {
HXLINE( 156)					this->minX = point->x;
            				}
HXLINE( 158)				if ((point->x > this->maxX)) {
HXLINE( 159)					this->maxX = point->x;
            				}
HXLINE( 161)				if ((point->y < this->minY)) {
HXLINE( 162)					this->minY = point->y;
            				}
HXLINE( 164)				if ((point->y > this->maxY)) {
HXLINE( 165)					this->maxY = point->y;
            				}
            			}
            		}
HXLINE( 167)		 ::flixel::math::FlxPoint this1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,((Float)(this->minX + this->maxX) / (Float)(int)2),((Float)(this->minY + this->maxY) / (Float)(int)2));
HXDLIN( 167)		this->centroid = this1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Polygon_obj,boundsFind,(void))

Float Polygon_obj::degToRad(Float degrees){
            	HX_STACKFRAME(&_hx_pos_d0f801917b2b4eb7_172_degToRad)
HXDLIN( 172)		return ((Float)(degrees * ::Math_obj::PI) / (Float)(int)180);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Polygon_obj,degToRad,return )


hx::ObjectPtr< Polygon_obj > Polygon_obj::__new() {
	hx::ObjectPtr< Polygon_obj > __this = new Polygon_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Polygon_obj > Polygon_obj::__alloc(hx::Ctx *_hx_ctx) {
	Polygon_obj *__this = (Polygon_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Polygon_obj), true, "entity.Polygon"));
	*(void **)__this = Polygon_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Polygon_obj::Polygon_obj()
{
}

void Polygon_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Polygon);
	HX_MARK_MEMBER_NAME(points,"points");
	HX_MARK_MEMBER_NAME(minX,"minX");
	HX_MARK_MEMBER_NAME(maxX,"maxX");
	HX_MARK_MEMBER_NAME(minY,"minY");
	HX_MARK_MEMBER_NAME(maxY,"maxY");
	HX_MARK_MEMBER_NAME(rotation,"rotation");
	HX_MARK_MEMBER_NAME(scaleSize,"scaleSize");
	HX_MARK_MEMBER_NAME(locPoints,"locPoints");
	HX_MARK_MEMBER_NAME(centroid,"centroid");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Polygon_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(points,"points");
	HX_VISIT_MEMBER_NAME(minX,"minX");
	HX_VISIT_MEMBER_NAME(maxX,"maxX");
	HX_VISIT_MEMBER_NAME(minY,"minY");
	HX_VISIT_MEMBER_NAME(maxY,"maxY");
	HX_VISIT_MEMBER_NAME(rotation,"rotation");
	HX_VISIT_MEMBER_NAME(scaleSize,"scaleSize");
	HX_VISIT_MEMBER_NAME(locPoints,"locPoints");
	HX_VISIT_MEMBER_NAME(centroid,"centroid");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Polygon_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"minX") ) { return hx::Val( minX ); }
		if (HX_FIELD_EQ(inName,"maxX") ) { return hx::Val( maxX ); }
		if (HX_FIELD_EQ(inName,"minY") ) { return hx::Val( minY ); }
		if (HX_FIELD_EQ(inName,"maxY") ) { return hx::Val( maxY ); }
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { return hx::Val( points ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { return hx::Val( rotation ); }
		if (HX_FIELD_EQ(inName,"centroid") ) { return hx::Val( centroid ); }
		if (HX_FIELD_EQ(inName,"degToRad") ) { return hx::Val( degToRad_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scaleSize") ) { return hx::Val( scaleSize ); }
		if (HX_FIELD_EQ(inName,"locPoints") ) { return hx::Val( locPoints ); }
		if (HX_FIELD_EQ(inName,"mouseDown") ) { return hx::Val( mouseDown_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"boundsFind") ) { return hx::Val( boundsFind_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getTransformedPoints") ) { return hx::Val( getTransformedPoints_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Polygon_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"minX") ) { minX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxX") ) { maxX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minY") ) { minY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxY") ) { maxY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"points") ) { points=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"rotation") ) { rotation=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"centroid") ) { centroid=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"scaleSize") ) { scaleSize=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"locPoints") ) { locPoints=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Polygon_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"));
	outFields->push(HX_HCSTRING("minX","\x86","\x4e","\x5c","\x48"));
	outFields->push(HX_HCSTRING("maxX","\x34","\x45","\x56","\x48"));
	outFields->push(HX_HCSTRING("minY","\x87","\x4e","\x5c","\x48"));
	outFields->push(HX_HCSTRING("maxY","\x35","\x45","\x56","\x48"));
	outFields->push(HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"));
	outFields->push(HX_HCSTRING("scaleSize","\x6b","\xa8","\xc6","\x2f"));
	outFields->push(HX_HCSTRING("locPoints","\xc3","\x3a","\x47","\x0b"));
	outFields->push(HX_HCSTRING("centroid","\x40","\xe0","\xe5","\x97"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Polygon_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Polygon_obj,points),HX_HCSTRING("points","\x23","\x12","\x2e","\xf7")},
	{hx::fsFloat,(int)offsetof(Polygon_obj,minX),HX_HCSTRING("minX","\x86","\x4e","\x5c","\x48")},
	{hx::fsFloat,(int)offsetof(Polygon_obj,maxX),HX_HCSTRING("maxX","\x34","\x45","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(Polygon_obj,minY),HX_HCSTRING("minY","\x87","\x4e","\x5c","\x48")},
	{hx::fsFloat,(int)offsetof(Polygon_obj,maxY),HX_HCSTRING("maxY","\x35","\x45","\x56","\x48")},
	{hx::fsFloat,(int)offsetof(Polygon_obj,rotation),HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08")},
	{hx::fsFloat,(int)offsetof(Polygon_obj,scaleSize),HX_HCSTRING("scaleSize","\x6b","\xa8","\xc6","\x2f")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Polygon_obj,locPoints),HX_HCSTRING("locPoints","\xc3","\x3a","\x47","\x0b")},
	{hx::fsObject /*::flixel::math::FlxPoint*/ ,(int)offsetof(Polygon_obj,centroid),HX_HCSTRING("centroid","\x40","\xe0","\xe5","\x97")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Polygon_obj_sStaticStorageInfo = 0;
#endif

static ::String Polygon_obj_sMemberFields[] = {
	HX_HCSTRING("points","\x23","\x12","\x2e","\xf7"),
	HX_HCSTRING("minX","\x86","\x4e","\x5c","\x48"),
	HX_HCSTRING("maxX","\x34","\x45","\x56","\x48"),
	HX_HCSTRING("minY","\x87","\x4e","\x5c","\x48"),
	HX_HCSTRING("maxY","\x35","\x45","\x56","\x48"),
	HX_HCSTRING("rotation","\x3e","\x3d","\x86","\x08"),
	HX_HCSTRING("scaleSize","\x6b","\xa8","\xc6","\x2f"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("locPoints","\xc3","\x3a","\x47","\x0b"),
	HX_HCSTRING("draw","\x04","\x2c","\x70","\x42"),
	HX_HCSTRING("centroid","\x40","\xe0","\xe5","\x97"),
	HX_HCSTRING("mouseDown","\x27","\xb1","\xc2","\xee"),
	HX_HCSTRING("getTransformedPoints","\xd8","\x9f","\x61","\x20"),
	HX_HCSTRING("boundsFind","\x4e","\x61","\xcf","\x76"),
	HX_HCSTRING("degToRad","\x74","\x8f","\xb4","\x95"),
	::String(null()) };

static void Polygon_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Polygon_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Polygon_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Polygon_obj::__mClass,"__mClass");
};

#endif

hx::Class Polygon_obj::__mClass;

void Polygon_obj::__register()
{
	hx::Object *dummy = new Polygon_obj;
	Polygon_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.Polygon","\x0f","\x1a","\xdb","\x69");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Polygon_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Polygon_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Polygon_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Polygon_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Polygon_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Polygon_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
