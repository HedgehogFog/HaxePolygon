// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_entity_block_Border
#include <entity/block/Border.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3ed510b7eb79be4c_10_new,"entity.block.Border","new",0xf6eeb32a,"entity.block.Border.new","entity/block/Border.hx",10,0xb0c40084)
HX_LOCAL_STACK_FRAME(_hx_pos_3ed510b7eb79be4c_22_init,"entity.block.Border","init",0x16a6c906,"entity.block.Border.init","entity/block/Border.hx",22,0xb0c40084)
namespace entity{
namespace block{

void Border_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_3ed510b7eb79be4c_10_new)
HXLINE(  11)		super::__construct(null(),null(),null());
HXLINE(  17)		this->set_immovable(true);
HXLINE(  18)		this->set_solid(true);
            	}

Dynamic Border_obj::__CreateEmpty() { return new Border_obj; }

void *Border_obj::_hx_vtable = 0;

Dynamic Border_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Border_obj > _hx_result = new Border_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Border_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x46729cb2;
	}
}

void Border_obj::init(){
            	HX_STACKFRAME(&_hx_pos_3ed510b7eb79be4c_22_init)
HXDLIN(  22)		int _hx_tmp = ::Std_obj::_hx_int(this->get_width());
HXDLIN(  22)		this->makeGraphic(_hx_tmp,::Std_obj::_hx_int(this->get_height()),(int)-1,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Border_obj,init,(void))


hx::ObjectPtr< Border_obj > Border_obj::__new() {
	hx::ObjectPtr< Border_obj > __this = new Border_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Border_obj > Border_obj::__alloc(hx::Ctx *_hx_ctx) {
	Border_obj *__this = (Border_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Border_obj), true, "entity.block.Border"));
	*(void **)__this = Border_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Border_obj::Border_obj()
{
}

hx::Val Border_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Border_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Border_obj_sStaticStorageInfo = 0;
#endif

static ::String Border_obj_sMemberFields[] = {
	HX_HCSTRING("init","\x10","\x3b","\xbb","\x45"),
	::String(null()) };

static void Border_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Border_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Border_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Border_obj::__mClass,"__mClass");
};

#endif

hx::Class Border_obj::__mClass;

void Border_obj::__register()
{
	hx::Object *dummy = new Border_obj;
	Border_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.block.Border","\x38","\x96","\x3f","\x73");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Border_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Border_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Border_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Border_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Border_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Border_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
} // end namespace block
