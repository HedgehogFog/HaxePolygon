// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_entity_user_Player
#include <entity/user/Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_655db671eadbece5_6_new,"entity.user.Player","new",0xd40892eb,"entity.user.Player.new","entity/user/Player.hx",6,0xd5a68a85)
HX_LOCAL_STACK_FRAME(_hx_pos_655db671eadbece5_21_update,"entity.user.Player","update",0x9316ac5e,"entity.user.Player.update","entity/user/Player.hx",21,0xd5a68a85)
static const int _hx_array_data_c01c4179_2[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_c01c4179_3[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_c01c4179_4[] = {
	(int)39,(int)68,
};
namespace entity{
namespace user{

void Player_obj::__construct(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_655db671eadbece5_6_new)
HXLINE(  10)		this->rot = ((Float)150);
HXLINE(   8)		this->speed = ((Float)300);
HXLINE(  13)		super::__construct(x,y,null());
HXLINE(  15)		this->loadGraphic(HX_("assets/images/Player.png",a7,8c,32,bd),false,null(),null(),null(),null());
HXLINE(  17)		this->set_width((int)32);
HXLINE(  18)		this->set_height((int)32);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2414ff13) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x2414ff13;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_655db671eadbece5_21_update)
HXLINE(  22)		this->super::update(elapsed);
HXLINE(  24)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c01c4179_2,2),(int)1)) {
HXLINE(  25)			this->speed = (int)150;
            		}
HXLINE(  28)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c01c4179_3,2),(int)1)) {
HXLINE(  29)			 ::entity::user::Player _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  29)			_hx_tmp->dir = (_hx_tmp->dir - (this->rot * elapsed));
            		}
HXLINE(  32)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c01c4179_4,2),(int)1)) {
HXLINE(  33)			 ::entity::user::Player _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  33)			_hx_tmp1->dir = (_hx_tmp1->dir + (this->rot * elapsed));
            		}
HXLINE(  36)		 ::flixel::math::FlxPoint _hx_tmp2 = this->velocity;
HXDLIN(  36)		Float _hx_tmp3 = this->speed;
HXDLIN(  36)		Float _hx_tmp4 = (_hx_tmp3 * ::Math_obj::cos(((Float)((this->angle - (int)90) * ::Math_obj::PI) / (Float)(int)180)));
HXLINE(  37)		Float _hx_tmp5 = this->speed;
HXLINE(  36)		_hx_tmp2->set(_hx_tmp4,(_hx_tmp5 * ::Math_obj::sin(((Float)((this->angle - (int)90) * ::Math_obj::PI) / (Float)(int)180))));
HXLINE(  38)		 ::entity::user::Player _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  38)		_hx_tmp6->speed = (_hx_tmp6->speed * (elapsed * ((Float)0.5)));
HXLINE(  39)		this->set_angle(this->dir);
            	}



hx::ObjectPtr< Player_obj > Player_obj::__new(Float x,Float y) {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(x,y);
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx,Float x,Float y) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "entity.user.Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(x,y);
	return __this;
}

Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { return hx::Val( dir ); }
		if (HX_FIELD_EQ(inName,"rot") ) { return hx::Val( rot ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rot") ) { rot=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	outFields->push(HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00"));
	outFields->push(HX_HCSTRING("rot","\x17","\xe2","\x56","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{hx::fsFloat,(int)offsetof(Player_obj,dir),HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00")},
	{hx::fsFloat,(int)offsetof(Player_obj,rot),HX_HCSTRING("rot","\x17","\xe2","\x56","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("dir","\x4d","\x3d","\x4c","\x00"),
	HX_HCSTRING("rot","\x17","\xe2","\x56","\x00"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.user.Player","\x79","\x41","\x1c","\xc0");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
} // end namespace user
