// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_entity_Point
#include <entity/Point.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d772d502fcdef8f6_7_new,"entity.Point","new",0x58f2a417,"entity.Point.new","entity/Point.hx",7,0x88b9143a)
namespace entity{

void Point_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_d772d502fcdef8f6_7_new)
HXLINE(   8)		super::__construct(null(),null(),null());
HXLINE(  10)		this->makeGraphic((int)4,(int)4,(int)-1,null(),null());
            	}

Dynamic Point_obj::__CreateEmpty() { return new Point_obj; }

void *Point_obj::_hx_vtable = 0;

Dynamic Point_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Point_obj > _hx_result = new Point_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Point_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0b6ffd77) {
		if (inClassId<=(int)0x0667faa9) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0667faa9;
		} else {
			return inClassId==(int)0x0b6ffd77;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x2e105115;
	}
}


hx::ObjectPtr< Point_obj > Point_obj::__new() {
	hx::ObjectPtr< Point_obj > __this = new Point_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Point_obj > Point_obj::__alloc(hx::Ctx *_hx_ctx) {
	Point_obj *__this = (Point_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Point_obj), true, "entity.Point"));
	*(void **)__this = Point_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Point_obj::Point_obj()
{
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Point_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Point_obj_sStaticStorageInfo = 0;
#endif

static void Point_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Point_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Point_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Point_obj::__mClass,"__mClass");
};

#endif

hx::Class Point_obj::__mClass;

void Point_obj::__register()
{
	hx::Object *dummy = new Point_obj;
	Point_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("entity.Point","\xa5","\x4c","\x83","\x47");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Point_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Point_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Point_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Point_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Point_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace entity
