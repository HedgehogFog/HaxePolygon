// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif
#ifndef INCLUDED_system_DataSystem
#include <system/DataSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f90293a6dd6dcc06_17_save,"system.DataSystem","save",0x39b32f73,"system.DataSystem.save","system/DataSystem.hx",17,0x5cb2b925)
HX_LOCAL_STACK_FRAME(_hx_pos_f90293a6dd6dcc06_42_load,"system.DataSystem","load",0x351d3e5c,"system.DataSystem.load","system/DataSystem.hx",42,0x5cb2b925)
namespace _hx_system{

void DataSystem_obj::__construct() { }

Dynamic DataSystem_obj::__CreateEmpty() { return new DataSystem_obj; }

void *DataSystem_obj::_hx_vtable = 0;

Dynamic DataSystem_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DataSystem_obj > _hx_result = new DataSystem_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DataSystem_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e6d0134;
}

void DataSystem_obj::save(::Array< ::Dynamic> points,Float rotation,Float size){
            	HX_STACKFRAME(&_hx_pos_f90293a6dd6dcc06_17_save)
HXLINE(  27)		 ::sys::io::FileOutput fout = ::sys::io::File_obj::write(HX_("data.vll",32,6c,5c,73),null());
HXLINE(  28)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  29)			fout->writeFloat(points->length);
HXLINE(  30)			{
HXLINE(  30)				int _g = (int)0;
HXDLIN(  30)				while((_g < points->length)){
HXLINE(  30)					 ::flixel::math::FlxPoint point = points->__get(_g).StaticCast<  ::flixel::math::FlxPoint >();
HXDLIN(  30)					_g = (_g + (int)1);
HXLINE(  31)					fout->writeFloat(point->x);
HXLINE(  32)					fout->writeFloat(point->y);
            				}
            			}
HXLINE(  34)			fout->writeFloat(rotation);
HXLINE(  35)			fout->writeFloat(size);
HXLINE(  36)			::sys::io::File_obj::saveContent(HX_("data.vll",32,6c,5c,73),HX_("Penis",e3,c8,24,53));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic ex = _hx_e;
HXLINE(  38)				::haxe::Log_obj::trace(ex,hx::SourceInfo(HX_("DataSystem.hx",85,2f,f9,9d),38,HX_("system.DataSystem",f8,27,7d,9d),HX_("save",3d,8b,4d,4c)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(DataSystem_obj,save,(void))

 ::Dynamic DataSystem_obj::load(){
            	HX_GC_STACKFRAME(&_hx_pos_f90293a6dd6dcc06_42_load)
HXLINE(  43)		 ::sys::io::FileInput fin = ::sys::io::File_obj::read(HX_("data.vll",32,6c,5c,73),false);
HXLINE(  44)		 ::Dynamic data =  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("points",23,12,2e,f7),::Array_obj< ::Dynamic>::__new())
            			->setFixed(1,HX_("rotation",3e,3d,86,08),(int)0)
            			->setFixed(2,HX_("size",c1,a0,53,4c),(int)0));
HXLINE(  50)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE(  51)			int length = fin->readUInt16();
HXLINE(  52)			{
HXLINE(  52)				int _g1 = (int)0;
HXDLIN(  52)				int _g = length;
HXDLIN(  52)				while((_g1 < _g)){
HXLINE(  52)					_g1 = (_g1 + (int)1);
HXDLIN(  52)					int i = (_g1 - (int)1);
HXLINE(  53)					Float x = fin->readFloat();
HXLINE(  54)					Float y = fin->readFloat();
HXLINE(  55)					::Array< ::Dynamic> data1 = ( (::Array< ::Dynamic>)(data->__Field(HX_("points",23,12,2e,f7),hx::paccDynamic)) );
HXDLIN(  55)					data1->push( ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,x,y));
            				}
            			}
HXLINE(  57)			data->__SetField(HX_("rotation",3e,3d,86,08),fin->readFloat(),hx::paccDynamic);
HXLINE(  58)			data->__SetField(HX_("size",c1,a0,53,4c),fin->readFloat(),hx::paccDynamic);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof ex = _hx_e;
HXLINE(  61)				::haxe::Log_obj::trace(ex,hx::SourceInfo(HX_("DataSystem.hx",85,2f,f9,9d),61,HX_("system.DataSystem",f8,27,7d,9d),HX_("load",26,9a,b7,47)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  63)		fin->close();
HXLINE(  65)		return data;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DataSystem_obj,load,return )


DataSystem_obj::DataSystem_obj()
{
}

bool DataSystem_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { outValue = save_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"load") ) { outValue = load_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *DataSystem_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *DataSystem_obj_sStaticStorageInfo = 0;
#endif

static void DataSystem_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DataSystem_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DataSystem_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DataSystem_obj::__mClass,"__mClass");
};

#endif

hx::Class DataSystem_obj::__mClass;

static ::String DataSystem_obj_sStaticFields[] = {
	HX_HCSTRING("save","\x3d","\x8b","\x4d","\x4c"),
	HX_HCSTRING("load","\x26","\x9a","\xb7","\x47"),
	::String(null())
};

void DataSystem_obj::__register()
{
	hx::Object *dummy = new DataSystem_obj;
	DataSystem_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("system.DataSystem","\xf8","\x27","\x7d","\x9d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DataSystem_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = DataSystem_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(DataSystem_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< DataSystem_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DataSystem_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DataSystem_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DataSystem_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace system
