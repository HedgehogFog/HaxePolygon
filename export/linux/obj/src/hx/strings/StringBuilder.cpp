// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_hx_strings_StringBuilder
#include <hx/strings/StringBuilder.h>
#endif
#ifndef INCLUDED_hx_strings_Strings
#include <hx/strings/Strings.h>
#endif
#ifndef INCLUDED_hx_strings__Char_Char_Impl_
#include <hx/strings/_Char/Char_Impl_.h>
#endif
#ifndef INCLUDED_hx_strings__StringBuilder_OutputWrapper
#include <hx/strings/_StringBuilder/OutputWrapper.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b646f356da37ac48_20_new,"hx.strings.StringBuilder","new",0xee97d452,"hx.strings.StringBuilder.new","hx/strings/StringBuilder.hx",20,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_54_get_length,"hx.strings.StringBuilder","get_length",0x5ad142fd,"hx.strings.StringBuilder.get_length","hx/strings/StringBuilder.hx",54,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_68_add,"hx.strings.StringBuilder","add",0xee8df613,"hx.strings.StringBuilder.add","hx/strings/StringBuilder.hx",68,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_85_addChar,"hx.strings.StringBuilder","addChar",0x68f68689,"hx.strings.StringBuilder.addChar","hx/strings/StringBuilder.hx",85,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_109_addAll,"hx.strings.StringBuilder","addAll",0x8ed088ce,"hx.strings.StringBuilder.addAll","hx/strings/StringBuilder.hx",109,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_128_clear,"hx.strings.StringBuilder","clear",0x529dd5ff,"hx.strings.StringBuilder.clear","hx/strings/StringBuilder.hx",128,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_151_isEmpty,"hx.strings.StringBuilder","isEmpty",0xf759c335,"hx.strings.StringBuilder.isEmpty","hx/strings/StringBuilder.hx",151,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_160_newLine,"hx.strings.StringBuilder","newLine",0xe279a966,"hx.strings.StringBuilder.newLine","hx/strings/StringBuilder.hx",160,0x236fa860)
static const ::String _hx_array_data_b6270360_9[] = {
	HX_("\n",0a,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_186_insert,"hx.strings.StringBuilder","insert",0x8db2c287,"hx.strings.StringBuilder.insert","hx/strings/StringBuilder.hx",186,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_262_insertChar,"hx.strings.StringBuilder","insertChar",0xf2ec9cfd,"hx.strings.StringBuilder.insertChar","hx/strings/StringBuilder.hx",262,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_329_insertAll,"hx.strings.StringBuilder","insertAll",0x225ffcda,"hx.strings.StringBuilder.insertAll","hx/strings/StringBuilder.hx",329,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_417_asOutput,"hx.strings.StringBuilder","asOutput",0x4b058861,"hx.strings.StringBuilder.asOutput","hx/strings/StringBuilder.hx",417,0x236fa860)
HX_LOCAL_STACK_FRAME(_hx_pos_b646f356da37ac48_431_toString,"hx.strings.StringBuilder","toString",0xe81d3f7a,"hx.strings.StringBuilder.toString","hx/strings/StringBuilder.hx",431,0x236fa860)
namespace hx{
namespace strings{

void StringBuilder_obj::__construct(::String initialContent){
            	HX_GC_STACKFRAME(&_hx_pos_b646f356da37ac48_20_new)
HXLINE(  26)		this->len = (int)0;
HXLINE(  25)		this->pre = null();
HXLINE(  22)		this->sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  31)		if (hx::IsNotNull( initialContent )) {
HXLINE(  32)			{
HXLINE(  32)				 ::StringBuf _this = this->sb;
HXDLIN(  32)				if (hx::IsNotNull( _this->charBuf )) {
HXLINE(  32)					_this->flush();
            				}
HXDLIN(  32)				if (hx::IsNull( _this->b )) {
HXLINE(  32)					_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(initialContent));
            				}
            				else {
HXLINE(  32)					::Array< ::String > _this1 = _this->b;
HXDLIN(  32)					_this1->push(::Std_obj::string(initialContent));
            				}
            			}
HXDLIN(  32)			 ::hx::strings::StringBuilder _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  32)			int _hx_tmp1 = _hx_tmp->len;
HXDLIN(  32)			int _hx_tmp2;
HXDLIN(  32)			if (hx::IsNull( initialContent )) {
HXLINE(  32)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE(  32)				_hx_tmp2 = ::haxe::Utf8_obj::length(initialContent);
            			}
HXDLIN(  32)			_hx_tmp->len = (_hx_tmp1 + _hx_tmp2);
            		}
            	}

Dynamic StringBuilder_obj::__CreateEmpty() { return new StringBuilder_obj; }

void *StringBuilder_obj::_hx_vtable = 0;

Dynamic StringBuilder_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StringBuilder_obj > _hx_result = new StringBuilder_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StringBuilder_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0c6f9524;
}

int StringBuilder_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_54_get_length)
HXDLIN(  54)		return this->len;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuilder_obj,get_length,return )

 ::hx::strings::StringBuilder StringBuilder_obj::add(::String item){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_68_add)
HXLINE(  69)		{
HXLINE(  69)			 ::StringBuf _this = this->sb;
HXDLIN(  69)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE(  69)				_this->flush();
            			}
HXDLIN(  69)			if (hx::IsNull( _this->b )) {
HXLINE(  69)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            			}
            			else {
HXLINE(  69)				::Array< ::String > _this1 = _this->b;
HXDLIN(  69)				_this1->push(::Std_obj::string(item));
            			}
            		}
HXLINE(  71)		 ::hx::strings::StringBuilder _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  71)		int _hx_tmp1 = _hx_tmp->len;
HXDLIN(  71)		int _hx_tmp2;
HXDLIN(  71)		if (hx::IsNull( item )) {
HXLINE(  71)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE(  71)			_hx_tmp2 = ::haxe::Utf8_obj::length(item);
            		}
HXDLIN(  71)		_hx_tmp->len = (_hx_tmp1 + _hx_tmp2);
HXLINE(  73)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StringBuilder_obj,add,return )

 ::hx::strings::StringBuilder StringBuilder_obj::addChar(int ch){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_85_addChar)
HXLINE(  89)		bool _hx_tmp;
HXDLIN(  89)		if ((ch > (int)-1)) {
HXLINE(  89)			_hx_tmp = (ch < (int)128);
            		}
            		else {
HXLINE(  89)			_hx_tmp = false;
            		}
HXDLIN(  89)		if (_hx_tmp) {
HXLINE(  90)			 ::StringBuf _this = this->sb;
HXDLIN(  90)			if (hx::IsNull( _this->charBuf )) {
HXLINE(  90)				_this->charBuf = ::Array_obj< char >::__new();
            			}
HXDLIN(  90)			_this->charBuf->push(ch);
            		}
            		else {
HXLINE(  93)			 ::StringBuf _this1 = this->sb;
HXDLIN(  93)			::String x = ::hx::strings::_Char::Char_Impl__obj::toString(ch);
HXDLIN(  93)			if (hx::IsNotNull( _this1->charBuf )) {
HXLINE(  93)				_this1->flush();
            			}
HXDLIN(  93)			if (hx::IsNull( _this1->b )) {
HXLINE(  93)				_this1->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE(  93)				::Array< ::String > _this2 = _this1->b;
HXDLIN(  93)				_this2->push(::Std_obj::string(x));
            			}
            		}
HXLINE(  97)		this->len++;
HXLINE(  99)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StringBuilder_obj,addChar,return )

 ::hx::strings::StringBuilder StringBuilder_obj::addAll(::Array< ::String > items){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_109_addAll)
HXLINE( 110)		{
HXLINE( 110)			int _g = (int)0;
HXDLIN( 110)			while((_g < items->length)){
HXLINE( 110)				::String item = items->__get(_g);
HXDLIN( 110)				_g = (_g + (int)1);
HXLINE( 111)				{
HXLINE( 111)					 ::StringBuf _this = this->sb;
HXDLIN( 111)					if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 111)						_this->flush();
            					}
HXDLIN( 111)					if (hx::IsNull( _this->b )) {
HXLINE( 111)						_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            					}
            					else {
HXLINE( 111)						::Array< ::String > _this1 = _this->b;
HXDLIN( 111)						_this1->push(::Std_obj::string(item));
            					}
            				}
HXLINE( 113)				 ::hx::strings::StringBuilder _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 113)				int _hx_tmp1 = _hx_tmp->len;
HXDLIN( 113)				int _hx_tmp2;
HXDLIN( 113)				if (hx::IsNull( item )) {
HXLINE( 113)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 113)					_hx_tmp2 = ::haxe::Utf8_obj::length(item);
            				}
HXDLIN( 113)				_hx_tmp->len = (_hx_tmp1 + _hx_tmp2);
            			}
            		}
HXLINE( 116)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC1(StringBuilder_obj,addAll,return )

 ::hx::strings::StringBuilder StringBuilder_obj::clear(){
            	HX_GC_STACKFRAME(&_hx_pos_b646f356da37ac48_128_clear)
HXLINE( 134)		this->pre = null();
HXLINE( 135)		this->sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 136)		this->len = (int)0;
HXLINE( 138)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuilder_obj,clear,return )

bool StringBuilder_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_151_isEmpty)
HXDLIN( 151)		return (this->len == (int)0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuilder_obj,isEmpty,return )

 ::hx::strings::StringBuilder StringBuilder_obj::newLine(){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_160_newLine)
HXLINE( 161)		{
HXLINE( 161)			 ::StringBuf _this = this->sb;
HXDLIN( 161)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 161)				_this->flush();
            			}
HXDLIN( 161)			if (hx::IsNull( _this->b )) {
HXLINE( 161)				_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_b6270360_9,1);
            			}
            			else {
HXLINE( 161)				_this->b->push(HX_("\n",0a,00,00,00));
            			}
            		}
HXLINE( 164)		this->len++;
HXLINE( 166)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuilder_obj,newLine,return )

 ::hx::strings::StringBuilder StringBuilder_obj::insert(int pos,::String item){
            	HX_GC_STACKFRAME(&_hx_pos_b646f356da37ac48_186_insert)
HXLINE( 187)		if ((pos < (int)0)) {
HXLINE( 187)			HX_STACK_DO_THROW(HX_("[pos] must not be negative",4a,29,00,72));
            		}
HXLINE( 188)		if ((pos > this->len)) {
HXLINE( 188)			HX_STACK_DO_THROW(HX_("[pos] must not be greater than this.length",72,00,e4,81));
            		}
HXLINE( 190)		if ((pos == this->len)) {
HXLINE( 191)			{
HXLINE( 191)				{
HXLINE( 191)					 ::StringBuf _this = this->sb;
HXDLIN( 191)					if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 191)						_this->flush();
            					}
HXDLIN( 191)					if (hx::IsNull( _this->b )) {
HXLINE( 191)						_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            					}
            					else {
HXLINE( 191)						::Array< ::String > _this1 = _this->b;
HXDLIN( 191)						_this1->push(::Std_obj::string(item));
            					}
            				}
HXDLIN( 191)				 ::hx::strings::StringBuilder _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 191)				int _hx_tmp1 = _hx_tmp->len;
HXDLIN( 191)				int _hx_tmp2;
HXDLIN( 191)				if (hx::IsNull( item )) {
HXLINE( 191)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 191)					_hx_tmp2 = ::haxe::Utf8_obj::length(item);
            				}
HXDLIN( 191)				_hx_tmp->len = (_hx_tmp1 + _hx_tmp2);
            			}
HXLINE( 192)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 200)		if ((pos == (int)0)) {
HXLINE( 201)			if (hx::IsNull( this->pre )) {
HXLINE( 201)				this->pre = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 202)			this->pre->unshift(item);
HXLINE( 203)			 ::hx::strings::StringBuilder _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 203)			int _hx_tmp4 = _hx_tmp3->len;
HXDLIN( 203)			int _hx_tmp5;
HXDLIN( 203)			if (hx::IsNull( item )) {
HXLINE( 203)				_hx_tmp5 = (int)0;
            			}
            			else {
HXLINE( 203)				_hx_tmp5 = ::haxe::Utf8_obj::length(item);
            			}
HXDLIN( 203)			_hx_tmp3->len = (_hx_tmp4 + _hx_tmp5);
HXLINE( 204)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 208)		int pre_len = (int)0;
HXLINE( 209)		if (hx::IsNotNull( this->pre )) {
HXLINE( 210)			int i = this->pre->length;
HXLINE( 211)			{
HXLINE( 211)				int _g1 = (int)0;
HXDLIN( 211)				int _g = this->pre->length;
HXDLIN( 211)				while((_g1 < _g)){
HXLINE( 211)					_g1 = (_g1 + (int)1);
HXDLIN( 211)					int i1 = (_g1 - (int)1);
HXLINE( 212)					::String str = this->pre->__get(i1);
HXDLIN( 212)					int next_pre_len;
HXDLIN( 212)					if (hx::IsNull( str )) {
HXLINE( 212)						next_pre_len = (int)0;
            					}
            					else {
HXLINE( 212)						next_pre_len = ::haxe::Utf8_obj::length(str);
            					}
HXDLIN( 212)					int next_pre_len1 = (pre_len + next_pre_len);
HXLINE( 213)					if ((next_pre_len1 == pos)) {
HXLINE( 214)						::Array< ::String > _hx_tmp6 = this->pre;
HXDLIN( 214)						_hx_tmp6->insert((i1 + (int)1),item);
HXLINE( 215)						 ::hx::strings::StringBuilder _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 215)						int _hx_tmp8 = _hx_tmp7->len;
HXDLIN( 215)						int _hx_tmp9;
HXDLIN( 215)						if (hx::IsNull( item )) {
HXLINE( 215)							_hx_tmp9 = (int)0;
            						}
            						else {
HXLINE( 215)							_hx_tmp9 = ::haxe::Utf8_obj::length(item);
            						}
HXDLIN( 215)						_hx_tmp7->len = (_hx_tmp8 + _hx_tmp9);
HXLINE( 216)						return hx::ObjectPtr<OBJ_>(this);
            					}
HXLINE( 218)					if ((next_pre_len1 > pos)) {
HXLINE( 219)						::Array< ::String > preSplitted = ::hx::strings::Strings_obj::splitAt(this->pre->__get(i1),::Array_obj< int >::__new(1)->init(0,(pos - pre_len)));
HXLINE( 220)						::Array< ::String > _hx_tmp10 = this->pre;
HXDLIN( 220)						_hx_tmp10[i1] = preSplitted->__get((int)0);
HXLINE( 221)						::Array< ::String > _hx_tmp11 = this->pre;
HXDLIN( 221)						_hx_tmp11->insert((i1 + (int)1),item);
HXLINE( 222)						::Array< ::String > _hx_tmp12 = this->pre;
HXDLIN( 222)						_hx_tmp12->insert((i1 + (int)2),preSplitted->__get((int)1));
HXLINE( 223)						 ::hx::strings::StringBuilder _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 223)						int _hx_tmp14 = _hx_tmp13->len;
HXDLIN( 223)						int _hx_tmp15;
HXDLIN( 223)						if (hx::IsNull( item )) {
HXLINE( 223)							_hx_tmp15 = (int)0;
            						}
            						else {
HXLINE( 223)							_hx_tmp15 = ::haxe::Utf8_obj::length(item);
            						}
HXDLIN( 223)						_hx_tmp13->len = (_hx_tmp14 + _hx_tmp15);
HXLINE( 224)						return hx::ObjectPtr<OBJ_>(this);
            					}
HXLINE( 226)					pre_len = next_pre_len1;
            				}
            			}
            		}
HXLINE( 230)		if ((this->sb->get_length() == (int)0)) {
HXLINE( 231)			{
HXLINE( 231)				{
HXLINE( 231)					 ::StringBuf _this2 = this->sb;
HXDLIN( 231)					if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 231)						_this2->flush();
            					}
HXDLIN( 231)					if (hx::IsNull( _this2->b )) {
HXLINE( 231)						_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            					}
            					else {
HXLINE( 231)						::Array< ::String > _this3 = _this2->b;
HXDLIN( 231)						_this3->push(::Std_obj::string(item));
            					}
            				}
HXDLIN( 231)				 ::hx::strings::StringBuilder _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 231)				int _hx_tmp17 = _hx_tmp16->len;
HXDLIN( 231)				int _hx_tmp18;
HXDLIN( 231)				if (hx::IsNull( item )) {
HXLINE( 231)					_hx_tmp18 = (int)0;
            				}
            				else {
HXLINE( 231)					_hx_tmp18 = ::haxe::Utf8_obj::length(item);
            				}
HXDLIN( 231)				_hx_tmp16->len = (_hx_tmp17 + _hx_tmp18);
            			}
HXLINE( 232)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 235)		::Array< ::String > sbSplitted = ::hx::strings::Strings_obj::splitAt(this->sb->toString(),::Array_obj< int >::__new(1)->init(0,(pos - pre_len)));
HXLINE( 236)		this->sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 237)		{
HXLINE( 237)			 ::StringBuf _this4 = this->sb;
HXDLIN( 237)			::String x = sbSplitted->__get((int)0);
HXDLIN( 237)			if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 237)				_this4->flush();
            			}
HXDLIN( 237)			if (hx::IsNull( _this4->b )) {
HXLINE( 237)				_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE( 237)				::Array< ::String > _this5 = _this4->b;
HXDLIN( 237)				_this5->push(::Std_obj::string(x));
            			}
            		}
HXLINE( 238)		{
HXLINE( 238)			 ::StringBuf _this6 = this->sb;
HXDLIN( 238)			if (hx::IsNotNull( _this6->charBuf )) {
HXLINE( 238)				_this6->flush();
            			}
HXDLIN( 238)			if (hx::IsNull( _this6->b )) {
HXLINE( 238)				_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            			}
            			else {
HXLINE( 238)				::Array< ::String > _this7 = _this6->b;
HXDLIN( 238)				_this7->push(::Std_obj::string(item));
            			}
            		}
HXLINE( 239)		 ::hx::strings::StringBuilder _hx_tmp19 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 239)		int _hx_tmp20 = _hx_tmp19->len;
HXDLIN( 239)		int _hx_tmp21;
HXDLIN( 239)		if (hx::IsNull( item )) {
HXLINE( 239)			_hx_tmp21 = (int)0;
            		}
            		else {
HXLINE( 239)			_hx_tmp21 = ::haxe::Utf8_obj::length(item);
            		}
HXDLIN( 239)		_hx_tmp19->len = (_hx_tmp20 + _hx_tmp21);
HXLINE( 240)		{
HXLINE( 240)			 ::StringBuf _this8 = this->sb;
HXDLIN( 240)			::String x1 = sbSplitted->__get((int)1);
HXDLIN( 240)			if (hx::IsNotNull( _this8->charBuf )) {
HXLINE( 240)				_this8->flush();
            			}
HXDLIN( 240)			if (hx::IsNull( _this8->b )) {
HXLINE( 240)				_this8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 240)				::Array< ::String > _this9 = _this8->b;
HXDLIN( 240)				_this9->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 242)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(StringBuilder_obj,insert,return )

 ::hx::strings::StringBuilder StringBuilder_obj::insertChar(int pos,int ch){
            	HX_GC_STACKFRAME(&_hx_pos_b646f356da37ac48_262_insertChar)
HXLINE( 263)		if ((pos < (int)0)) {
HXLINE( 263)			HX_STACK_DO_THROW(HX_("[pos] must not be negative",4a,29,00,72));
            		}
HXLINE( 264)		if ((pos > this->len)) {
HXLINE( 264)			HX_STACK_DO_THROW(HX_("[pos] must not be greater than this.length",72,00,e4,81));
            		}
HXLINE( 266)		if ((pos == this->len)) {
HXLINE( 267)			this->addChar(ch);
HXLINE( 268)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 276)		if ((pos == (int)0)) {
HXLINE( 277)			if (hx::IsNull( this->pre )) {
HXLINE( 277)				this->pre = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 278)			::Array< ::String > _hx_tmp = this->pre;
HXDLIN( 278)			_hx_tmp->unshift(::hx::strings::_Char::Char_Impl__obj::toString(ch));
HXLINE( 279)			this->len++;
HXLINE( 280)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 284)		int pre_len = (int)0;
HXLINE( 285)		if (hx::IsNotNull( this->pre )) {
HXLINE( 286)			int i = this->pre->length;
HXLINE( 287)			{
HXLINE( 287)				int _g1 = (int)0;
HXDLIN( 287)				int _g = this->pre->length;
HXDLIN( 287)				while((_g1 < _g)){
HXLINE( 287)					_g1 = (_g1 + (int)1);
HXDLIN( 287)					int i1 = (_g1 - (int)1);
HXLINE( 288)					::String str = this->pre->__get(i1);
HXDLIN( 288)					int next_pre_len;
HXDLIN( 288)					if (hx::IsNull( str )) {
HXLINE( 288)						next_pre_len = (int)0;
            					}
            					else {
HXLINE( 288)						next_pre_len = ::haxe::Utf8_obj::length(str);
            					}
HXDLIN( 288)					int next_pre_len1 = (pre_len + next_pre_len);
HXLINE( 289)					if ((next_pre_len1 == pos)) {
HXLINE( 290)						::Array< ::String > _hx_tmp1 = this->pre;
HXDLIN( 290)						_hx_tmp1->insert((i1 + (int)1),::hx::strings::_Char::Char_Impl__obj::toString(ch));
HXLINE( 291)						this->len++;
HXLINE( 292)						return hx::ObjectPtr<OBJ_>(this);
            					}
HXLINE( 294)					if ((next_pre_len1 > pos)) {
HXLINE( 295)						::Array< ::String > preSplitted = ::hx::strings::Strings_obj::splitAt(this->pre->__get(i1),::Array_obj< int >::__new(1)->init(0,(pos - pre_len)));
HXLINE( 296)						::Array< ::String > _hx_tmp2 = this->pre;
HXDLIN( 296)						_hx_tmp2[i1] = preSplitted->__get((int)0);
HXLINE( 297)						::Array< ::String > _hx_tmp3 = this->pre;
HXDLIN( 297)						_hx_tmp3->insert((i1 + (int)1),::hx::strings::_Char::Char_Impl__obj::toString(ch));
HXLINE( 298)						::Array< ::String > _hx_tmp4 = this->pre;
HXDLIN( 298)						_hx_tmp4->insert((i1 + (int)2),preSplitted->__get((int)1));
HXLINE( 299)						this->len++;
HXLINE( 300)						return hx::ObjectPtr<OBJ_>(this);
            					}
HXLINE( 302)					pre_len = next_pre_len1;
            				}
            			}
            		}
HXLINE( 306)		if ((this->sb->get_length() == (int)0)) {
HXLINE( 307)			this->addChar(ch);
HXLINE( 308)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 311)		::Array< ::String > sbSplitted = ::hx::strings::Strings_obj::splitAt(this->sb->toString(),::Array_obj< int >::__new(1)->init(0,(pos - pre_len)));
HXLINE( 312)		this->sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 313)		{
HXLINE( 313)			 ::StringBuf _this = this->sb;
HXDLIN( 313)			::String x = sbSplitted->__get((int)0);
HXDLIN( 313)			if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 313)				_this->flush();
            			}
HXDLIN( 313)			if (hx::IsNull( _this->b )) {
HXLINE( 313)				_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE( 313)				::Array< ::String > _this1 = _this->b;
HXDLIN( 313)				_this1->push(::Std_obj::string(x));
            			}
            		}
HXLINE( 314)		this->addChar(ch);
HXLINE( 315)		{
HXLINE( 315)			 ::StringBuf _this2 = this->sb;
HXDLIN( 315)			::String x1 = sbSplitted->__get((int)1);
HXDLIN( 315)			if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 315)				_this2->flush();
            			}
HXDLIN( 315)			if (hx::IsNull( _this2->b )) {
HXLINE( 315)				_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 315)				::Array< ::String > _this3 = _this2->b;
HXDLIN( 315)				_this3->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 317)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(StringBuilder_obj,insertChar,return )

 ::hx::strings::StringBuilder StringBuilder_obj::insertAll(int pos,::Array< ::String > items){
            	HX_GC_STACKFRAME(&_hx_pos_b646f356da37ac48_329_insertAll)
HXLINE( 330)		if ((pos < (int)0)) {
HXLINE( 330)			HX_STACK_DO_THROW(HX_("[pos] must not be negative",4a,29,00,72));
            		}
HXLINE( 331)		if ((pos > this->len)) {
HXLINE( 331)			HX_STACK_DO_THROW(HX_("[pos] must not be greater than this.length",72,00,e4,81));
            		}
HXLINE( 333)		if ((pos == this->len)) {
HXLINE( 334)			this->addAll(items);
HXLINE( 335)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 349)		if ((pos == (int)0)) {
HXLINE( 350)			if (hx::IsNull( this->pre )) {
HXLINE( 350)				this->pre = ::Array_obj< ::String >::__new(0);
            			}
HXLINE( 351)			int i = items->length;
HXLINE( 352)			while(true){
HXLINE( 352)				i = (i - (int)1);
HXDLIN( 352)				if (!(((i + (int)1) > (int)0))) {
HXLINE( 352)					goto _hx_goto_14;
            				}
HXLINE( 353)				::String item = items->__get(i);
HXLINE( 354)				this->pre->unshift(item);
HXLINE( 355)				 ::hx::strings::StringBuilder _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 355)				int _hx_tmp1 = _hx_tmp->len;
HXDLIN( 355)				int _hx_tmp2;
HXDLIN( 355)				if (hx::IsNull( item )) {
HXLINE( 355)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE( 355)					_hx_tmp2 = ::haxe::Utf8_obj::length(item);
            				}
HXDLIN( 355)				_hx_tmp->len = (_hx_tmp1 + _hx_tmp2);
            			}
            			_hx_goto_14:;
HXLINE( 357)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 361)		int pre_len = (int)0;
HXLINE( 362)		if (hx::IsNotNull( this->pre )) {
HXLINE( 363)			int i1 = this->pre->length;
HXLINE( 364)			{
HXLINE( 364)				int _g1 = (int)0;
HXDLIN( 364)				int _g = this->pre->length;
HXDLIN( 364)				while((_g1 < _g)){
HXLINE( 364)					_g1 = (_g1 + (int)1);
HXDLIN( 364)					int i2 = (_g1 - (int)1);
HXLINE( 365)					::String str = this->pre->__get(i2);
HXDLIN( 365)					int next_pre_len;
HXDLIN( 365)					if (hx::IsNull( str )) {
HXLINE( 365)						next_pre_len = (int)0;
            					}
            					else {
HXLINE( 365)						next_pre_len = ::haxe::Utf8_obj::length(str);
            					}
HXDLIN( 365)					int next_pre_len1 = (pre_len + next_pre_len);
HXLINE( 366)					if ((next_pre_len1 == pos)) {
HXLINE( 367)						int j = items->length;
HXLINE( 368)						while(true){
HXLINE( 368)							j = (j - (int)1);
HXDLIN( 368)							if (!(((j + (int)1) > (int)0))) {
HXLINE( 368)								goto _hx_goto_16;
            							}
HXLINE( 369)							::String item1 = items->__get(j);
HXLINE( 370)							::Array< ::String > _hx_tmp3 = this->pre;
HXDLIN( 370)							_hx_tmp3->insert((i2 + (int)1),item1);
HXLINE( 371)							 ::hx::strings::StringBuilder _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 371)							int _hx_tmp5 = _hx_tmp4->len;
HXDLIN( 371)							int _hx_tmp6;
HXDLIN( 371)							if (hx::IsNull( item1 )) {
HXLINE( 371)								_hx_tmp6 = (int)0;
            							}
            							else {
HXLINE( 371)								_hx_tmp6 = ::haxe::Utf8_obj::length(item1);
            							}
HXDLIN( 371)							_hx_tmp4->len = (_hx_tmp5 + _hx_tmp6);
            						}
            						_hx_goto_16:;
HXLINE( 373)						return hx::ObjectPtr<OBJ_>(this);
            					}
HXLINE( 375)					if ((next_pre_len1 > pos)) {
HXLINE( 376)						::Array< ::String > preSplitted = ::hx::strings::Strings_obj::splitAt(this->pre->__get(i2),::Array_obj< int >::__new(1)->init(0,(pos - pre_len)));
HXLINE( 377)						::Array< ::String > _hx_tmp7 = this->pre;
HXDLIN( 377)						_hx_tmp7[i2] = preSplitted->__get((int)0);
HXLINE( 378)						::Array< ::String > _hx_tmp8 = this->pre;
HXDLIN( 378)						_hx_tmp8->insert((i2 + (int)1),preSplitted->__get((int)1));
HXLINE( 379)						int j1 = items->length;
HXLINE( 380)						while(true){
HXLINE( 380)							j1 = (j1 - (int)1);
HXDLIN( 380)							if (!(((j1 + (int)1) > (int)0))) {
HXLINE( 380)								goto _hx_goto_17;
            							}
HXLINE( 381)							::String item2 = items->__get(j1);
HXLINE( 382)							::Array< ::String > _hx_tmp9 = this->pre;
HXDLIN( 382)							_hx_tmp9->insert((i2 + (int)1),item2);
HXLINE( 383)							 ::hx::strings::StringBuilder _hx_tmp10 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 383)							int _hx_tmp11 = _hx_tmp10->len;
HXDLIN( 383)							int _hx_tmp12;
HXDLIN( 383)							if (hx::IsNull( item2 )) {
HXLINE( 383)								_hx_tmp12 = (int)0;
            							}
            							else {
HXLINE( 383)								_hx_tmp12 = ::haxe::Utf8_obj::length(item2);
            							}
HXDLIN( 383)							_hx_tmp10->len = (_hx_tmp11 + _hx_tmp12);
            						}
            						_hx_goto_17:;
HXLINE( 385)						return hx::ObjectPtr<OBJ_>(this);
            					}
HXLINE( 387)					pre_len = next_pre_len1;
            				}
            			}
            		}
HXLINE( 391)		if ((this->sb->get_length() == (int)0)) {
HXLINE( 392)			{
HXLINE( 392)				int _g2 = (int)0;
HXDLIN( 392)				while((_g2 < items->length)){
HXLINE( 392)					::String item3 = items->__get(_g2);
HXDLIN( 392)					_g2 = (_g2 + (int)1);
HXLINE( 393)					{
HXLINE( 393)						{
HXLINE( 393)							 ::StringBuf _this = this->sb;
HXDLIN( 393)							if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 393)								_this->flush();
            							}
HXDLIN( 393)							if (hx::IsNull( _this->b )) {
HXLINE( 393)								_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item3));
            							}
            							else {
HXLINE( 393)								::Array< ::String > _this1 = _this->b;
HXDLIN( 393)								_this1->push(::Std_obj::string(item3));
            							}
            						}
HXDLIN( 393)						 ::hx::strings::StringBuilder _hx_tmp13 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 393)						int _hx_tmp14 = _hx_tmp13->len;
HXDLIN( 393)						int _hx_tmp15;
HXDLIN( 393)						if (hx::IsNull( item3 )) {
HXLINE( 393)							_hx_tmp15 = (int)0;
            						}
            						else {
HXLINE( 393)							_hx_tmp15 = ::haxe::Utf8_obj::length(item3);
            						}
HXDLIN( 393)						_hx_tmp13->len = (_hx_tmp14 + _hx_tmp15);
            					}
            				}
            			}
HXLINE( 394)			return hx::ObjectPtr<OBJ_>(this);
            		}
HXLINE( 397)		::Array< ::String > sbSplitted = ::hx::strings::Strings_obj::splitAt(this->sb->toString(),::Array_obj< int >::__new(1)->init(0,(pos - pre_len)));
HXLINE( 398)		this->sb =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 399)		{
HXLINE( 399)			 ::StringBuf _this2 = this->sb;
HXDLIN( 399)			::String x = sbSplitted->__get((int)0);
HXDLIN( 399)			if (hx::IsNotNull( _this2->charBuf )) {
HXLINE( 399)				_this2->flush();
            			}
HXDLIN( 399)			if (hx::IsNull( _this2->b )) {
HXLINE( 399)				_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            			}
            			else {
HXLINE( 399)				::Array< ::String > _this3 = _this2->b;
HXDLIN( 399)				_this3->push(::Std_obj::string(x));
            			}
            		}
HXLINE( 400)		{
HXLINE( 400)			int _g3 = (int)0;
HXDLIN( 400)			while((_g3 < items->length)){
HXLINE( 400)				::String item4 = items->__get(_g3);
HXDLIN( 400)				_g3 = (_g3 + (int)1);
HXLINE( 401)				{
HXLINE( 401)					 ::StringBuf _this4 = this->sb;
HXDLIN( 401)					if (hx::IsNotNull( _this4->charBuf )) {
HXLINE( 401)						_this4->flush();
            					}
HXDLIN( 401)					if (hx::IsNull( _this4->b )) {
HXLINE( 401)						_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item4));
            					}
            					else {
HXLINE( 401)						::Array< ::String > _this5 = _this4->b;
HXDLIN( 401)						_this5->push(::Std_obj::string(item4));
            					}
            				}
HXLINE( 402)				 ::hx::strings::StringBuilder _hx_tmp16 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 402)				int _hx_tmp17 = _hx_tmp16->len;
HXDLIN( 402)				int _hx_tmp18;
HXDLIN( 402)				if (hx::IsNull( item4 )) {
HXLINE( 402)					_hx_tmp18 = (int)0;
            				}
            				else {
HXLINE( 402)					_hx_tmp18 = ::haxe::Utf8_obj::length(item4);
            				}
HXDLIN( 402)				_hx_tmp16->len = (_hx_tmp17 + _hx_tmp18);
            			}
            		}
HXLINE( 404)		{
HXLINE( 404)			 ::StringBuf _this6 = this->sb;
HXDLIN( 404)			::String x1 = sbSplitted->__get((int)1);
HXDLIN( 404)			if (hx::IsNotNull( _this6->charBuf )) {
HXLINE( 404)				_this6->flush();
            			}
HXDLIN( 404)			if (hx::IsNull( _this6->b )) {
HXLINE( 404)				_this6->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            			}
            			else {
HXLINE( 404)				::Array< ::String > _this7 = _this6->b;
HXDLIN( 404)				_this7->push(::Std_obj::string(x1));
            			}
            		}
HXLINE( 406)		return hx::ObjectPtr<OBJ_>(this);
            	}


HX_DEFINE_DYNAMIC_FUNC2(StringBuilder_obj,insertAll,return )

 ::haxe::io::Output StringBuilder_obj::asOutput(){
            	HX_GC_STACKFRAME(&_hx_pos_b646f356da37ac48_417_asOutput)
HXDLIN( 417)		return  ::hx::strings::_StringBuilder::OutputWrapper_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuilder_obj,asOutput,return )

::String StringBuilder_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_b646f356da37ac48_431_toString)
HXLINE( 435)		if (hx::IsNull( this->pre )) {
HXLINE( 436)			return this->sb->toString();
            		}
HXLINE( 437)		::String str = this->pre->join(HX_("",00,00,00,00));
HXDLIN( 437)		::String str1 = (str + this->sb->toString());
HXLINE( 438)		this->clear();
HXLINE( 439)		{
HXLINE( 439)			{
HXLINE( 439)				 ::StringBuf _this = this->sb;
HXDLIN( 439)				if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 439)					_this->flush();
            				}
HXDLIN( 439)				if (hx::IsNull( _this->b )) {
HXLINE( 439)					_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(str1));
            				}
            				else {
HXLINE( 439)					::Array< ::String > _this1 = _this->b;
HXDLIN( 439)					_this1->push(::Std_obj::string(str1));
            				}
            			}
HXDLIN( 439)			 ::hx::strings::StringBuilder _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 439)			int _hx_tmp1 = _hx_tmp->len;
HXDLIN( 439)			int _hx_tmp2;
HXDLIN( 439)			if (hx::IsNull( str1 )) {
HXLINE( 439)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE( 439)				_hx_tmp2 = ::haxe::Utf8_obj::length(str1);
            			}
HXDLIN( 439)			_hx_tmp->len = (_hx_tmp1 + _hx_tmp2);
            		}
HXLINE( 440)		return str1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringBuilder_obj,toString,return )


hx::ObjectPtr< StringBuilder_obj > StringBuilder_obj::__new(::String initialContent) {
	hx::ObjectPtr< StringBuilder_obj > __this = new StringBuilder_obj();
	__this->__construct(initialContent);
	return __this;
}

hx::ObjectPtr< StringBuilder_obj > StringBuilder_obj::__alloc(hx::Ctx *_hx_ctx,::String initialContent) {
	StringBuilder_obj *__this = (StringBuilder_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StringBuilder_obj), true, "hx.strings.StringBuilder"));
	*(void **)__this = StringBuilder_obj::_hx_vtable;
	__this->__construct(initialContent);
	return __this;
}

StringBuilder_obj::StringBuilder_obj()
{
}

void StringBuilder_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringBuilder);
	HX_MARK_MEMBER_NAME(sb,"sb");
	HX_MARK_MEMBER_NAME(pre,"pre");
	HX_MARK_MEMBER_NAME(len,"len");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void StringBuilder_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(sb,"sb");
	HX_VISIT_MEMBER_NAME(pre,"pre");
	HX_VISIT_MEMBER_NAME(len,"len");
	HX_VISIT_MEMBER_NAME(length,"length");
}

hx::Val StringBuilder_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sb") ) { return hx::Val( sb ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pre") ) { return hx::Val( pre ); }
		if (HX_FIELD_EQ(inName,"len") ) { return hx::Val( len ); }
		if (HX_FIELD_EQ(inName,"add") ) { return hx::Val( add_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"addAll") ) { return hx::Val( addAll_dyn() ); }
		if (HX_FIELD_EQ(inName,"insert") ) { return hx::Val( insert_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addChar") ) { return hx::Val( addChar_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return hx::Val( isEmpty_dyn() ); }
		if (HX_FIELD_EQ(inName,"newLine") ) { return hx::Val( newLine_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"asOutput") ) { return hx::Val( asOutput_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return hx::Val( toString_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"insertAll") ) { return hx::Val( insertAll_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"insertChar") ) { return hx::Val( insertChar_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val StringBuilder_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sb") ) { sb=inValue.Cast<  ::StringBuf >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pre") ) { pre=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"len") ) { len=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringBuilder_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("sb","\x8f","\x64","\x00","\x00"));
	outFields->push(HX_HCSTRING("pre","\x23","\x60","\x55","\x00"));
	outFields->push(HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"));
	outFields->push(HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo StringBuilder_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::StringBuf*/ ,(int)offsetof(StringBuilder_obj,sb),HX_HCSTRING("sb","\x8f","\x64","\x00","\x00")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(StringBuilder_obj,pre),HX_HCSTRING("pre","\x23","\x60","\x55","\x00")},
	{hx::fsInt,(int)offsetof(StringBuilder_obj,len),HX_HCSTRING("len","\xd5","\x4b","\x52","\x00")},
	{hx::fsInt,(int)offsetof(StringBuilder_obj,length),HX_HCSTRING("length","\xe6","\x94","\x07","\x9f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *StringBuilder_obj_sStaticStorageInfo = 0;
#endif

static ::String StringBuilder_obj_sMemberFields[] = {
	HX_HCSTRING("sb","\x8f","\x64","\x00","\x00"),
	HX_HCSTRING("pre","\x23","\x60","\x55","\x00"),
	HX_HCSTRING("len","\xd5","\x4b","\x52","\x00"),
	HX_HCSTRING("length","\xe6","\x94","\x07","\x9f"),
	HX_HCSTRING("get_length","\xaf","\x04","\x8f","\x8f"),
	HX_HCSTRING("add","\x21","\xf2","\x49","\x00"),
	HX_HCSTRING("addChar","\x97","\xa1","\xfc","\x7d"),
	HX_HCSTRING("addAll","\x80","\x09","\xfb","\x9e"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("newLine","\x74","\xc4","\x7f","\xf7"),
	HX_HCSTRING("insert","\x39","\x43","\xdd","\x9d"),
	HX_HCSTRING("insertChar","\xaf","\x5e","\xaa","\x27"),
	HX_HCSTRING("insertAll","\x68","\x77","\x6d","\x19"),
	HX_HCSTRING("asOutput","\x93","\x19","\x57","\x9b"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null()) };

static void StringBuilder_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StringBuilder_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StringBuilder_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StringBuilder_obj::__mClass,"__mClass");
};

#endif

hx::Class StringBuilder_obj::__mClass;

void StringBuilder_obj::__register()
{
	hx::Object *dummy = new StringBuilder_obj;
	StringBuilder_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings.StringBuilder","\x60","\x03","\x27","\xb6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = StringBuilder_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StringBuilder_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StringBuilder_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StringBuilder_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringBuilder_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringBuilder_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace strings
