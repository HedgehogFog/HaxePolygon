// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_crypto_Adler32
#include <haxe/crypto/Adler32.h>
#endif
#ifndef INCLUDED_haxe_crypto_Base64
#include <haxe/crypto/Base64.h>
#endif
#ifndef INCLUDED_haxe_crypto_Crc32
#include <haxe/crypto/Crc32.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_hx_strings_AnsiState
#include <hx/strings/AnsiState.h>
#endif
#ifndef INCLUDED_hx_strings_AnsiToHtmlRenderMethod
#include <hx/strings/AnsiToHtmlRenderMethod.h>
#endif
#ifndef INCLUDED_hx_strings_CharIterator
#include <hx/strings/CharIterator.h>
#endif
#ifndef INCLUDED_hx_strings_HashCodeAlgorithm
#include <hx/strings/HashCodeAlgorithm.h>
#endif
#ifndef INCLUDED_hx_strings_Matcher
#include <hx/strings/Matcher.h>
#endif
#ifndef INCLUDED_hx_strings_Pattern
#include <hx/strings/Pattern.h>
#endif
#ifndef INCLUDED_hx_strings_StringBuilder
#include <hx/strings/StringBuilder.h>
#endif
#ifndef INCLUDED_hx_strings_StringDiff
#include <hx/strings/StringDiff.h>
#endif
#ifndef INCLUDED_hx_strings_Strings
#include <hx/strings/Strings.h>
#endif
#ifndef INCLUDED_hx_strings__Char_CharCaseMapper
#include <hx/strings/_Char/CharCaseMapper.h>
#endif
#ifndef INCLUDED_hx_strings__Char_Char_Impl_
#include <hx/strings/_Char/Char_Impl_.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_NullCharIterator
#include <hx/strings/_CharIterator/NullCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_StringCharIterator
#include <hx/strings/_CharIterator/StringCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__Pattern_MatcherImpl
#include <hx/strings/_Pattern/MatcherImpl.h>
#endif
#ifndef INCLUDED_hx_strings_internal_OS
#include <hx/strings/internal/OS.h>
#endif
#ifndef INCLUDED_hx_strings_internal__Either2__Either2
#include <hx/strings/internal/_Either2/_Either2.h>
#endif
#ifndef INCLUDED_hx_strings_internal__Either3__Either3
#include <hx/strings/internal/_Either3/_Either3.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_58__getNotFoundDefault,"hx.strings.Strings","_getNotFoundDefault",0x4c2a6c25,"hx.strings.Strings._getNotFoundDefault","hx/strings/Strings.hx",58,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_75__charCodeAt8Unsafe,"hx.strings.Strings","_charCodeAt8Unsafe",0x18a2969f,"hx.strings.Strings._charCodeAt8Unsafe","hx/strings/Strings.hx",75,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_82__splitAsciiWordsUnsafe,"hx.strings.Strings","_splitAsciiWordsUnsafe",0xd72f4d6f,"hx.strings.Strings._splitAsciiWordsUnsafe","hx/strings/Strings.hx",82,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_157_ansiToHtml,"hx.strings.Strings","ansiToHtml",0xa753ed3f,"hx.strings.Strings.ansiToHtml","hx/strings/Strings.hx",157,0x74f74a28)
static const ::String _hx_array_data_5da8f718_7[] = {
	HX_("\">",dc,1d,00,00),
};
static const ::String _hx_array_data_5da8f718_8[] = {
	HX_("</span>",e1,60,34,0b),
};
static const ::String _hx_array_data_5da8f718_9[] = {
	HX_("\">",dc,1d,00,00),
};
static const ::String _hx_array_data_5da8f718_10[] = {
	HX_("[",5b,00,00,00),
};
static const ::String _hx_array_data_5da8f718_11[] = {
	HX_("</span>",e1,60,34,0b),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_247_appendIfMissing,"hx.strings.Strings","appendIfMissing",0x01226e79,"hx.strings.Strings.appendIfMissing","hx/strings/Strings.hx",247,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_269_base64Encode,"hx.strings.Strings","base64Encode",0x8958801b,"hx.strings.Strings.base64Encode","hx/strings/Strings.hx",269,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_293_base64Decode,"hx.strings.Strings","base64Decode",0xf461eb33,"hx.strings.Strings.base64Decode","hx/strings/Strings.hx",293,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_328_charAt8,"hx.strings.Strings","charAt8",0x0eff1359,"hx.strings.Strings.charAt8","hx/strings/Strings.hx",328,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_365_charCodeAt8,"hx.strings.Strings","charCodeAt8",0xc2261e2c,"hx.strings.Strings.charCodeAt8","hx/strings/Strings.hx",365,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_384_compact,"hx.strings.Strings","compact",0xc3135c4d,"hx.strings.Strings.compact","hx/strings/Strings.hx",384,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_421_contains,"hx.strings.Strings","contains",0xa1d79e35,"hx.strings.Strings.contains","hx/strings/Strings.hx",421,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_445_containsOnly,"hx.strings.Strings","containsOnly",0xe1c70e41,"hx.strings.Strings.containsOnly","hx/strings/Strings.hx",445,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_481_containsAll,"hx.strings.Strings","containsAll",0x717921ec,"hx.strings.Strings.containsAll","hx/strings/Strings.hx",481,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_509_containsAllIgnoreCase,"hx.strings.Strings","containsAllIgnoreCase",0x142b39ee,"hx.strings.Strings.containsAllIgnoreCase","hx/strings/Strings.hx",509,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_540_containsAny,"hx.strings.Strings","containsAny",0x717923b7,"hx.strings.Strings.containsAny","hx/strings/Strings.hx",540,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_568_containsAnyIgnoreCase,"hx.strings.Strings","containsAnyIgnoreCase",0x22f58779,"hx.strings.Strings.containsAnyIgnoreCase","hx/strings/Strings.hx",568,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_600_containsNone,"hx.strings.Strings","containsNone",0xe11e9b8d,"hx.strings.Strings.containsNone","hx/strings/Strings.hx",600,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_622_containsNoneIgnoreCase,"hx.strings.Strings","containsNoneIgnoreCase",0x90a366cf,"hx.strings.Strings.containsNoneIgnoreCase","hx/strings/Strings.hx",622,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_638_containsWhitespaces,"hx.strings.Strings","containsWhitespaces",0x4bd63c21,"hx.strings.Strings.containsWhitespaces","hx/strings/Strings.hx",638,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_666_countMatches,"hx.strings.Strings","countMatches",0x5283eefa,"hx.strings.Strings.countMatches","hx/strings/Strings.hx",666,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_697_countMatchesIgnoreCase,"hx.strings.Strings","countMatchesIgnoreCase",0x8dc2247c,"hx.strings.Strings.countMatchesIgnoreCase","hx/strings/Strings.hx",697,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_734_compare,"hx.strings.Strings","compare",0xc313694f,"hx.strings.Strings.compare","hx/strings/Strings.hx",734,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_771_compareIgnoreCase,"hx.strings.Strings","compareIgnoreCase",0xb007bb11,"hx.strings.Strings.compareIgnoreCase","hx/strings/Strings.hx",771,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_805_diff,"hx.strings.Strings","diff",0x9ee05d1b,"hx.strings.Strings.diff","hx/strings/Strings.hx",805,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_830_diffAt,"hx.strings.Strings","diffAt",0x5d8652ee,"hx.strings.Strings.diffAt","hx/strings/Strings.hx",830,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_863_ellipsizeLeft,"hx.strings.Strings","ellipsizeLeft",0x56bc12de,"hx.strings.Strings.ellipsizeLeft","hx/strings/Strings.hx",863,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_887_ellipsizeMiddle,"hx.strings.Strings","ellipsizeMiddle",0x3ea481ec,"hx.strings.Strings.ellipsizeMiddle","hx/strings/Strings.hx",887,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_916_ellipsizeRight,"hx.strings.Strings","ellipsizeRight",0x04e17d25,"hx.strings.Strings.ellipsizeRight","hx/strings/Strings.hx",916,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_939_endsWith,"hx.strings.Strings","endsWith",0x5112be74,"hx.strings.Strings.endsWith","hx/strings/Strings.hx",939,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_960_endsWithAny,"hx.strings.Strings","endsWithAny",0x099674d8,"hx.strings.Strings.endsWithAny","hx/strings/Strings.hx",960,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_985_endsWithAnyIgnoreCase,"hx.strings.Strings","endsWithAnyIgnoreCase",0xddedebda,"hx.strings.Strings.endsWithAnyIgnoreCase","hx/strings/Strings.hx",985,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1010_endsWithIgnoreCase,"hx.strings.Strings","endsWithIgnoreCase",0xcc88d076,"hx.strings.Strings.endsWithIgnoreCase","hx/strings/Strings.hx",1010,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1034_equals,"hx.strings.Strings","equals",0x68fce0d5,"hx.strings.Strings.equals","hx/strings/Strings.hx",1034,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1054_equalsIgnoreCase,"hx.strings.Strings","equalsIgnoreCase",0x0b781617,"hx.strings.Strings.equalsIgnoreCase","hx/strings/Strings.hx",1054,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1069_filter,"hx.strings.Strings","filter",0x2e3f124e,"hx.strings.Strings.filter","hx/strings/Strings.hx",1069,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1091_filterChars,"hx.strings.Strings","filterChars",0x4296dfaf,"hx.strings.Strings.filterChars","hx/strings/Strings.hx",1091,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1087_filterChars,"hx.strings.Strings","filterChars",0x4296dfaf,"hx.strings.Strings.filterChars","hx/strings/Strings.hx",1087,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1115_getFuzzyDistance,"hx.strings.Strings","getFuzzyDistance",0xba913cbf,"hx.strings.Strings.getFuzzyDistance","hx/strings/Strings.hx",1115,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1198_getLevenshteinDistance,"hx.strings.Strings","getLevenshteinDistance",0xa874e4a6,"hx.strings.Strings.getLevenshteinDistance","hx/strings/Strings.hx",1198,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1170_getLevenshteinDistance,"hx.strings.Strings","getLevenshteinDistance",0xa874e4a6,"hx.strings.Strings.getLevenshteinDistance","hx/strings/Strings.hx",1170,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1233_getLongestCommonSubstring,"hx.strings.Strings","getLongestCommonSubstring",0xdc9a6adc,"hx.strings.Strings.getLongestCommonSubstring","hx/strings/Strings.hx",1233,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1280_hashCode,"hx.strings.Strings","hashCode",0x7cd15031,"hx.strings.Strings.hashCode","hx/strings/Strings.hx",1280,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1347_htmlDecode,"hx.strings.Strings","htmlDecode",0xeab4be8f,"hx.strings.Strings.htmlDecode","hx/strings/Strings.hx",1347,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1343_htmlDecode,"hx.strings.Strings","htmlDecode",0xeab4be8f,"hx.strings.Strings.htmlDecode","hx/strings/Strings.hx",1343,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1379_htmlEncode,"hx.strings.Strings","htmlEncode",0x7fab5377,"hx.strings.Strings.htmlEncode","hx/strings/Strings.hx",1379,0x74f74a28)
static const ::String _hx_array_data_5da8f718_78[] = {
	HX_(" ",20,00,00,00),
};
static const ::String _hx_array_data_5da8f718_79[] = {
	HX_("&nbsp;",64,13,c2,c8),
};
static const ::String _hx_array_data_5da8f718_80[] = {
	HX_("&amp;",dd,d4,aa,21),
};
static const ::String _hx_array_data_5da8f718_81[] = {
	HX_("&lt;",4d,74,70,19),
};
static const ::String _hx_array_data_5da8f718_82[] = {
	HX_("&gt;",08,a9,6c,19),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1444_insertAt,"hx.strings.Strings","insertAt",0x377bc0a2,"hx.strings.Strings.insertAt","hx/strings/Strings.hx",1444,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1478_ifBlank,"hx.strings.Strings","ifBlank",0x5e7e22e1,"hx.strings.Strings.ifBlank","hx/strings/Strings.hx",1478,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1499_ifEmpty,"hx.strings.Strings","ifEmpty",0x19667e1a,"hx.strings.Strings.ifEmpty","hx/strings/Strings.hx",1499,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1517_ifNull,"hx.strings.Strings","ifNull",0x9349cb9a,"hx.strings.Strings.ifNull","hx/strings/Strings.hx",1517,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1534_indentLines,"hx.strings.Strings","indentLines",0x076ca79d,"hx.strings.Strings.indentLines","hx/strings/Strings.hx",1534,0x74f74a28)
static const ::String _hx_array_data_5da8f718_89[] = {
	HX_("\n",0a,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1599_indexOf8,"hx.strings.Strings","indexOf8",0x3bfcab65,"hx.strings.Strings.indexOf8","hx/strings/Strings.hx",1599,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1679_isBlank,"hx.strings.Strings","isBlank",0x9121d3b4,"hx.strings.Strings.isBlank","hx/strings/Strings.hx",1679,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1696_isDigits,"hx.strings.Strings","isDigits",0x82ede9c6,"hx.strings.Strings.isDigits","hx/strings/Strings.hx",1696,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1729_isEmpty,"hx.strings.Strings","isEmpty",0x4c0a2eed,"hx.strings.Strings.isEmpty","hx/strings/Strings.hx",1729,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1746_isNotBlank,"hx.strings.Strings","isNotBlank",0x77b5b8e1,"hx.strings.Strings.isNotBlank","hx/strings/Strings.hx",1746,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1763_isNotEmpty,"hx.strings.Strings","isNotEmpty",0x329e141a,"hx.strings.Strings.isNotEmpty","hx/strings/Strings.hx",1763,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1776_isLowerCase,"hx.strings.Strings","isLowerCase",0x7d307db1,"hx.strings.Strings.isLowerCase","hx/strings/Strings.hx",1776,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1793_isUpperCase,"hx.strings.Strings","isUpperCase",0xfdc96192,"hx.strings.Strings.isUpperCase","hx/strings/Strings.hx",1793,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1803_iterate,"hx.strings.Strings","iterate",0x227acaa4,"hx.strings.Strings.iterate","hx/strings/Strings.hx",1803,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1815_iterateChars,"hx.strings.Strings","iterateChars",0x25912f99,"hx.strings.Strings.iterateChars","hx/strings/Strings.hx",1815,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1872_lastIndexOf8,"hx.strings.Strings","lastIndexOf8",0x65d17adb,"hx.strings.Strings.lastIndexOf8","hx/strings/Strings.hx",1872,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1948_length8,"hx.strings.Strings","length8",0xc745053c,"hx.strings.Strings.length8","hx/strings/Strings.hx",1948,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_1980_left,"hx.strings.Strings","left",0xa427091d,"hx.strings.Strings.left","hx/strings/Strings.hx",1980,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2006_lpad,"hx.strings.Strings","lpad",0xa42f5d7d,"hx.strings.Strings.lpad","hx/strings/Strings.hx",2006,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2039_map,"hx.strings.Strings","map",0x3b493e46,"hx.strings.Strings.map","hx/strings/Strings.hx",2039,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2061_prependIfMissing,"hx.strings.Strings","prependIfMissing",0xa0acb231,"hx.strings.Strings.prependIfMissing","hx/strings/Strings.hx",2061,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2086_quoteDouble,"hx.strings.Strings","quoteDouble",0x4246c517,"hx.strings.Strings.quoteDouble","hx/strings/Strings.hx",2086,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2111_quoteSingle,"hx.strings.Strings","quoteSingle",0xc89d008e,"hx.strings.Strings.quoteSingle","hx/strings/Strings.hx",2111,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2129_removeAfter,"hx.strings.Strings","removeAfter",0x690730e2,"hx.strings.Strings.removeAfter","hx/strings/Strings.hx",2129,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2137_removeAfterLast,"hx.strings.Strings","removeAfterLast",0x87748058,"hx.strings.Strings.removeAfterLast","hx/strings/Strings.hx",2137,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2145_removeAfterIgnoreCase,"hx.strings.Strings","removeAfterIgnoreCase",0x48d1d864,"hx.strings.Strings.removeAfterIgnoreCase","hx/strings/Strings.hx",2145,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2153_removeAfterLastIgnoreCase,"hx.strings.Strings","removeAfterLastIgnoreCase",0x9b1d575a,"hx.strings.Strings.removeAfterLastIgnoreCase","hx/strings/Strings.hx",2153,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2176_removeAt,"hx.strings.Strings","removeAt",0x2277b26d,"hx.strings.Strings.removeAt","hx/strings/Strings.hx",2176,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2197_removeBefore,"hx.strings.Strings","removeBefore",0x46fef6f9,"hx.strings.Strings.removeBefore","hx/strings/Strings.hx",2197,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2205_removeBeforeLast,"hx.strings.Strings","removeBeforeLast",0xc1fe9def,"hx.strings.Strings.removeBeforeLast","hx/strings/Strings.hx",2205,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2213_removeBeforeIgnoreCase,"hx.strings.Strings","removeBeforeIgnoreCase",0x7c78c13b,"hx.strings.Strings.removeBeforeIgnoreCase","hx/strings/Strings.hx",2213,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2221_removeBeforeLastIgnoreCase,"hx.strings.Strings","removeBeforeLastIgnoreCase",0x5b7ef7b1,"hx.strings.Strings.removeBeforeLastIgnoreCase","hx/strings/Strings.hx",2221,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2238_removeAll,"hx.strings.Strings","removeAll",0x06446667,"hx.strings.Strings.removeAll","hx/strings/Strings.hx",2238,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2256_removeFirst,"hx.strings.Strings","removeFirst",0x4c0242f6,"hx.strings.Strings.removeFirst","hx/strings/Strings.hx",2256,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2274_removeFirstIgnoreCase,"hx.strings.Strings","removeFirstIgnoreCase",0x8877cb78,"hx.strings.Strings.removeFirstIgnoreCase","hx/strings/Strings.hx",2274,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2285_removeAnsi,"hx.strings.Strings","removeAnsi",0x7596bebd,"hx.strings.Strings.removeAnsi","hx/strings/Strings.hx",2285,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2308_removeLeading,"hx.strings.Strings","removeLeading",0x8fa2bb0c,"hx.strings.Strings.removeLeading","hx/strings/Strings.hx",2308,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2333_removeTags,"hx.strings.Strings","removeTags",0x821be4d3,"hx.strings.Strings.removeTags","hx/strings/Strings.hx",2333,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2364_removeTrailing,"hx.strings.Strings","removeTrailing",0xe7e44dd6,"hx.strings.Strings.removeTrailing","hx/strings/Strings.hx",2364,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2390_repeat,"hx.strings.Strings","repeat",0xaf8689f1,"hx.strings.Strings.repeat","hx/strings/Strings.hx",2390,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2417_replaceAll,"hx.strings.Strings","replaceAll",0x2fcb76e3,"hx.strings.Strings.replaceAll","hx/strings/Strings.hx",2417,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2440_replaceFirst,"hx.strings.Strings","replaceFirst",0x31cb6a72,"hx.strings.Strings.replaceFirst","hx/strings/Strings.hx",2440,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2472_replaceFirstIgnoreCase,"hx.strings.Strings","replaceFirstIgnoreCase",0x3193a5f4,"hx.strings.Strings.replaceFirstIgnoreCase","hx/strings/Strings.hx",2472,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2501_reverse,"hx.strings.Strings","reverse",0x5aa689cc,"hx.strings.Strings.reverse","hx/strings/Strings.hx",2501,0x74f74a28)
static const ::String _hx_array_data_5da8f718_139[] = {
	HX_("",00,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2523_right,"hx.strings.Strings","right",0x750dfe06,"hx.strings.Strings.right","hx/strings/Strings.hx",2523,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2549_rpad,"hx.strings.Strings","rpad",0xa826a537,"hx.strings.Strings.rpad","hx/strings/Strings.hx",2549,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2604_split8,"hx.strings.Strings","split8",0x68a886b4,"hx.strings.Strings.split8","hx/strings/Strings.hx",2604,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2595_split8,"hx.strings.Strings","split8",0x68a886b4,"hx.strings.Strings.split8","hx/strings/Strings.hx",2595,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2691_splitAt,"hx.strings.Strings","splitAt",0x2acd5f17,"hx.strings.Strings.splitAt","hx/strings/Strings.hx",2691,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2668_splitAt,"hx.strings.Strings","splitAt",0x2acd5f17,"hx.strings.Strings.splitAt","hx/strings/Strings.hx",2668,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2720_splitEvery,"hx.strings.Strings","splitEvery",0xfd05aff7,"hx.strings.Strings.splitEvery","hx/strings/Strings.hx",2720,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2755_splitLines,"hx.strings.Strings","splitLines",0xfc42c25b,"hx.strings.Strings.splitLines","hx/strings/Strings.hx",2755,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2772_startsWith,"hx.strings.Strings","startsWith",0xb1d5b60d,"hx.strings.Strings.startsWith","hx/strings/Strings.hx",2772,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2796_startsWithAny,"hx.strings.Strings","startsWithAny",0xb6e982df,"hx.strings.Strings.startsWithAny","hx/strings/Strings.hx",2796,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2822_startsWithAnyIgnoreCase,"hx.strings.Strings","startsWithAnyIgnoreCase",0x40f368a1,"hx.strings.Strings.startsWithAnyIgnoreCase","hx/strings/Strings.hx",2822,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2844_startsWithIgnoreCase,"hx.strings.Strings","startsWithIgnoreCase",0x1234a14f,"hx.strings.Strings.startsWithIgnoreCase","hx/strings/Strings.hx",2844,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2875_substr8,"hx.strings.Strings","substr8",0x6f30ac91,"hx.strings.Strings.substr8","hx/strings/Strings.hx",2875,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2937_substring8,"hx.strings.Strings","substring8",0x60120a5d,"hx.strings.Strings.substring8","hx/strings/Strings.hx",2937,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_2979_substringAfter,"hx.strings.Strings","substringAfter",0xd18256a1,"hx.strings.Strings.substringAfter","hx/strings/Strings.hx",2979,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3006_substringAfterIgnoreCase,"hx.strings.Strings","substringAfterIgnoreCase",0x847f42e3,"hx.strings.Strings.substringAfterIgnoreCase","hx/strings/Strings.hx",3006,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3038_substringBetween,"hx.strings.Strings","substringBetween",0xc6d46d8d,"hx.strings.Strings.substringBetween","hx/strings/Strings.hx",3038,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3074_substringBetweenIgnoreCase,"hx.strings.Strings","substringBetweenIgnoreCase",0xfe93b8cf,"hx.strings.Strings.substringBetweenIgnoreCase","hx/strings/Strings.hx",3074,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3111_substringAfterLast,"hx.strings.Strings","substringAfterLast",0x166ef197,"hx.strings.Strings.substringAfterLast","hx/strings/Strings.hx",3111,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3139_substringAfterLastIgnoreCase,"hx.strings.Strings","substringAfterLastIgnoreCase",0x4aab6d59,"hx.strings.Strings.substringAfterLastIgnoreCase","hx/strings/Strings.hx",3139,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3168_substringBefore,"hx.strings.Strings","substringBefore",0x4a44d85a,"hx.strings.Strings.substringBefore","hx/strings/Strings.hx",3168,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3196_substringBeforeIgnoreCase,"hx.strings.Strings","substringBeforeIgnoreCase",0x788885dc,"hx.strings.Strings.substringBeforeIgnoreCase","hx/strings/Strings.hx",3196,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3227_substringBeforeLast,"hx.strings.Strings","substringBeforeLast",0x4e2743d0,"hx.strings.Strings.substringBeforeLast","hx/strings/Strings.hx",3227,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3255_substringBeforeLastIgnoreCase,"hx.strings.Strings","substringBeforeLastIgnoreCase",0x484420d2,"hx.strings.Strings.substringBeforeLastIgnoreCase","hx/strings/Strings.hx",3255,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3286_toBool,"hx.strings.Strings","toBool",0x1fdee1db,"hx.strings.Strings.toBool","hx/strings/Strings.hx",3286,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3306_toBytes,"hx.strings.Strings","toBytes",0xc9c6a59a,"hx.strings.Strings.toBytes","hx/strings/Strings.hx",3306,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3327_toChar,"hx.strings.Strings","toChar",0x2082bc87,"hx.strings.Strings.toChar","hx/strings/Strings.hx",3327,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3341_toCharIterator,"hx.strings.Strings","toCharIterator",0x66392195,"hx.strings.Strings.toCharIterator","hx/strings/Strings.hx",3341,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3354_toChars,"hx.strings.Strings","toChars",0x51e23a0c,"hx.strings.Strings.toChars","hx/strings/Strings.hx",3354,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3375_toPattern,"hx.strings.Strings","toPattern",0x7c6a8d3f,"hx.strings.Strings.toPattern","hx/strings/Strings.hx",3375,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3390_toEReg,"hx.strings.Strings","toEReg",0x21c47ba0,"hx.strings.Strings.toEReg","hx/strings/Strings.hx",3390,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3412_toFloat,"hx.strings.Strings","toFloat",0x0ec562cb,"hx.strings.Strings.toFloat","hx/strings/Strings.hx",3412,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3437_toHex,"hx.strings.Strings","toHex",0x9fbae64a,"hx.strings.Strings.toHex","hx/strings/Strings.hx",3437,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3463_toInt,"hx.strings.Strings","toInt",0x9fbbb05e,"hx.strings.Strings.toInt","hx/strings/Strings.hx",3463,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3483_toLowerCase8,"hx.strings.Strings","toLowerCase8",0xdcfd8638,"hx.strings.Strings.toLowerCase8","hx/strings/Strings.hx",3483,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3517_toLowerCaseFirstChar,"hx.strings.Strings","toLowerCaseFirstChar",0x99544106,"hx.strings.Strings.toLowerCaseFirstChar","hx/strings/Strings.hx",3517,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3548_toLowerCamel,"hx.strings.Strings","toLowerCamel",0xdcf8f8e6,"hx.strings.Strings.toLowerCamel","hx/strings/Strings.hx",3548,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3584_toLowerHyphen,"hx.strings.Strings","toLowerHyphen",0x50456f42,"hx.strings.Strings.toLowerHyphen","hx/strings/Strings.hx",3584,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3580_toLowerHyphen,"hx.strings.Strings","toLowerHyphen",0x50456f42,"hx.strings.Strings.toLowerHyphen","hx/strings/Strings.hx",3580,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3609_toLowerUnderscore,"hx.strings.Strings","toLowerUnderscore",0xaf4f628a,"hx.strings.Strings.toLowerUnderscore","hx/strings/Strings.hx",3609,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3605_toLowerUnderscore,"hx.strings.Strings","toLowerUnderscore",0xaf4f628a,"hx.strings.Strings.toLowerUnderscore","hx/strings/Strings.hx",3605,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3639_toTitle,"hx.strings.Strings","toTitle",0x1c69b2c7,"hx.strings.Strings.toTitle","hx/strings/Strings.hx",3639,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3629_toTitle,"hx.strings.Strings","toTitle",0x1c69b2c7,"hx.strings.Strings.toTitle","hx/strings/Strings.hx",3629,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3635_toTitle,"hx.strings.Strings","toTitle",0x1c69b2c7,"hx.strings.Strings.toTitle","hx/strings/Strings.hx",3635,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3658_toUpperCamel,"hx.strings.Strings","toUpperCamel",0xe22779e5,"hx.strings.Strings.toUpperCamel","hx/strings/Strings.hx",3658,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3690_toUpperUnderscore,"hx.strings.Strings","toUpperUnderscore",0xc691e52b,"hx.strings.Strings.toUpperUnderscore","hx/strings/Strings.hx",3690,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3686_toUpperUnderscore,"hx.strings.Strings","toUpperUnderscore",0xc691e52b,"hx.strings.Strings.toUpperUnderscore","hx/strings/Strings.hx",3686,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3705_toString,"hx.strings.Strings","toString",0xadcb14c2,"hx.strings.Strings.toString","hx/strings/Strings.hx",3705,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3721_toUpperCase8,"hx.strings.Strings","toUpperCase8",0xe22c0737,"hx.strings.Strings.toUpperCase8","hx/strings/Strings.hx",3721,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3756_toUpperCaseFirstChar,"hx.strings.Strings","toUpperCaseFirstChar",0x4f7a5905,"hx.strings.Strings.toUpperCaseFirstChar","hx/strings/Strings.hx",3756,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3782_trim,"hx.strings.Strings","trim",0xa97a9df8,"hx.strings.Strings.trim","hx/strings/Strings.hx",3782,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3814_trimRight,"hx.strings.Strings","trimRight",0x68ff3ac4,"hx.strings.Strings.trimRight","hx/strings/Strings.hx",3814,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3856_trimLeft,"hx.strings.Strings","trimLeft",0xd5762e1f,"hx.strings.Strings.trimLeft","hx/strings/Strings.hx",3856,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3898_trimLines,"hx.strings.Strings","trimLines",0xf49d0ce7,"hx.strings.Strings.trimLines","hx/strings/Strings.hx",3898,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3894_trimLines,"hx.strings.Strings","trimLines",0xf49d0ce7,"hx.strings.Strings.trimLines","hx/strings/Strings.hx",3894,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3911_trimToNull,"hx.strings.Strings","trimToNull",0xa6f5e5ba,"hx.strings.Strings.trimToNull","hx/strings/Strings.hx",3911,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3933_trimToEmpty,"hx.strings.Strings","trimToEmpty",0x3c513ffa,"hx.strings.Strings.trimToEmpty","hx/strings/Strings.hx",3933,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3955_truncate,"hx.strings.Strings","truncate",0x4456027c,"hx.strings.Strings.truncate","hx/strings/Strings.hx",3955,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3967_urlDecode,"hx.strings.Strings","urlDecode",0x40bb0927,"hx.strings.Strings.urlDecode","hx/strings/Strings.hx",3967,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_3993_urlEncode,"hx.strings.Strings","urlEncode",0xd5b19e0f,"hx.strings.Strings.urlEncode","hx/strings/Strings.hx",3993,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_4020_wrap,"hx.strings.Strings","wrap",0xab763ae0,"hx.strings.Strings.wrap","hx/strings/Strings.hx",4020,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_31_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",31,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_32_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",32,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_33_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",33,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_36_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",36,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_39_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",39,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_44_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",44,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_49_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",49,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_fd0a69697a336cdd_54_boot,"hx.strings.Strings","boot",0x9d928548,"hx.strings.Strings.boot","hx/strings/Strings.hx",54,0x74f74a28)
namespace hx{
namespace strings{

void Strings_obj::__construct() { }

Dynamic Strings_obj::__CreateEmpty() { return new Strings_obj; }

void *Strings_obj::_hx_vtable = 0;

Dynamic Strings_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Strings_obj > _hx_result = new Strings_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Strings_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1845feb0;
}

 ::hx::strings::Pattern Strings_obj::REGEX_ANSI_ESC;

 ::hx::strings::Pattern Strings_obj::REGEX_HTML_UNESCAPE;

 ::hx::strings::Pattern Strings_obj::REGEX_SPLIT_LINES;

 ::hx::strings::Pattern Strings_obj::REGEX_REMOVE_XML_TAGS;

int Strings_obj::POS_NOT_FOUND;

::String Strings_obj::NEW_LINE_NIX;

::String Strings_obj::NEW_LINE_WIN;

::String Strings_obj::NEW_LINE;

::String Strings_obj::_getNotFoundDefault(::String str,int notFoundDefault){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_58__getNotFoundDefault)
HXDLIN(  58)		switch((int)(notFoundDefault)){
            			case (int)1: {
HXLINE(  59)				return null();
            			}
            			break;
            			case (int)2: {
HXLINE(  60)				return HX_("",00,00,00,00);
            			}
            			break;
            			case (int)3: {
HXLINE(  61)				return str;
            			}
            			break;
            		}
HXLINE(  58)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,_getNotFoundDefault,return )

int Strings_obj::_charCodeAt8Unsafe(::String str,int pos){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_75__charCodeAt8Unsafe)
HXDLIN(  75)		return ::haxe::Utf8_obj::charCodeAt(str,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,_charCodeAt8Unsafe,return )

::Array< ::String > Strings_obj::_splitAsciiWordsUnsafe(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_82__splitAsciiWordsUnsafe)
HXLINE(  83)		::Array< ::String > words = ::Array_obj< ::String >::__new();
HXLINE(  84)		 ::hx::strings::StringBuilder currentWord =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(  86)		::Array< int > chars = ::hx::strings::Strings_obj::toChars(str);
HXLINE(  88)		int len = chars->length;
HXLINE(  89)		int lastIndex = (len - (int)1);
HXLINE(  90)		{
HXLINE(  90)			int _g1 = (int)0;
HXDLIN(  90)			int _g = len;
HXDLIN(  90)			while((_g1 < _g)){
HXLINE(  90)				_g1 = (_g1 + (int)1);
HXDLIN(  90)				int i = (_g1 - (int)1);
HXLINE(  91)				int ch = chars->__get(i);
HXLINE(  92)				bool _hx_tmp;
HXDLIN(  92)				bool _hx_tmp1;
HXDLIN(  92)				if ((ch > (int)64)) {
HXLINE(  92)					_hx_tmp1 = (ch < (int)91);
            				}
            				else {
HXLINE(  92)					_hx_tmp1 = false;
            				}
HXDLIN(  92)				if (!(_hx_tmp1)) {
HXLINE(  92)					if ((ch > (int)96)) {
HXLINE(  92)						_hx_tmp = (ch < (int)123);
            					}
            					else {
HXLINE(  92)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(  92)					_hx_tmp = true;
            				}
HXDLIN(  92)				if (_hx_tmp) {
HXLINE(  93)					int chNext;
HXDLIN(  93)					if ((i < lastIndex)) {
HXLINE(  93)						chNext = chars->__get((i + (int)1));
            					}
            					else {
HXLINE(  93)						chNext = (int)-1;
            					}
HXLINE(  94)					currentWord->addChar(ch);
HXLINE(  95)					bool _hx_tmp2;
HXDLIN(  95)					if ((chNext > (int)47)) {
HXLINE(  95)						_hx_tmp2 = (chNext < (int)58);
            					}
            					else {
HXLINE(  95)						_hx_tmp2 = false;
            					}
HXDLIN(  95)					if (_hx_tmp2) {
HXLINE(  96)						words->push(currentWord->toString());
HXLINE(  97)						currentWord->clear();
            					}
            					else {
HXLINE(  98)						if (::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->exists(ch)) {
HXLINE(  99)							bool _hx_tmp3;
HXDLIN(  99)							if (::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->exists(chNext)) {
HXLINE(  99)								int chars1 = chars->length;
HXDLIN(  99)								_hx_tmp3 = (chars1 > (i + (int)2));
            							}
            							else {
HXLINE(  99)								_hx_tmp3 = false;
            							}
HXDLIN(  99)							if (_hx_tmp3) {
HXLINE( 100)								if (!(::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->exists(chars->__get((i + (int)2))))) {
HXLINE( 101)									words->push(currentWord->toString());
HXLINE( 102)									currentWord->clear();
            								}
            							}
            						}
            						else {
HXLINE( 106)							if (::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->exists(chNext)) {
HXLINE( 107)								words->push(currentWord->toString());
HXLINE( 108)								currentWord->clear();
            							}
            						}
            					}
            				}
            				else {
HXLINE( 111)					bool _hx_tmp4;
HXDLIN( 111)					if ((ch > (int)47)) {
HXLINE( 111)						_hx_tmp4 = (ch < (int)58);
            					}
            					else {
HXLINE( 111)						_hx_tmp4 = false;
            					}
HXDLIN( 111)					if (_hx_tmp4) {
HXLINE( 112)						currentWord->addChar(ch);
HXLINE( 113)						int chNext1;
HXDLIN( 113)						if ((i < lastIndex)) {
HXLINE( 113)							chNext1 = chars->__get((i + (int)1));
            						}
            						else {
HXLINE( 113)							chNext1 = (int)-1;
            						}
HXLINE( 114)						bool _hx_tmp5;
HXDLIN( 114)						if ((chNext1 > (int)47)) {
HXLINE( 114)							_hx_tmp5 = (chNext1 < (int)58);
            						}
            						else {
HXLINE( 114)							_hx_tmp5 = false;
            						}
HXDLIN( 114)						if (!(_hx_tmp5)) {
HXLINE( 115)							words->push(currentWord->toString());
HXLINE( 116)							currentWord->clear();
            						}
            					}
            					else {
HXLINE( 118)						if ((currentWord->len > (int)0)) {
HXLINE( 119)							words->push(currentWord->toString());
HXLINE( 120)							currentWord->clear();
            						}
            					}
            				}
            			}
            		}
HXLINE( 124)		if ((currentWord->len > (int)0)) {
HXLINE( 125)			words->push(currentWord->toString());
            		}
HXLINE( 126)		return words;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,_splitAsciiWordsUnsafe,return )

::String Strings_obj::ansiToHtml(::String str, ::hx::strings::AnsiToHtmlRenderMethod renderMethod, ::hx::strings::AnsiState initialState){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_157_ansiToHtml)
HXLINE( 159)		bool _hx_tmp;
HXDLIN( 159)		if (hx::IsNotNull( str )) {
HXLINE( 159)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE( 159)			_hx_tmp = true;
            		}
HXDLIN( 159)		if (_hx_tmp) {
HXLINE( 160)			return str;
            		}
HXLINE( 162)		if (hx::IsNull( renderMethod )) {
HXLINE( 162)			renderMethod = ::hx::strings::AnsiToHtmlRenderMethod_obj::StyleAttributes_dyn();
            		}
HXLINE( 163)		::String styleOrClassAttribute;
HXDLIN( 163)		switch((int)(_hx_getEnumValueIndex(renderMethod))){
            			case (int)0: {
HXLINE( 163)				styleOrClassAttribute = HX_("style",31,a5,1d,84);
            			}
            			break;
            			case (int)1: {
HXLINE( 163)				styleOrClassAttribute = HX_("class",38,78,58,48);
            			}
            			break;
            			case (int)2: {
HXLINE( 166)				 ::Dynamic cb = renderMethod->_hx_getObject(0);
HXLINE( 163)				styleOrClassAttribute = HX_("class",38,78,58,48);
            			}
            			break;
            		}
HXLINE( 169)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE( 171)		bool _hx_tmp1;
HXDLIN( 171)		if (hx::IsNotNull( initialState )) {
HXLINE( 171)			_hx_tmp1 = initialState->isActive();
            		}
            		else {
HXLINE( 171)			_hx_tmp1 = false;
            		}
HXDLIN( 171)		if (_hx_tmp1) {
HXLINE( 172)			::String item = ((HX_("<span ",5a,3c,d0,7e) + styleOrClassAttribute) + HX_("=\"",45,35,00,00));
HXDLIN( 172)			{
HXLINE( 172)				 ::StringBuf _this = sb->sb;
HXDLIN( 172)				if (hx::IsNotNull( _this->charBuf )) {
HXLINE( 172)					_this->flush();
            				}
HXDLIN( 172)				if (hx::IsNull( _this->b )) {
HXLINE( 172)					_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            				}
            				else {
HXLINE( 172)					::Array< ::String > _this1 = _this->b;
HXDLIN( 172)					_this1->push(::Std_obj::string(item));
            				}
            			}
HXDLIN( 172)			 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN( 172)			int sb2 = sb1->len;
HXDLIN( 172)			int _hx_tmp2;
HXDLIN( 172)			if (hx::IsNull( item )) {
HXLINE( 172)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE( 172)				_hx_tmp2 = ::haxe::Utf8_obj::length(item);
            			}
HXDLIN( 172)			sb1->len = (sb2 + _hx_tmp2);
HXDLIN( 172)			 ::hx::strings::StringBuilder _this2 = sb;
HXDLIN( 172)			::String item1 = initialState->toCSS(renderMethod);
HXDLIN( 172)			{
HXLINE( 172)				 ::StringBuf _this3 = _this2->sb;
HXDLIN( 172)				if (hx::IsNotNull( _this3->charBuf )) {
HXLINE( 172)					_this3->flush();
            				}
HXDLIN( 172)				if (hx::IsNull( _this3->b )) {
HXLINE( 172)					_this3->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item1));
            				}
            				else {
HXLINE( 172)					::Array< ::String > _this4 = _this3->b;
HXDLIN( 172)					_this4->push(::Std_obj::string(item1));
            				}
            			}
HXDLIN( 172)			 ::hx::strings::StringBuilder _this5 = _this2;
HXDLIN( 172)			int _this6 = _this5->len;
HXDLIN( 172)			int _hx_tmp3;
HXDLIN( 172)			if (hx::IsNull( item1 )) {
HXLINE( 172)				_hx_tmp3 = (int)0;
            			}
            			else {
HXLINE( 172)				_hx_tmp3 = ::haxe::Utf8_obj::length(item1);
            			}
HXDLIN( 172)			_this5->len = (_this6 + _hx_tmp3);
HXDLIN( 172)			 ::hx::strings::StringBuilder _this7 = _this2;
HXDLIN( 172)			{
HXLINE( 172)				 ::StringBuf _this8 = _this7->sb;
HXDLIN( 172)				if (hx::IsNotNull( _this8->charBuf )) {
HXLINE( 172)					_this8->flush();
            				}
HXDLIN( 172)				if (hx::IsNull( _this8->b )) {
HXLINE( 172)					_this8->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_7,1);
            				}
            				else {
HXLINE( 172)					_this8->b->push(HX_("\">",dc,1d,00,00));
            				}
            			}
HXDLIN( 172)			 ::hx::strings::StringBuilder _this9 = _this7;
HXDLIN( 172)			int _this10 = _this9->len;
HXDLIN( 172)			_this9->len = (_this10 + ::haxe::Utf8_obj::length(HX_("\">",dc,1d,00,00)));
            		}
HXLINE( 174)		 ::hx::strings::AnsiState effectiveState =  ::hx::strings::AnsiState_obj::__alloc( HX_CTX ,initialState);
HXLINE( 175)		int strLenMinus1;
HXDLIN( 175)		if (hx::IsNull( str )) {
HXLINE( 175)			strLenMinus1 = (int)0;
            		}
            		else {
HXLINE( 175)			strLenMinus1 = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN( 175)		int strLenMinus11 = (strLenMinus1 - (int)1);
HXLINE( 176)		int i = (int)-1;
HXLINE( 177)		 ::hx::strings::StringBuilder lookAhead =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE( 178)		while((i < strLenMinus11)){
HXLINE( 179)			i = (i + (int)1);
HXLINE( 180)			int ch = ::haxe::Utf8_obj::charCodeAt(str,i);
HXLINE( 181)			bool _hx_tmp4;
HXDLIN( 181)			bool _hx_tmp5;
HXDLIN( 181)			if ((ch == (int)27)) {
HXLINE( 181)				_hx_tmp5 = (i < strLenMinus11);
            			}
            			else {
HXLINE( 181)				_hx_tmp5 = false;
            			}
HXDLIN( 181)			if (_hx_tmp5) {
HXLINE( 181)				_hx_tmp4 = (::haxe::Utf8_obj::charCodeAt(str,(i + (int)1)) == (int)91);
            			}
            			else {
HXLINE( 181)				_hx_tmp4 = false;
            			}
HXDLIN( 181)			if (_hx_tmp4) {
HXLINE( 182)				lookAhead->clear();
HXLINE( 183)				 ::hx::strings::AnsiState currentState =  ::hx::strings::AnsiState_obj::__alloc( HX_CTX ,effectiveState);
HXLINE( 184)				int currentGraphicModeParam = (int)0;
HXLINE( 185)				bool isValidEscapeSequence = false;
HXLINE( 186)				i = (i + (int)1);
HXLINE( 187)				while((i < strLenMinus11)){
HXLINE( 188)					i = (i + (int)1);
HXLINE( 189)					int ch2 = ::haxe::Utf8_obj::charCodeAt(str,i);
HXLINE( 190)					lookAhead->addChar(ch2);
HXLINE( 191)					switch((int)(ch2)){
            						case (int)48: {
HXLINE( 192)							currentGraphicModeParam = (currentGraphicModeParam * (int)10);
            						}
            						break;
            						case (int)49: {
HXLINE( 193)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)1);
            						}
            						break;
            						case (int)50: {
HXLINE( 194)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)2);
            						}
            						break;
            						case (int)51: {
HXLINE( 195)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)3);
            						}
            						break;
            						case (int)52: {
HXLINE( 196)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)4);
            						}
            						break;
            						case (int)53: {
HXLINE( 197)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)5);
            						}
            						break;
            						case (int)54: {
HXLINE( 198)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)6);
            						}
            						break;
            						case (int)55: {
HXLINE( 199)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)7);
            						}
            						break;
            						case (int)56: {
HXLINE( 200)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)8);
            						}
            						break;
            						case (int)57: {
HXLINE( 201)							currentGraphicModeParam = ((currentGraphicModeParam * (int)10) + (int)9);
            						}
            						break;
            						case (int)59: {
HXLINE( 203)							currentState->setGraphicModeParameter(currentGraphicModeParam);
HXLINE( 204)							currentGraphicModeParam = (int)0;
            						}
            						break;
            						case (int)109: {
HXLINE( 206)							currentState->setGraphicModeParameter(currentGraphicModeParam);
HXLINE( 207)							if (effectiveState->isActive()) {
HXLINE( 208)								{
HXLINE( 208)									 ::StringBuf _this11 = sb->sb;
HXDLIN( 208)									if (hx::IsNotNull( _this11->charBuf )) {
HXLINE( 208)										_this11->flush();
            									}
HXDLIN( 208)									if (hx::IsNull( _this11->b )) {
HXLINE( 208)										_this11->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_8,1);
            									}
            									else {
HXLINE( 208)										_this11->b->push(HX_("</span>",e1,60,34,0b));
            									}
            								}
HXDLIN( 208)								 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN( 208)								int sb4 = sb3->len;
HXDLIN( 208)								sb3->len = (sb4 + ::haxe::Utf8_obj::length(HX_("</span>",e1,60,34,0b)));
            							}
HXLINE( 209)							if (currentState->isActive()) {
HXLINE( 210)								::String item2 = ((HX_("<span ",5a,3c,d0,7e) + styleOrClassAttribute) + HX_("=\"",45,35,00,00));
HXDLIN( 210)								{
HXLINE( 210)									 ::StringBuf _this12 = sb->sb;
HXDLIN( 210)									if (hx::IsNotNull( _this12->charBuf )) {
HXLINE( 210)										_this12->flush();
            									}
HXDLIN( 210)									if (hx::IsNull( _this12->b )) {
HXLINE( 210)										_this12->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item2));
            									}
            									else {
HXLINE( 210)										::Array< ::String > _this13 = _this12->b;
HXDLIN( 210)										_this13->push(::Std_obj::string(item2));
            									}
            								}
HXDLIN( 210)								 ::hx::strings::StringBuilder sb5 = sb;
HXDLIN( 210)								int sb6 = sb5->len;
HXDLIN( 210)								int _hx_tmp6;
HXDLIN( 210)								if (hx::IsNull( item2 )) {
HXLINE( 210)									_hx_tmp6 = (int)0;
            								}
            								else {
HXLINE( 210)									_hx_tmp6 = ::haxe::Utf8_obj::length(item2);
            								}
HXDLIN( 210)								sb5->len = (sb6 + _hx_tmp6);
HXDLIN( 210)								 ::hx::strings::StringBuilder _this14 = sb;
HXDLIN( 210)								::String item3 = currentState->toCSS(renderMethod);
HXDLIN( 210)								{
HXLINE( 210)									 ::StringBuf _this15 = _this14->sb;
HXDLIN( 210)									if (hx::IsNotNull( _this15->charBuf )) {
HXLINE( 210)										_this15->flush();
            									}
HXDLIN( 210)									if (hx::IsNull( _this15->b )) {
HXLINE( 210)										_this15->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item3));
            									}
            									else {
HXLINE( 210)										::Array< ::String > _this16 = _this15->b;
HXDLIN( 210)										_this16->push(::Std_obj::string(item3));
            									}
            								}
HXDLIN( 210)								 ::hx::strings::StringBuilder _this17 = _this14;
HXDLIN( 210)								int _this18 = _this17->len;
HXDLIN( 210)								int _hx_tmp7;
HXDLIN( 210)								if (hx::IsNull( item3 )) {
HXLINE( 210)									_hx_tmp7 = (int)0;
            								}
            								else {
HXLINE( 210)									_hx_tmp7 = ::haxe::Utf8_obj::length(item3);
            								}
HXDLIN( 210)								_this17->len = (_this18 + _hx_tmp7);
HXDLIN( 210)								 ::hx::strings::StringBuilder _this19 = _this14;
HXDLIN( 210)								{
HXLINE( 210)									 ::StringBuf _this20 = _this19->sb;
HXDLIN( 210)									if (hx::IsNotNull( _this20->charBuf )) {
HXLINE( 210)										_this20->flush();
            									}
HXDLIN( 210)									if (hx::IsNull( _this20->b )) {
HXLINE( 210)										_this20->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_9,1);
            									}
            									else {
HXLINE( 210)										_this20->b->push(HX_("\">",dc,1d,00,00));
            									}
            								}
HXDLIN( 210)								 ::hx::strings::StringBuilder _this21 = _this19;
HXDLIN( 210)								int _this22 = _this21->len;
HXDLIN( 210)								_this21->len = (_this22 + ::haxe::Utf8_obj::length(HX_("\">",dc,1d,00,00)));
            							}
HXLINE( 211)							effectiveState = currentState;
HXLINE( 212)							isValidEscapeSequence = true;
HXLINE( 213)							goto _hx_goto_5;
            						}
            						break;
            						default:{
HXLINE( 216)							goto _hx_goto_5;
            						}
            					}
            				}
            				_hx_goto_5:;
HXLINE( 219)				if (!(isValidEscapeSequence)) {
HXLINE( 221)					 ::hx::strings::StringBuilder _this23 = sb->addChar((int)27);
HXDLIN( 221)					{
HXLINE( 221)						 ::StringBuf _this24 = _this23->sb;
HXDLIN( 221)						if (hx::IsNotNull( _this24->charBuf )) {
HXLINE( 221)							_this24->flush();
            						}
HXDLIN( 221)						if (hx::IsNull( _this24->b )) {
HXLINE( 221)							_this24->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_10,1);
            						}
            						else {
HXLINE( 221)							_this24->b->push(HX_("[",5b,00,00,00));
            						}
            					}
HXDLIN( 221)					 ::hx::strings::StringBuilder _this25 = _this23;
HXDLIN( 221)					int _this26 = _this25->len;
HXDLIN( 221)					_this25->len = (_this26 + ::haxe::Utf8_obj::length(HX_("[",5b,00,00,00)));
HXDLIN( 221)					 ::hx::strings::StringBuilder _this27 = _this23;
HXDLIN( 221)					::String item4 = ::Std_obj::string(lookAhead);
HXDLIN( 221)					{
HXLINE( 221)						 ::StringBuf _this28 = _this27->sb;
HXDLIN( 221)						if (hx::IsNotNull( _this28->charBuf )) {
HXLINE( 221)							_this28->flush();
            						}
HXDLIN( 221)						if (hx::IsNull( _this28->b )) {
HXLINE( 221)							_this28->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item4));
            						}
            						else {
HXLINE( 221)							::Array< ::String > _this29 = _this28->b;
HXDLIN( 221)							_this29->push(::Std_obj::string(item4));
            						}
            					}
HXDLIN( 221)					 ::hx::strings::StringBuilder _this30 = _this27;
HXDLIN( 221)					int _this31 = _this30->len;
HXDLIN( 221)					int _hx_tmp8;
HXDLIN( 221)					if (hx::IsNull( item4 )) {
HXLINE( 221)						_hx_tmp8 = (int)0;
            					}
            					else {
HXLINE( 221)						_hx_tmp8 = ::haxe::Utf8_obj::length(item4);
            					}
HXDLIN( 221)					_this30->len = (_this31 + _hx_tmp8);
            				}
            			}
            			else {
HXLINE( 225)				sb->addChar(ch);
            			}
            		}
HXLINE( 228)		if (effectiveState->isActive()) {
HXLINE( 229)			{
HXLINE( 229)				 ::StringBuf _this32 = sb->sb;
HXDLIN( 229)				if (hx::IsNotNull( _this32->charBuf )) {
HXLINE( 229)					_this32->flush();
            				}
HXDLIN( 229)				if (hx::IsNull( _this32->b )) {
HXLINE( 229)					_this32->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_11,1);
            				}
            				else {
HXLINE( 229)					_this32->b->push(HX_("</span>",e1,60,34,0b));
            				}
            			}
HXDLIN( 229)			 ::hx::strings::StringBuilder sb7 = sb;
HXDLIN( 229)			int sb8 = sb7->len;
HXDLIN( 229)			sb7->len = (sb8 + ::haxe::Utf8_obj::length(HX_("</span>",e1,60,34,0b)));
            		}
HXLINE( 231)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,ansiToHtml,return )

::String Strings_obj::appendIfMissing(::String str,::String suffix){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_247_appendIfMissing)
HXLINE( 248)		if (hx::IsNull( str )) {
HXLINE( 249)			return null();
            		}
HXLINE( 251)		if ((str.length == (int)0)) {
HXLINE( 252)			return (str + suffix);
            		}
HXLINE( 254)		bool _hx_tmp;
HXDLIN( 254)		bool _hx_tmp1;
HXDLIN( 254)		if (hx::IsNotNull( str )) {
HXLINE( 254)			_hx_tmp1 = hx::IsNull( suffix );
            		}
            		else {
HXLINE( 254)			_hx_tmp1 = true;
            		}
HXDLIN( 254)		if (_hx_tmp1) {
HXLINE( 254)			_hx_tmp = false;
            		}
            		else {
HXLINE( 254)			_hx_tmp = ::StringTools_obj::endsWith(str,suffix);
            		}
HXDLIN( 254)		if (_hx_tmp) {
HXLINE( 255)			return str;
            		}
HXLINE( 257)		return (str + suffix);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,appendIfMissing,return )

::String Strings_obj::base64Encode(::String plain){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_269_base64Encode)
HXLINE( 270)		if (hx::IsNull( plain )) {
HXLINE( 271)			return null();
            		}
HXLINE( 280)		 ::haxe::io::Bytes _hx_tmp;
HXDLIN( 280)		if (hx::IsNull( plain )) {
HXLINE( 280)			_hx_tmp = null();
            		}
            		else {
HXLINE( 280)			_hx_tmp = ::haxe::io::Bytes_obj::ofString(plain,null());
            		}
HXDLIN( 280)		return ::haxe::crypto::Base64_obj::encode(_hx_tmp,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,base64Encode,return )

::String Strings_obj::base64Decode(::String encoded){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_293_base64Decode)
HXLINE( 294)		if (hx::IsNull( encoded )) {
HXLINE( 295)			return null();
            		}
HXLINE( 304)		return ::haxe::crypto::Base64_obj::decode(encoded,null())->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,base64Decode,return )

::String Strings_obj::charAt8(::String str,int pos,::String __o_resultIfOutOfBound){
::String resultIfOutOfBound = __o_resultIfOutOfBound.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_328_charAt8)
HXLINE( 329)		bool _hx_tmp;
HXDLIN( 329)		bool _hx_tmp1;
HXDLIN( 329)		bool _hx_tmp2;
HXDLIN( 329)		if (hx::IsNotNull( str )) {
HXLINE( 329)			_hx_tmp2 = (str.length == (int)0);
            		}
            		else {
HXLINE( 329)			_hx_tmp2 = true;
            		}
HXDLIN( 329)		if (!(_hx_tmp2)) {
HXLINE( 329)			_hx_tmp1 = (pos < (int)0);
            		}
            		else {
HXLINE( 329)			_hx_tmp1 = true;
            		}
HXDLIN( 329)		if (!(_hx_tmp1)) {
HXLINE( 329)			int _hx_tmp3;
HXDLIN( 329)			if (hx::IsNull( str )) {
HXLINE( 329)				_hx_tmp3 = (int)0;
            			}
            			else {
HXLINE( 329)				_hx_tmp3 = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN( 329)			_hx_tmp = (pos >= _hx_tmp3);
            		}
            		else {
HXLINE( 329)			_hx_tmp = true;
            		}
HXDLIN( 329)		if (_hx_tmp) {
HXLINE( 330)			return resultIfOutOfBound;
            		}
HXLINE( 335)		return ::haxe::Utf8_obj::sub(str,pos,(int)1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,charAt8,return )

int Strings_obj::charCodeAt8(::String str,int pos,hx::Null< int >  __o_resultIfOutOfBound){
int resultIfOutOfBound = __o_resultIfOutOfBound.Default(-1);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_365_charCodeAt8)
HXLINE( 366)		int strLen;
HXDLIN( 366)		if (hx::IsNull( str )) {
HXLINE( 366)			strLen = (int)0;
            		}
            		else {
HXLINE( 366)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE( 367)		bool _hx_tmp;
HXDLIN( 367)		bool _hx_tmp1;
HXDLIN( 367)		if ((strLen != (int)0)) {
HXLINE( 367)			_hx_tmp1 = (pos < (int)0);
            		}
            		else {
HXLINE( 367)			_hx_tmp1 = true;
            		}
HXDLIN( 367)		if (!(_hx_tmp1)) {
HXLINE( 367)			_hx_tmp = (pos >= strLen);
            		}
            		else {
HXLINE( 367)			_hx_tmp = true;
            		}
HXDLIN( 367)		if (_hx_tmp) {
HXLINE( 368)			return resultIfOutOfBound;
            		}
HXLINE( 370)		return ::haxe::Utf8_obj::charCodeAt(str,pos);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,charCodeAt8,return )

::String Strings_obj::compact(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_384_compact)
HXLINE( 385)		bool _hx_tmp;
HXDLIN( 385)		if (hx::IsNotNull( str )) {
HXLINE( 385)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE( 385)			_hx_tmp = true;
            		}
HXDLIN( 385)		if (_hx_tmp) {
HXLINE( 386)			return str;
            		}
HXLINE( 388)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE( 389)		bool needWhiteSpace = false;
HXLINE( 390)		{
HXLINE( 390)			int _g = (int)0;
HXDLIN( 390)			::Array< int > _g1 = ::hx::strings::Strings_obj::toChars(str);
HXDLIN( 390)			while((_g < _g1->length)){
HXLINE( 390)				int _hx_char = _g1->__get(_g);
HXDLIN( 390)				_g = (_g + (int)1);
HXLINE( 391)				bool _hx_tmp1;
HXDLIN( 391)				bool _hx_tmp2;
HXDLIN( 391)				if ((_hx_char > (int)8)) {
HXLINE( 391)					_hx_tmp2 = (_hx_char < (int)14);
            				}
            				else {
HXLINE( 391)					_hx_tmp2 = false;
            				}
HXDLIN( 391)				if (!(_hx_tmp2)) {
HXLINE( 391)					_hx_tmp1 = (_hx_char == (int)32);
            				}
            				else {
HXLINE( 391)					_hx_tmp1 = true;
            				}
HXDLIN( 391)				if (_hx_tmp1) {
HXLINE( 392)					if ((sb->len != (int)0)) {
HXLINE( 393)						needWhiteSpace = true;
            					}
HXLINE( 394)					continue;
            				}
            				else {
HXLINE( 396)					if (needWhiteSpace) {
HXLINE( 397)						sb->addChar((int)32);
HXLINE( 398)						needWhiteSpace = false;
            					}
            				}
HXLINE( 400)				sb->addChar(_hx_char);
            			}
            		}
HXLINE( 402)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,compact,return )

bool Strings_obj::contains(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_421_contains)
HXLINE( 422)		bool _hx_tmp;
HXDLIN( 422)		if (hx::IsNotNull( searchIn )) {
HXLINE( 422)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 422)			_hx_tmp = true;
            		}
HXDLIN( 422)		if (_hx_tmp) {
HXLINE( 423)			return false;
            		}
HXLINE( 425)		if ((searchFor == HX_("",00,00,00,00))) {
HXLINE( 426)			return true;
            		}
HXLINE( 428)		return (searchIn.indexOf(searchFor,null()) > (int)-1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,contains,return )

bool Strings_obj::containsOnly(::String searchIn, ::hx::strings::internal::_Either2::_Either2 allowedChars){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_445_containsOnly)
HXLINE( 446)		bool _hx_tmp;
HXDLIN( 446)		if (hx::IsNotNull( searchIn )) {
HXLINE( 446)			_hx_tmp = (searchIn.length == (int)0);
            		}
            		else {
HXLINE( 446)			_hx_tmp = true;
            		}
HXDLIN( 446)		if (_hx_tmp) {
HXLINE( 447)			return true;
            		}
HXLINE( 449)		if (hx::IsNull( allowedChars )) {
HXLINE( 450)			return false;
            		}
HXLINE( 452)		::Array< int > allowedCharsArray;
HXDLIN( 452)		 ::hx::strings::internal::_Either2::_Either2 _g = allowedChars;
HXDLIN( 452)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE( 453)				::String str = ( (::String)(_g->_hx_getObject(0)) );
HXLINE( 452)				allowedCharsArray = ::hx::strings::Strings_obj::toChars(str);
            			}
            			break;
            			case (int)1: {
HXLINE( 454)				::Array< int > chars = ( (::Array< int >)(_g->_hx_getObject(0)) );
HXLINE( 452)				allowedCharsArray = chars;
            			}
            			break;
            		}
HXLINE( 457)		{
HXLINE( 457)			int _g1 = (int)0;
HXDLIN( 457)			::Array< int > _g2 = ::hx::strings::Strings_obj::toChars(searchIn);
HXDLIN( 457)			while((_g1 < _g2->length)){
HXLINE( 457)				int ch = _g2->__get(_g1);
HXDLIN( 457)				_g1 = (_g1 + (int)1);
HXLINE( 458)				if ((allowedCharsArray->indexOf(ch,null()) < (int)0)) {
HXLINE( 459)					return false;
            				}
            			}
            		}
HXLINE( 461)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsOnly,return )

bool Strings_obj::containsAll(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_481_containsAll)
HXLINE( 482)		bool _hx_tmp;
HXDLIN( 482)		if (hx::IsNotNull( searchIn )) {
HXLINE( 482)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 482)			_hx_tmp = true;
            		}
HXDLIN( 482)		if (_hx_tmp) {
HXLINE( 483)			return false;
            		}
HXLINE( 485)		{
HXLINE( 485)			int _g = (int)0;
HXDLIN( 485)			while((_g < searchFor->length)){
HXLINE( 485)				::String candidate = searchFor->__get(_g);
HXDLIN( 485)				_g = (_g + (int)1);
HXLINE( 486)				bool _hx_tmp1;
HXDLIN( 486)				bool _hx_tmp2;
HXDLIN( 486)				if (hx::IsNotNull( searchIn )) {
HXLINE( 486)					_hx_tmp2 = hx::IsNull( candidate );
            				}
            				else {
HXLINE( 486)					_hx_tmp2 = true;
            				}
HXDLIN( 486)				if (_hx_tmp2) {
HXLINE( 486)					_hx_tmp1 = false;
            				}
            				else {
HXLINE( 486)					if ((candidate == HX_("",00,00,00,00))) {
HXLINE( 486)						_hx_tmp1 = true;
            					}
            					else {
HXLINE( 486)						_hx_tmp1 = (searchIn.indexOf(candidate,null()) > (int)-1);
            					}
            				}
HXDLIN( 486)				if (!(_hx_tmp1)) {
HXLINE( 487)					return false;
            				}
            			}
            		}
HXLINE( 489)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsAll,return )

bool Strings_obj::containsAllIgnoreCase(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_509_containsAllIgnoreCase)
HXLINE( 510)		bool _hx_tmp;
HXDLIN( 510)		if (hx::IsNotNull( searchIn )) {
HXLINE( 510)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 510)			_hx_tmp = true;
            		}
HXDLIN( 510)		if (_hx_tmp) {
HXLINE( 511)			return false;
            		}
HXLINE( 513)		searchIn = searchIn.toLowerCase();
HXLINE( 515)		{
HXLINE( 515)			int _g = (int)0;
HXDLIN( 515)			while((_g < searchFor->length)){
HXLINE( 515)				::String candidate = searchFor->__get(_g);
HXDLIN( 515)				_g = (_g + (int)1);
HXLINE( 516)				::String searchFor1 = candidate.toLowerCase();
HXDLIN( 516)				bool _hx_tmp1;
HXDLIN( 516)				bool _hx_tmp2;
HXDLIN( 516)				if (hx::IsNotNull( searchIn )) {
HXLINE( 516)					_hx_tmp2 = hx::IsNull( searchFor1 );
            				}
            				else {
HXLINE( 516)					_hx_tmp2 = true;
            				}
HXDLIN( 516)				if (_hx_tmp2) {
HXLINE( 516)					_hx_tmp1 = false;
            				}
            				else {
HXLINE( 516)					if ((searchFor1 == HX_("",00,00,00,00))) {
HXLINE( 516)						_hx_tmp1 = true;
            					}
            					else {
HXLINE( 516)						_hx_tmp1 = (searchIn.indexOf(searchFor1,null()) > (int)-1);
            					}
            				}
HXDLIN( 516)				if (!(_hx_tmp1)) {
HXLINE( 517)					return false;
            				}
            			}
            		}
HXLINE( 519)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsAllIgnoreCase,return )

bool Strings_obj::containsAny(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_540_containsAny)
HXLINE( 541)		bool _hx_tmp;
HXDLIN( 541)		if (hx::IsNotNull( searchIn )) {
HXLINE( 541)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 541)			_hx_tmp = true;
            		}
HXDLIN( 541)		if (_hx_tmp) {
HXLINE( 542)			return false;
            		}
HXLINE( 544)		{
HXLINE( 544)			int _g = (int)0;
HXDLIN( 544)			while((_g < searchFor->length)){
HXLINE( 544)				::String candidate = searchFor->__get(_g);
HXDLIN( 544)				_g = (_g + (int)1);
HXLINE( 545)				bool _hx_tmp1;
HXDLIN( 545)				bool _hx_tmp2;
HXDLIN( 545)				if (hx::IsNotNull( searchIn )) {
HXLINE( 545)					_hx_tmp2 = hx::IsNull( candidate );
            				}
            				else {
HXLINE( 545)					_hx_tmp2 = true;
            				}
HXDLIN( 545)				if (_hx_tmp2) {
HXLINE( 545)					_hx_tmp1 = false;
            				}
            				else {
HXLINE( 545)					if ((candidate == HX_("",00,00,00,00))) {
HXLINE( 545)						_hx_tmp1 = true;
            					}
            					else {
HXLINE( 545)						_hx_tmp1 = (searchIn.indexOf(candidate,null()) > (int)-1);
            					}
            				}
HXDLIN( 545)				if (_hx_tmp1) {
HXLINE( 546)					return true;
            				}
            			}
            		}
HXLINE( 548)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsAny,return )

bool Strings_obj::containsAnyIgnoreCase(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_568_containsAnyIgnoreCase)
HXLINE( 569)		bool _hx_tmp;
HXDLIN( 569)		if (hx::IsNotNull( searchIn )) {
HXLINE( 569)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 569)			_hx_tmp = true;
            		}
HXDLIN( 569)		if (_hx_tmp) {
HXLINE( 570)			return false;
            		}
HXLINE( 572)		searchIn = searchIn.toLowerCase();
HXLINE( 574)		{
HXLINE( 574)			int _g = (int)0;
HXDLIN( 574)			while((_g < searchFor->length)){
HXLINE( 574)				::String candidate = searchFor->__get(_g);
HXDLIN( 574)				_g = (_g + (int)1);
HXLINE( 575)				::String searchFor1 = candidate.toLowerCase();
HXDLIN( 575)				bool _hx_tmp1;
HXDLIN( 575)				bool _hx_tmp2;
HXDLIN( 575)				if (hx::IsNotNull( searchIn )) {
HXLINE( 575)					_hx_tmp2 = hx::IsNull( searchFor1 );
            				}
            				else {
HXLINE( 575)					_hx_tmp2 = true;
            				}
HXDLIN( 575)				if (_hx_tmp2) {
HXLINE( 575)					_hx_tmp1 = false;
            				}
            				else {
HXLINE( 575)					if ((searchFor1 == HX_("",00,00,00,00))) {
HXLINE( 575)						_hx_tmp1 = true;
            					}
            					else {
HXLINE( 575)						_hx_tmp1 = (searchIn.indexOf(searchFor1,null()) > (int)-1);
            					}
            				}
HXDLIN( 575)				if (_hx_tmp1) {
HXLINE( 576)					return true;
            				}
            			}
            		}
HXLINE( 578)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsAnyIgnoreCase,return )

bool Strings_obj::containsNone(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_600_containsNone)
HXDLIN( 600)		return !(::hx::strings::Strings_obj::containsAny(searchIn,searchFor));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsNone,return )

bool Strings_obj::containsNoneIgnoreCase(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_622_containsNoneIgnoreCase)
HXDLIN( 622)		return !(::hx::strings::Strings_obj::containsAnyIgnoreCase(searchIn,searchFor));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,containsNoneIgnoreCase,return )

bool Strings_obj::containsWhitespaces(::String searchIn){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_638_containsWhitespaces)
HXLINE( 639)		if (hx::IsNull( searchIn )) {
HXLINE( 640)			return false;
            		}
HXLINE( 642)		{
HXLINE( 642)			int _g = (int)0;
HXDLIN( 642)			::Array< int > _g1 = ::hx::strings::Strings_obj::toChars(searchIn);
HXDLIN( 642)			while((_g < _g1->length)){
HXLINE( 642)				int ch = _g1->__get(_g);
HXDLIN( 642)				_g = (_g + (int)1);
HXLINE( 643)				bool _hx_tmp;
HXDLIN( 643)				bool _hx_tmp1;
HXDLIN( 643)				if ((ch > (int)8)) {
HXLINE( 643)					_hx_tmp1 = (ch < (int)14);
            				}
            				else {
HXLINE( 643)					_hx_tmp1 = false;
            				}
HXDLIN( 643)				if (!(_hx_tmp1)) {
HXLINE( 643)					_hx_tmp = (ch == (int)32);
            				}
            				else {
HXLINE( 643)					_hx_tmp = true;
            				}
HXDLIN( 643)				if (_hx_tmp) {
HXLINE( 644)					return true;
            				}
            			}
            		}
HXLINE( 647)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,containsWhitespaces,return )

int Strings_obj::countMatches(::String searchIn,::String searchFor,hx::Null< int >  __o_startAt){
int startAt = __o_startAt.Default(0);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_666_countMatches)
HXLINE( 667)		bool _hx_tmp;
HXDLIN( 667)		bool _hx_tmp1;
HXDLIN( 667)		bool _hx_tmp2;
HXDLIN( 667)		if (hx::IsNotNull( searchIn )) {
HXLINE( 667)			_hx_tmp2 = (searchIn.length == (int)0);
            		}
            		else {
HXLINE( 667)			_hx_tmp2 = true;
            		}
HXDLIN( 667)		if (!(_hx_tmp2)) {
HXLINE( 667)			if (hx::IsNotNull( searchFor )) {
HXLINE( 667)				_hx_tmp1 = (searchFor.length == (int)0);
            			}
            			else {
HXLINE( 667)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 667)			_hx_tmp1 = true;
            		}
HXDLIN( 667)		if (!(_hx_tmp1)) {
HXLINE( 667)			_hx_tmp = (startAt >= searchIn.length);
            		}
            		else {
HXLINE( 667)			_hx_tmp = true;
            		}
HXDLIN( 667)		if (_hx_tmp) {
HXLINE( 668)			return (int)0;
            		}
HXLINE( 670)		if ((startAt < (int)0)) {
HXLINE( 671)			startAt = (int)0;
            		}
HXLINE( 673)		int count = (int)0;
HXLINE( 674)		int foundAt;
HXDLIN( 674)		if ((startAt > (int)-1)) {
HXLINE( 674)			foundAt = (startAt - (int)1);
            		}
            		else {
HXLINE( 674)			foundAt = (int)0;
            		}
HXLINE( 675)		while(true){
HXLINE( 675)			foundAt = searchIn.indexOf(searchFor,(foundAt + (int)1));
HXDLIN( 675)			if (!((foundAt > (int)-1))) {
HXLINE( 675)				goto _hx_goto_34;
            			}
HXLINE( 676)			count = (count + (int)1);
            		}
            		_hx_goto_34:;
HXLINE( 678)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,countMatches,return )

int Strings_obj::countMatchesIgnoreCase(::String searchIn,::String searchFor,hx::Null< int >  __o_startAt){
int startAt = __o_startAt.Default(0);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_697_countMatchesIgnoreCase)
HXLINE( 698)		bool _hx_tmp;
HXDLIN( 698)		bool _hx_tmp1;
HXDLIN( 698)		bool _hx_tmp2;
HXDLIN( 698)		if (hx::IsNotNull( searchIn )) {
HXLINE( 698)			_hx_tmp2 = (searchIn.length == (int)0);
            		}
            		else {
HXLINE( 698)			_hx_tmp2 = true;
            		}
HXDLIN( 698)		if (!(_hx_tmp2)) {
HXLINE( 698)			if (hx::IsNotNull( searchFor )) {
HXLINE( 698)				_hx_tmp1 = (searchFor.length == (int)0);
            			}
            			else {
HXLINE( 698)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 698)			_hx_tmp1 = true;
            		}
HXDLIN( 698)		if (!(_hx_tmp1)) {
HXLINE( 698)			_hx_tmp = (startAt >= searchIn.length);
            		}
            		else {
HXLINE( 698)			_hx_tmp = true;
            		}
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 699)			return (int)0;
            		}
HXLINE( 701)		if ((startAt < (int)0)) {
HXLINE( 702)			startAt = (int)0;
            		}
HXLINE( 704)		searchIn = searchIn.toLowerCase();
HXLINE( 705)		searchFor = searchFor.toLowerCase();
HXLINE( 707)		int count = (int)0;
HXLINE( 708)		int foundAt;
HXDLIN( 708)		if ((startAt > (int)-1)) {
HXLINE( 708)			foundAt = (startAt - (int)1);
            		}
            		else {
HXLINE( 708)			foundAt = (int)0;
            		}
HXLINE( 709)		while(true){
HXLINE( 709)			foundAt = searchIn.indexOf(searchFor,(foundAt + (int)1));
HXDLIN( 709)			if (!((foundAt > (int)-1))) {
HXLINE( 709)				goto _hx_goto_36;
            			}
HXLINE( 710)			count = (count + (int)1);
            		}
            		_hx_goto_36:;
HXLINE( 712)		return count;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,countMatchesIgnoreCase,return )

int Strings_obj::compare(::String str,::String other){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_734_compare)
HXLINE( 735)		if (hx::IsNull( str )) {
HXLINE( 736)			if (hx::IsNull( other )) {
HXLINE( 736)				return (int)0;
            			}
            			else {
HXLINE( 736)				return (int)-1;
            			}
            		}
HXLINE( 738)		if (hx::IsNull( other )) {
HXLINE( 739)			if (hx::IsNull( str )) {
HXLINE( 739)				return (int)0;
            			}
            			else {
HXLINE( 739)				return (int)1;
            			}
            		}
HXLINE( 749)		return ::haxe::Utf8_obj::compare(str,other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,compare,return )

int Strings_obj::compareIgnoreCase(::String str,::String other){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_771_compareIgnoreCase)
HXLINE( 772)		if (hx::IsNull( str )) {
HXLINE( 773)			if (hx::IsNull( other )) {
HXLINE( 773)				return (int)0;
            			}
            			else {
HXLINE( 773)				return (int)-1;
            			}
            		}
HXLINE( 775)		if (hx::IsNull( other )) {
HXLINE( 776)			if (hx::IsNull( str )) {
HXLINE( 776)				return (int)0;
            			}
            			else {
HXLINE( 776)				return (int)1;
            			}
            		}
HXLINE( 778)		str = ::hx::strings::Strings_obj::toLowerCase8(str);
HXLINE( 779)		other = ::hx::strings::Strings_obj::toLowerCase8(other);
HXLINE( 789)		return ::haxe::Utf8_obj::compare(str,other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,compareIgnoreCase,return )

 ::hx::strings::StringDiff Strings_obj::diff(::String left,::String right){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_805_diff)
HXLINE( 806)		 ::hx::strings::StringDiff diff =  ::hx::strings::StringDiff_obj::__alloc( HX_CTX );
HXLINE( 807)		diff->at = ::hx::strings::Strings_obj::diffAt(left,right);
HXLINE( 808)		diff->left = ::hx::strings::Strings_obj::substr8(left,diff->at,null());
HXLINE( 809)		diff->right = ::hx::strings::Strings_obj::substr8(right,diff->at,null());
HXLINE( 810)		return diff;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,diff,return )

int Strings_obj::diffAt(::String str,::String other){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_830_diffAt)
HXLINE( 831)		if ((str == other)) {
HXLINE( 832)			return (int)-1;
            		}
HXLINE( 834)		int strLen;
HXDLIN( 834)		if (hx::IsNull( str )) {
HXLINE( 834)			strLen = (int)0;
            		}
            		else {
HXLINE( 834)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE( 835)		int otherLen;
HXDLIN( 835)		if (hx::IsNull( other )) {
HXLINE( 835)			otherLen = (int)0;
            		}
            		else {
HXLINE( 835)			otherLen = ::haxe::Utf8_obj::length(other);
            		}
HXLINE( 837)		bool _hx_tmp;
HXDLIN( 837)		if ((strLen != (int)0)) {
HXLINE( 837)			_hx_tmp = (otherLen == (int)0);
            		}
            		else {
HXLINE( 837)			_hx_tmp = true;
            		}
HXDLIN( 837)		if (_hx_tmp) {
HXLINE( 838)			return (int)0;
            		}
HXLINE( 840)		int checkLen;
HXDLIN( 840)		if ((strLen > otherLen)) {
HXLINE( 840)			checkLen = otherLen;
            		}
            		else {
HXLINE( 840)			checkLen = strLen;
            		}
HXLINE( 842)		{
HXLINE( 842)			int _g1 = (int)0;
HXDLIN( 842)			int _g = checkLen;
HXDLIN( 842)			while((_g1 < _g)){
HXLINE( 842)				_g1 = (_g1 + (int)1);
HXDLIN( 842)				int i = (_g1 - (int)1);
HXLINE( 843)				int _hx_tmp1 = ::haxe::Utf8_obj::charCodeAt(str,i);
HXDLIN( 843)				if ((_hx_tmp1 != ::haxe::Utf8_obj::charCodeAt(other,i))) {
HXLINE( 844)					return i;
            				}
            			}
            		}
HXLINE( 846)		return checkLen;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,diffAt,return )

::String Strings_obj::ellipsizeLeft(::String str,int maxLength,::String __o_ellipsis){
::String ellipsis = __o_ellipsis.Default(HX_HCSTRING("...","\xee","\x0f","\x23","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_863_ellipsizeLeft)
HXLINE( 864)		int _hx_tmp;
HXDLIN( 864)		if (hx::IsNull( str )) {
HXLINE( 864)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 864)			_hx_tmp = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN( 864)		if ((_hx_tmp <= maxLength)) {
HXLINE( 865)			return str;
            		}
HXLINE( 867)		int ellipsisLen;
HXDLIN( 867)		if (hx::IsNull( ellipsis )) {
HXLINE( 867)			ellipsisLen = (int)0;
            		}
            		else {
HXLINE( 867)			ellipsisLen = ::haxe::Utf8_obj::length(ellipsis);
            		}
HXLINE( 868)		if ((maxLength < ellipsisLen)) {
HXLINE( 868)			HX_STACK_DO_THROW((HX_("[maxLength] must not be smaller than ",68,6f,69,ad) + ellipsisLen));
            		}
HXLINE( 870)		return (ellipsis + ::hx::strings::Strings_obj::right(str,(maxLength - ellipsisLen)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,ellipsizeLeft,return )

::String Strings_obj::ellipsizeMiddle(::String str,int maxLength,::String __o_ellipsis){
::String ellipsis = __o_ellipsis.Default(HX_HCSTRING("...","\xee","\x0f","\x23","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_887_ellipsizeMiddle)
HXLINE( 888)		int strLen;
HXDLIN( 888)		if (hx::IsNull( str )) {
HXLINE( 888)			strLen = (int)0;
            		}
            		else {
HXLINE( 888)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE( 889)		if ((strLen <= maxLength)) {
HXLINE( 890)			return str;
            		}
HXLINE( 892)		int ellipsisLen;
HXDLIN( 892)		if (hx::IsNull( ellipsis )) {
HXLINE( 892)			ellipsisLen = (int)0;
            		}
            		else {
HXLINE( 892)			ellipsisLen = ::haxe::Utf8_obj::length(ellipsis);
            		}
HXLINE( 893)		if ((maxLength < ellipsisLen)) {
HXLINE( 893)			HX_STACK_DO_THROW((HX_("[maxLength] must not be smaller than ",68,6f,69,ad) + ellipsisLen));
            		}
HXLINE( 895)		int maxStrLen = (maxLength - ellipsisLen);
HXLINE( 896)		int leftLen = ::Math_obj::round(((Float)maxStrLen / (Float)(int)2));
HXLINE( 897)		int rightLen = (maxStrLen - leftLen);
HXLINE( 899)		::String _hx_tmp;
HXDLIN( 899)		int _hx_tmp1;
HXDLIN( 899)		if (hx::IsNull( str )) {
HXLINE( 899)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE( 899)			_hx_tmp1 = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN( 899)		if ((_hx_tmp1 <= leftLen)) {
HXLINE( 899)			_hx_tmp = str;
            		}
            		else {
HXLINE( 899)			_hx_tmp = ::hx::strings::Strings_obj::substring8(str,(int)0,leftLen);
            		}
HXDLIN( 899)		::String _hx_tmp2 = (_hx_tmp + ellipsis);
HXDLIN( 899)		return (_hx_tmp2 + ::hx::strings::Strings_obj::right(str,rightLen));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,ellipsizeMiddle,return )

::String Strings_obj::ellipsizeRight(::String str,int maxLength,::String __o_ellipsis){
::String ellipsis = __o_ellipsis.Default(HX_HCSTRING("...","\xee","\x0f","\x23","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_916_ellipsizeRight)
HXLINE( 917)		int _hx_tmp;
HXDLIN( 917)		if (hx::IsNull( str )) {
HXLINE( 917)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE( 917)			_hx_tmp = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN( 917)		if ((_hx_tmp <= maxLength)) {
HXLINE( 918)			return str;
            		}
HXLINE( 920)		int ellipsisLen;
HXDLIN( 920)		if (hx::IsNull( ellipsis )) {
HXLINE( 920)			ellipsisLen = (int)0;
            		}
            		else {
HXLINE( 920)			ellipsisLen = ::haxe::Utf8_obj::length(ellipsis);
            		}
HXLINE( 921)		if ((maxLength < ellipsisLen)) {
HXLINE( 921)			HX_STACK_DO_THROW((HX_("[maxLength] must not be smaller than ",68,6f,69,ad) + ellipsisLen));
            		}
HXLINE( 923)		int len = (maxLength - ellipsisLen);
HXDLIN( 923)		::String _hx_tmp1;
HXDLIN( 923)		int _hx_tmp2;
HXDLIN( 923)		if (hx::IsNull( str )) {
HXLINE( 923)			_hx_tmp2 = (int)0;
            		}
            		else {
HXLINE( 923)			_hx_tmp2 = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN( 923)		if ((_hx_tmp2 <= len)) {
HXLINE( 923)			_hx_tmp1 = str;
            		}
            		else {
HXLINE( 923)			_hx_tmp1 = ::hx::strings::Strings_obj::substring8(str,(int)0,len);
            		}
HXDLIN( 923)		return (_hx_tmp1 + ellipsis);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,ellipsizeRight,return )

bool Strings_obj::endsWith(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_939_endsWith)
HXLINE( 940)		bool _hx_tmp;
HXDLIN( 940)		if (hx::IsNotNull( searchIn )) {
HXLINE( 940)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 940)			_hx_tmp = true;
            		}
HXDLIN( 940)		if (_hx_tmp) {
HXLINE( 941)			return false;
            		}
HXLINE( 943)		return ::StringTools_obj::endsWith(searchIn,searchFor);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,endsWith,return )

bool Strings_obj::endsWithAny(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_960_endsWithAny)
HXLINE( 961)		bool _hx_tmp;
HXDLIN( 961)		if (hx::IsNotNull( searchIn )) {
HXLINE( 961)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 961)			_hx_tmp = true;
            		}
HXDLIN( 961)		if (_hx_tmp) {
HXLINE( 962)			return false;
            		}
HXLINE( 964)		{
HXLINE( 964)			int _g = (int)0;
HXDLIN( 964)			while((_g < searchFor->length)){
HXLINE( 964)				::String candidate = searchFor->__get(_g);
HXDLIN( 964)				_g = (_g + (int)1);
HXLINE( 965)				bool _hx_tmp1;
HXDLIN( 965)				if (hx::IsNotNull( candidate )) {
HXLINE( 965)					_hx_tmp1 = ::StringTools_obj::endsWith(searchIn,candidate);
            				}
            				else {
HXLINE( 965)					_hx_tmp1 = false;
            				}
HXDLIN( 965)				if (_hx_tmp1) {
HXLINE( 966)					return true;
            				}
            			}
            		}
HXLINE( 968)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,endsWithAny,return )

bool Strings_obj::endsWithAnyIgnoreCase(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_985_endsWithAnyIgnoreCase)
HXLINE( 986)		bool _hx_tmp;
HXDLIN( 986)		if (hx::IsNotNull( searchIn )) {
HXLINE( 986)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE( 986)			_hx_tmp = true;
            		}
HXDLIN( 986)		if (_hx_tmp) {
HXLINE( 987)			return false;
            		}
HXLINE( 989)		searchIn = ::hx::strings::Strings_obj::toLowerCase8(searchIn);
HXLINE( 990)		{
HXLINE( 990)			int _g = (int)0;
HXDLIN( 990)			while((_g < searchFor->length)){
HXLINE( 990)				::String candidate = searchFor->__get(_g);
HXDLIN( 990)				_g = (_g + (int)1);
HXLINE( 991)				bool _hx_tmp1;
HXDLIN( 991)				if (hx::IsNotNull( candidate )) {
HXLINE( 991)					_hx_tmp1 = ::StringTools_obj::endsWith(searchIn,::hx::strings::Strings_obj::toLowerCase8(candidate));
            				}
            				else {
HXLINE( 991)					_hx_tmp1 = false;
            				}
HXDLIN( 991)				if (_hx_tmp1) {
HXLINE( 992)					return true;
            				}
            			}
            		}
HXLINE( 994)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,endsWithAnyIgnoreCase,return )

bool Strings_obj::endsWithIgnoreCase(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1010_endsWithIgnoreCase)
HXLINE(1011)		bool _hx_tmp;
HXDLIN(1011)		if (hx::IsNotNull( searchIn )) {
HXLINE(1011)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(1011)			_hx_tmp = true;
            		}
HXDLIN(1011)		if (_hx_tmp) {
HXLINE(1012)			return false;
            		}
HXLINE(1014)		::String _hx_tmp1 = searchIn.toLowerCase();
HXDLIN(1014)		return ::StringTools_obj::endsWith(_hx_tmp1,searchFor.toLowerCase());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,endsWithIgnoreCase,return )

bool Strings_obj::equals(::String str,::String other){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1034_equals)
HXDLIN(1034)		return (str == other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,equals,return )

bool Strings_obj::equalsIgnoreCase(::String str,::String other){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1054_equalsIgnoreCase)
HXDLIN(1054)		::String _hx_tmp = ::hx::strings::Strings_obj::toLowerCase8(str);
HXDLIN(1054)		return (_hx_tmp == ::hx::strings::Strings_obj::toLowerCase8(other));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,equalsIgnoreCase,return )

::String Strings_obj::filter(::String str, ::Dynamic filter,::String __o_separator){
::String separator = __o_separator.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1069_filter)
HXLINE(1070)		bool _hx_tmp;
HXDLIN(1070)		if (hx::IsNotNull( str )) {
HXLINE(1070)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1070)			_hx_tmp = true;
            		}
HXDLIN(1070)		if (_hx_tmp) {
HXLINE(1071)			return str;
            		}
HXLINE(1073)		return ::hx::strings::Strings_obj::split8(str,::Array_obj< ::String >::__new(1)->init(0,separator),null())->filter(filter)->join(separator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,filter,return )

::String Strings_obj::filterChars(::String str, ::Dynamic filter){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(int ch){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1091_filterChars)
HXLINE(1091)			return ::hx::strings::_Char::Char_Impl__obj::toString(ch);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1087_filterChars)
HXLINE(1088)		bool _hx_tmp;
HXDLIN(1088)		if (hx::IsNotNull( str )) {
HXLINE(1088)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1088)			_hx_tmp = true;
            		}
HXDLIN(1088)		if (_hx_tmp) {
HXLINE(1089)			return str;
            		}
HXLINE(1091)		return ::hx::strings::Strings_obj::toChars(str)->filter(filter)->map( ::Dynamic(new _hx_Closure_0()))->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,filterChars,return )

int Strings_obj::getFuzzyDistance(::String left,::String right){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1115_getFuzzyDistance)
HXLINE(1116)		bool _hx_tmp;
HXDLIN(1116)		bool _hx_tmp1;
HXDLIN(1116)		if (hx::IsNotNull( left )) {
HXLINE(1116)			_hx_tmp1 = (left.length == (int)0);
            		}
            		else {
HXLINE(1116)			_hx_tmp1 = true;
            		}
HXDLIN(1116)		if (!(_hx_tmp1)) {
HXLINE(1116)			if (hx::IsNotNull( right )) {
HXLINE(1116)				_hx_tmp = (right.length == (int)0);
            			}
            			else {
HXLINE(1116)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1116)			_hx_tmp = true;
            		}
HXDLIN(1116)		if (_hx_tmp) {
HXLINE(1117)			return (int)0;
            		}
HXLINE(1119)		left = ::hx::strings::Strings_obj::toLowerCase8(left);
HXLINE(1120)		right = ::hx::strings::Strings_obj::toLowerCase8(right);
HXLINE(1122)		::Array< int > leftChars = ::hx::strings::Strings_obj::toChars(left);
HXLINE(1123)		::Array< int > rightChars = ::hx::strings::Strings_obj::toChars(right);
HXLINE(1124)		int leftLastMatchAt = (int)-100;
HXLINE(1125)		int rightLastMatchAt = (int)-100;
HXLINE(1127)		int score = (int)0;
HXLINE(1129)		{
HXLINE(1129)			int _g1 = (int)0;
HXDLIN(1129)			int _g = leftChars->length;
HXDLIN(1129)			while((_g1 < _g)){
HXLINE(1129)				_g1 = (_g1 + (int)1);
HXDLIN(1129)				int leftIdx = (_g1 - (int)1);
HXLINE(1130)				int leftChar = leftChars->__get(leftIdx);
HXLINE(1131)				{
HXLINE(1131)					int _g3;
HXDLIN(1131)					if ((rightLastMatchAt > (int)-1)) {
HXLINE(1131)						_g3 = (rightLastMatchAt + (int)1);
            					}
            					else {
HXLINE(1131)						_g3 = (int)0;
            					}
HXDLIN(1131)					int _g2 = rightChars->length;
HXDLIN(1131)					while((_g3 < _g2)){
HXLINE(1131)						_g3 = (_g3 + (int)1);
HXDLIN(1131)						int rightIdx = (_g3 - (int)1);
HXLINE(1132)						int rightChar = rightChars->__get(rightIdx);
HXLINE(1133)						if ((leftChar == rightChar)) {
HXLINE(1134)							score = (score + (int)1);
HXLINE(1135)							bool _hx_tmp2;
HXDLIN(1135)							if ((leftLastMatchAt == (leftIdx - (int)1))) {
HXLINE(1135)								_hx_tmp2 = (rightLastMatchAt == (rightIdx - (int)1));
            							}
            							else {
HXLINE(1135)								_hx_tmp2 = false;
            							}
HXDLIN(1135)							if (_hx_tmp2) {
HXLINE(1136)								score = (score + (int)2);
            							}
HXLINE(1138)							leftLastMatchAt = leftIdx;
HXLINE(1139)							rightLastMatchAt = rightIdx;
HXLINE(1140)							goto _hx_goto_58;
            						}
            					}
            					_hx_goto_58:;
            				}
            			}
            		}
HXLINE(1145)		return score;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,getFuzzyDistance,return )

int Strings_obj::getLevenshteinDistance(::String left,::String right){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(int a,int b){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1198_getLevenshteinDistance)
HXLINE(1198)			if ((a > b)) {
HXLINE(1198)				return b;
            			}
            			else {
HXLINE(1198)				return a;
            			}
HXDLIN(1198)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1170_getLevenshteinDistance)
HXLINE(1171)		int leftLen;
HXDLIN(1171)		if (hx::IsNull( left )) {
HXLINE(1171)			leftLen = (int)0;
            		}
            		else {
HXLINE(1171)			leftLen = ::haxe::Utf8_obj::length(left);
            		}
HXLINE(1172)		int rightLen;
HXDLIN(1172)		if (hx::IsNull( right )) {
HXLINE(1172)			rightLen = (int)0;
            		}
            		else {
HXLINE(1172)			rightLen = ::haxe::Utf8_obj::length(right);
            		}
HXLINE(1174)		if ((leftLen == (int)0)) {
HXLINE(1174)			return rightLen;
            		}
HXLINE(1175)		if ((rightLen == (int)0)) {
HXLINE(1175)			return leftLen;
            		}
HXLINE(1177)		if ((leftLen > rightLen)) {
HXLINE(1179)			::String tmp = left;
HXLINE(1180)			left = right;
HXLINE(1181)			right = tmp;
HXLINE(1182)			int tmpLen = leftLen;
HXLINE(1183)			leftLen = rightLen;
HXLINE(1184)			rightLen = tmpLen;
            		}
HXLINE(1187)		::Array< int > prevCosts = ::Array_obj< int >::__new();
HXLINE(1188)		::Array< int > costs = ::Array_obj< int >::__new();
HXLINE(1190)		{
HXLINE(1190)			int _g1 = (int)0;
HXDLIN(1190)			int _g = (leftLen + (int)1);
HXDLIN(1190)			while((_g1 < _g)){
HXLINE(1190)				_g1 = (_g1 + (int)1);
HXDLIN(1190)				int leftIdx = (_g1 - (int)1);
HXLINE(1191)				prevCosts->push(leftIdx);
HXLINE(1192)				costs->push((int)0);
            			}
            		}
HXLINE(1195)		::Array< int > leftChars = ::hx::strings::Strings_obj::toChars(left);
HXLINE(1196)		::Array< int > rightChars = ::hx::strings::Strings_obj::toChars(right);
HXLINE(1198)		 ::Dynamic min =  ::Dynamic(new _hx_Closure_0());
HXLINE(1200)		{
HXLINE(1200)			int _g11 = (int)1;
HXDLIN(1200)			int _g2 = (rightLen + (int)1);
HXDLIN(1200)			while((_g11 < _g2)){
HXLINE(1200)				_g11 = (_g11 + (int)1);
HXDLIN(1200)				int rightIdx = (_g11 - (int)1);
HXLINE(1201)				int rightChar = rightChars->__get((rightIdx - (int)1));
HXLINE(1202)				costs[(int)0] = rightIdx;
HXLINE(1204)				{
HXLINE(1204)					int _g3 = (int)1;
HXDLIN(1204)					int _g21 = (leftLen + (int)1);
HXDLIN(1204)					while((_g3 < _g21)){
HXLINE(1204)						_g3 = (_g3 + (int)1);
HXDLIN(1204)						int leftIdx1 = (_g3 - (int)1);
HXLINE(1205)						int leftIdxMinus1 = (leftIdx1 - (int)1);
HXLINE(1206)						int cost;
HXDLIN(1206)						if ((leftChars->__get(leftIdxMinus1) == rightChar)) {
HXLINE(1206)							cost = (int)0;
            						}
            						else {
HXLINE(1206)							cost = (int)1;
            						}
HXLINE(1207)						int _hx_tmp = ( (int)(min((costs->__get(leftIdxMinus1) + (int)1),(prevCosts->__get(leftIdx1) + (int)1))) );
HXDLIN(1207)						costs[leftIdx1] = ( (int)(min(_hx_tmp,(prevCosts->__get(leftIdxMinus1) + cost))) );
            					}
            				}
HXLINE(1210)				::Array< int > tmp1 = prevCosts;
HXLINE(1211)				prevCosts = costs;
HXLINE(1212)				costs = tmp1;
            			}
            		}
HXLINE(1215)		return prevCosts->__get(leftLen);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,getLevenshteinDistance,return )

::String Strings_obj::getLongestCommonSubstring(::String left,::String right){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1233_getLongestCommonSubstring)
HXLINE(1234)		bool _hx_tmp;
HXDLIN(1234)		if (hx::IsNotNull( left )) {
HXLINE(1234)			_hx_tmp = hx::IsNull( right );
            		}
            		else {
HXLINE(1234)			_hx_tmp = true;
            		}
HXDLIN(1234)		if (_hx_tmp) {
HXLINE(1235)			return null();
            		}
HXLINE(1237)		int leftLen;
HXDLIN(1237)		if (hx::IsNull( left )) {
HXLINE(1237)			leftLen = (int)0;
            		}
            		else {
HXLINE(1237)			leftLen = ::haxe::Utf8_obj::length(left);
            		}
HXLINE(1238)		int rightLen;
HXDLIN(1238)		if (hx::IsNull( right )) {
HXLINE(1238)			rightLen = (int)0;
            		}
            		else {
HXLINE(1238)			rightLen = ::haxe::Utf8_obj::length(right);
            		}
HXLINE(1240)		bool _hx_tmp1;
HXDLIN(1240)		if ((leftLen != (int)0)) {
HXLINE(1240)			_hx_tmp1 = (rightLen == (int)0);
            		}
            		else {
HXLINE(1240)			_hx_tmp1 = true;
            		}
HXDLIN(1240)		if (_hx_tmp1) {
HXLINE(1241)			return HX_("",00,00,00,00);
            		}
HXLINE(1243)		::Array< int > leftChars = ::hx::strings::Strings_obj::toChars(left);
HXLINE(1244)		::Array< int > rightChars = ::hx::strings::Strings_obj::toChars(right);
HXLINE(1246)		int leftSubStartAt = (int)0;
HXLINE(1247)		int leftSubLen = (int)0;
HXLINE(1249)		{
HXLINE(1249)			int _g1 = (int)0;
HXDLIN(1249)			int _g = leftLen;
HXDLIN(1249)			while((_g1 < _g)){
HXLINE(1249)				_g1 = (_g1 + (int)1);
HXDLIN(1249)				int leftIdx = (_g1 - (int)1);
HXLINE(1250)				{
HXLINE(1250)					int _g3 = (int)0;
HXDLIN(1250)					int _g2 = rightLen;
HXDLIN(1250)					while((_g3 < _g2)){
HXLINE(1250)						_g3 = (_g3 + (int)1);
HXDLIN(1250)						int rightIdx = (_g3 - (int)1);
HXLINE(1251)						int currLen = (int)0;
HXLINE(1252)						while((leftChars->__get((leftIdx + currLen)) == rightChars->__get((rightIdx + currLen)))){
HXLINE(1253)							currLen = (currLen + (int)1);
HXLINE(1254)							bool _hx_tmp2;
HXDLIN(1254)							if (((leftIdx + currLen) < leftLen)) {
HXLINE(1254)								_hx_tmp2 = ((rightIdx + currLen) >= rightLen);
            							}
            							else {
HXLINE(1254)								_hx_tmp2 = true;
            							}
HXDLIN(1254)							if (_hx_tmp2) {
HXLINE(1255)								goto _hx_goto_67;
            							}
            						}
            						_hx_goto_67:;
HXLINE(1257)						if ((currLen > leftSubLen)) {
HXLINE(1258)							leftSubLen = currLen;
HXLINE(1259)							leftSubStartAt = leftIdx;
            						}
            					}
            				}
            			}
            		}
HXLINE(1263)		return ::hx::strings::Strings_obj::substr8(left,leftSubStartAt,leftSubLen);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,getLongestCommonSubstring,return )

int Strings_obj::hashCode(::String str, ::hx::strings::HashCodeAlgorithm algo){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1280_hashCode)
HXLINE(1281)		bool _hx_tmp;
HXDLIN(1281)		if (hx::IsNotNull( str )) {
HXLINE(1281)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1281)			_hx_tmp = true;
            		}
HXDLIN(1281)		if (_hx_tmp) {
HXLINE(1282)			return (int)0;
            		}
HXLINE(1284)		if (hx::IsNull( algo )) {
HXLINE(1284)			algo = ::hx::strings::HashCodeAlgorithm_obj::PLATFORM_SPECIFIC_dyn();
            		}
HXLINE(1286)		if (hx::IsNull( algo )) {
HXLINE(1319)			 ::haxe::io::Bytes _hx_tmp1;
HXDLIN(1319)			if (hx::IsNull( str )) {
HXLINE(1319)				_hx_tmp1 = null();
            			}
            			else {
HXLINE(1319)				_hx_tmp1 = ::haxe::io::Bytes_obj::ofString(str,null());
            			}
HXDLIN(1319)			return ::haxe::crypto::Crc32_obj::make(_hx_tmp1);
            		}
            		else {
HXLINE(1286)			switch((int)(_hx_getEnumValueIndex(algo))){
            				case (int)1: {
HXLINE(1288)					 ::haxe::io::Bytes _hx_tmp2;
HXDLIN(1288)					if (hx::IsNull( str )) {
HXLINE(1288)						_hx_tmp2 = null();
            					}
            					else {
HXLINE(1288)						_hx_tmp2 = ::haxe::io::Bytes_obj::ofString(str,null());
            					}
HXDLIN(1288)					return ::haxe::crypto::Adler32_obj::make(_hx_tmp2);
            				}
            				break;
            				case (int)2: {
HXLINE(1291)					 ::haxe::io::Bytes _hx_tmp3;
HXDLIN(1291)					if (hx::IsNull( str )) {
HXLINE(1291)						_hx_tmp3 = null();
            					}
            					else {
HXLINE(1291)						_hx_tmp3 = ::haxe::io::Bytes_obj::ofString(str,null());
            					}
HXDLIN(1291)					return ::haxe::crypto::Crc32_obj::make(_hx_tmp3);
            				}
            				break;
            				case (int)3: {
HXLINE(1294)					int hc = (int)5381;
HXLINE(1295)					{
HXLINE(1295)						int _g = (int)0;
HXDLIN(1295)						::Array< int > _g1 = ::hx::strings::Strings_obj::toChars(str);
HXDLIN(1295)						while((_g < _g1->length)){
HXLINE(1295)							int ch = _g1->__get(_g);
HXDLIN(1295)							_g = (_g + (int)1);
HXLINE(1296)							hc = ((int)(((int)hc << (int)(int)5) + hc) ^ (int)ch);
            						}
            					}
HXLINE(1297)					return hc;
            				}
            				break;
            				case (int)4: {
HXLINE(1300)					int hc1 = (int)0;
HXLINE(1301)					{
HXLINE(1301)						int _g2 = (int)0;
HXDLIN(1301)						::Array< int > _g11 = ::hx::strings::Strings_obj::toChars(str);
HXDLIN(1301)						while((_g2 < _g11->length)){
HXLINE(1301)							int ch1 = _g11->__get(_g2);
HXDLIN(1301)							_g2 = (_g2 + (int)1);
HXLINE(1302)							hc1 = ((((int)hc1 << (int)(int)5) - hc1) + ch1);
            						}
            					}
HXLINE(1303)					return hc1;
            				}
            				break;
            				case (int)5: {
HXLINE(1306)					int hc2 = (int)0;
HXLINE(1307)					{
HXLINE(1307)						int _g3 = (int)0;
HXDLIN(1307)						::Array< int > _g12 = ::hx::strings::Strings_obj::toChars(str);
HXDLIN(1307)						while((_g3 < _g12->length)){
HXLINE(1307)							int ch2 = _g12->__get(_g3);
HXDLIN(1307)							_g3 = (_g3 + (int)1);
HXLINE(1308)							hc2 = (((((int)hc2 << (int)(int)6) + ((int)hc2 << (int)(int)16)) - hc2) + ch2);
            						}
            					}
HXLINE(1309)					return hc2;
            				}
            				break;
            				default:{
HXLINE(1319)					 ::haxe::io::Bytes _hx_tmp4;
HXDLIN(1319)					if (hx::IsNull( str )) {
HXLINE(1319)						_hx_tmp4 = null();
            					}
            					else {
HXLINE(1319)						_hx_tmp4 = ::haxe::io::Bytes_obj::ofString(str,null());
            					}
HXDLIN(1319)					return ::haxe::crypto::Crc32_obj::make(_hx_tmp4);
            				}
            			}
            		}
HXLINE(1286)		return (int)0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,hashCode,return )

::String Strings_obj::htmlDecode(::String str){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::Dynamic m){
            			HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1347_htmlDecode)
HXLINE(1348)			::String match = ::hx::strings::Matcher_obj::matched(m,null());
HXLINE(1349)			::String _hx_switch_0 = match;
            			if (  (_hx_switch_0==HX_("&amp;",dd,d4,aa,21)) ){
HXLINE(1350)				return HX_("&",26,00,00,00);
HXDLIN(1350)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("&apos;",22,7f,ca,55)) ){
HXLINE(1351)				return HX_("'",27,00,00,00);
HXDLIN(1351)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("&gt;",08,a9,6c,19)) ){
HXLINE(1352)				return HX_(">",3e,00,00,00);
HXDLIN(1352)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("&lt;",4d,74,70,19)) ){
HXLINE(1353)				return HX_("<",3c,00,00,00);
HXDLIN(1353)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("&nbsp;",64,13,c2,c8)) ){
HXLINE(1354)				return HX_(" ",20,00,00,00);
HXDLIN(1354)				goto _hx_goto_73;
            			}
            			if (  (_hx_switch_0==HX_("&quot;",2c,d9,81,8f)) ){
HXLINE(1355)				return HX_("\"",22,00,00,00);
HXDLIN(1355)				goto _hx_goto_73;
            			}
            			/* default */{
HXLINE(1357)				int ch;
HXDLIN(1357)				if (hx::IsNull( match )) {
HXLINE(1357)					ch = (int)0;
            				}
            				else {
HXLINE(1357)					ch = ::haxe::Utf8_obj::length(match);
            				}
HXDLIN(1357)				return ::hx::strings::_Char::Char_Impl__obj::toString(::Std_obj::parseInt(::hx::strings::Strings_obj::substr8(match,(int)2,(ch - (int)3))));
            			}
            			_hx_goto_73:;
HXLINE(1349)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1343_htmlDecode)
HXLINE(1344)		bool _hx_tmp;
HXDLIN(1344)		if (hx::IsNotNull( str )) {
HXLINE(1344)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1344)			_hx_tmp = true;
            		}
HXDLIN(1344)		if (_hx_tmp) {
HXLINE(1345)			return str;
            		}
HXLINE(1347)		 ::hx::strings::Pattern _this = ::hx::strings::Strings_obj::REGEX_HTML_UNESCAPE;
HXDLIN(1347)		return ::hx::strings::Matcher_obj::map( ::hx::strings::_Pattern::MatcherImpl_obj::__alloc( HX_CTX ,_this->ereg,_this->pattern,_this->options,str), ::Dynamic(new _hx_Closure_0()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,htmlDecode,return )

::String Strings_obj::htmlEncode(::String str,hx::Null< bool >  __o_escapeQuotes){
bool escapeQuotes = __o_escapeQuotes.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1379_htmlEncode)
HXLINE(1380)		bool _hx_tmp;
HXDLIN(1380)		if (hx::IsNotNull( str )) {
HXLINE(1380)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1380)			_hx_tmp = true;
            		}
HXDLIN(1380)		if (_hx_tmp) {
HXLINE(1381)			return str;
            		}
HXLINE(1383)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(1384)		bool isFirstSpace = true;
HXLINE(1385)		{
HXLINE(1385)			int _g1 = (int)0;
HXDLIN(1385)			int _g;
HXDLIN(1385)			if (hx::IsNull( str )) {
HXLINE(1385)				_g = (int)0;
            			}
            			else {
HXLINE(1385)				_g = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(1385)			while((_g1 < _g)){
HXLINE(1385)				_g1 = (_g1 + (int)1);
HXDLIN(1385)				int i = (_g1 - (int)1);
HXLINE(1386)				int ch = ::haxe::Utf8_obj::charCodeAt(str,i);
HXLINE(1387)				switch((int)(ch)){
            					case (int)32: {
HXLINE(1389)						if (isFirstSpace) {
HXLINE(1390)							{
HXLINE(1390)								{
HXLINE(1390)									 ::StringBuf _this = sb->sb;
HXDLIN(1390)									if (hx::IsNotNull( _this->charBuf )) {
HXLINE(1390)										_this->flush();
            									}
HXDLIN(1390)									if (hx::IsNull( _this->b )) {
HXLINE(1390)										_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_78,1);
            									}
            									else {
HXLINE(1390)										_this->b->push(HX_(" ",20,00,00,00));
            									}
            								}
HXDLIN(1390)								 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(1390)								int sb2 = sb1->len;
HXDLIN(1390)								sb1->len = (sb2 + ::haxe::Utf8_obj::length(HX_(" ",20,00,00,00)));
            							}
HXLINE(1391)							isFirstSpace = false;
            						}
            						else {
HXLINE(1394)							{
HXLINE(1394)								 ::StringBuf _this1 = sb->sb;
HXDLIN(1394)								if (hx::IsNotNull( _this1->charBuf )) {
HXLINE(1394)									_this1->flush();
            								}
HXDLIN(1394)								if (hx::IsNull( _this1->b )) {
HXLINE(1394)									_this1->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_79,1);
            								}
            								else {
HXLINE(1394)									_this1->b->push(HX_("&nbsp;",64,13,c2,c8));
            								}
            							}
HXDLIN(1394)							 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN(1394)							int sb4 = sb3->len;
HXDLIN(1394)							sb3->len = (sb4 + ::haxe::Utf8_obj::length(HX_("&nbsp;",64,13,c2,c8)));
            						}
            					}
            					break;
            					case (int)34: {
HXLINE(1400)						::String item;
HXDLIN(1400)						if (escapeQuotes) {
HXLINE(1400)							item = HX_("&quot;",2c,d9,81,8f);
            						}
            						else {
HXLINE(1400)							item = HX_("\"",22,00,00,00);
            						}
HXDLIN(1400)						{
HXLINE(1400)							 ::StringBuf _this2 = sb->sb;
HXDLIN(1400)							if (hx::IsNotNull( _this2->charBuf )) {
HXLINE(1400)								_this2->flush();
            							}
HXDLIN(1400)							if (hx::IsNull( _this2->b )) {
HXLINE(1400)								_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            							}
            							else {
HXLINE(1400)								::Array< ::String > _this3 = _this2->b;
HXDLIN(1400)								_this3->push(::Std_obj::string(item));
            							}
            						}
HXDLIN(1400)						 ::hx::strings::StringBuilder sb5 = sb;
HXDLIN(1400)						int sb6 = sb5->len;
HXDLIN(1400)						int _hx_tmp1;
HXDLIN(1400)						if (hx::IsNull( item )) {
HXLINE(1400)							_hx_tmp1 = (int)0;
            						}
            						else {
HXLINE(1400)							_hx_tmp1 = ::haxe::Utf8_obj::length(item);
            						}
HXDLIN(1400)						sb5->len = (sb6 + _hx_tmp1);
            					}
            					break;
            					case (int)38: {
HXLINE(1397)						{
HXLINE(1397)							 ::StringBuf _this4 = sb->sb;
HXDLIN(1397)							if (hx::IsNotNull( _this4->charBuf )) {
HXLINE(1397)								_this4->flush();
            							}
HXDLIN(1397)							if (hx::IsNull( _this4->b )) {
HXLINE(1397)								_this4->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_80,1);
            							}
            							else {
HXLINE(1397)								_this4->b->push(HX_("&amp;",dd,d4,aa,21));
            							}
            						}
HXDLIN(1397)						 ::hx::strings::StringBuilder sb7 = sb;
HXDLIN(1397)						int sb8 = sb7->len;
HXDLIN(1397)						sb7->len = (sb8 + ::haxe::Utf8_obj::length(HX_("&amp;",dd,d4,aa,21)));
            					}
            					break;
            					case (int)39: {
HXLINE(1404)						::String item1;
HXDLIN(1404)						if (escapeQuotes) {
HXLINE(1404)							item1 = HX_("&#039;",62,26,77,78);
            						}
            						else {
HXLINE(1404)							item1 = HX_("'",27,00,00,00);
            						}
HXDLIN(1404)						{
HXLINE(1404)							 ::StringBuf _this5 = sb->sb;
HXDLIN(1404)							if (hx::IsNotNull( _this5->charBuf )) {
HXLINE(1404)								_this5->flush();
            							}
HXDLIN(1404)							if (hx::IsNull( _this5->b )) {
HXLINE(1404)								_this5->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item1));
            							}
            							else {
HXLINE(1404)								::Array< ::String > _this6 = _this5->b;
HXDLIN(1404)								_this6->push(::Std_obj::string(item1));
            							}
            						}
HXDLIN(1404)						 ::hx::strings::StringBuilder sb9 = sb;
HXDLIN(1404)						int sb10 = sb9->len;
HXDLIN(1404)						int _hx_tmp2;
HXDLIN(1404)						if (hx::IsNull( item1 )) {
HXLINE(1404)							_hx_tmp2 = (int)0;
            						}
            						else {
HXLINE(1404)							_hx_tmp2 = ::haxe::Utf8_obj::length(item1);
            						}
HXDLIN(1404)						sb9->len = (sb10 + _hx_tmp2);
            					}
            					break;
            					case (int)60: {
HXLINE(1407)						{
HXLINE(1407)							 ::StringBuf _this7 = sb->sb;
HXDLIN(1407)							if (hx::IsNotNull( _this7->charBuf )) {
HXLINE(1407)								_this7->flush();
            							}
HXDLIN(1407)							if (hx::IsNull( _this7->b )) {
HXLINE(1407)								_this7->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_81,1);
            							}
            							else {
HXLINE(1407)								_this7->b->push(HX_("&lt;",4d,74,70,19));
            							}
            						}
HXDLIN(1407)						 ::hx::strings::StringBuilder sb11 = sb;
HXDLIN(1407)						int sb12 = sb11->len;
HXDLIN(1407)						sb11->len = (sb12 + ::haxe::Utf8_obj::length(HX_("&lt;",4d,74,70,19)));
            					}
            					break;
            					case (int)62: {
HXLINE(1410)						{
HXLINE(1410)							 ::StringBuf _this8 = sb->sb;
HXDLIN(1410)							if (hx::IsNotNull( _this8->charBuf )) {
HXLINE(1410)								_this8->flush();
            							}
HXDLIN(1410)							if (hx::IsNull( _this8->b )) {
HXLINE(1410)								_this8->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_82,1);
            							}
            							else {
HXLINE(1410)								_this8->b->push(HX_("&gt;",08,a9,6c,19));
            							}
            						}
HXDLIN(1410)						 ::hx::strings::StringBuilder sb13 = sb;
HXDLIN(1410)						int sb14 = sb13->len;
HXDLIN(1410)						sb13->len = (sb14 + ::haxe::Utf8_obj::length(HX_("&gt;",08,a9,6c,19)));
            					}
            					break;
            					default:{
HXLINE(1413)						if ((ch > (int)127)) {
HXLINE(1414)							::String item2 = ((HX_("&#",3d,21,00,00) + ch) + HX_(";",3b,00,00,00));
HXDLIN(1414)							{
HXLINE(1414)								 ::StringBuf _this9 = sb->sb;
HXDLIN(1414)								if (hx::IsNotNull( _this9->charBuf )) {
HXLINE(1414)									_this9->flush();
            								}
HXDLIN(1414)								if (hx::IsNull( _this9->b )) {
HXLINE(1414)									_this9->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item2));
            								}
            								else {
HXLINE(1414)									::Array< ::String > _this10 = _this9->b;
HXDLIN(1414)									_this10->push(::Std_obj::string(item2));
            								}
            							}
HXDLIN(1414)							 ::hx::strings::StringBuilder sb15 = sb;
HXDLIN(1414)							int sb16 = sb15->len;
HXDLIN(1414)							int _hx_tmp3;
HXDLIN(1414)							if (hx::IsNull( item2 )) {
HXLINE(1414)								_hx_tmp3 = (int)0;
            							}
            							else {
HXLINE(1414)								_hx_tmp3 = ::haxe::Utf8_obj::length(item2);
            							}
HXDLIN(1414)							sb15->len = (sb16 + _hx_tmp3);
            						}
            						else {
HXLINE(1416)							sb->addChar(ch);
            						}
            					}
            				}
HXLINE(1419)				if ((ch != (int)32)) {
HXLINE(1420)					isFirstSpace = true;
            				}
            			}
            		}
HXLINE(1423)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,htmlEncode,return )

::String Strings_obj::insertAt(::String str,int pos,::String insertion){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1444_insertAt)
HXLINE(1445)		if (hx::IsNull( str )) {
HXLINE(1446)			return null();
            		}
HXLINE(1448)		int strLen;
HXDLIN(1448)		if (hx::IsNull( str )) {
HXLINE(1448)			strLen = (int)0;
            		}
            		else {
HXLINE(1448)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(1449)		if ((pos < (int)0)) {
HXLINE(1449)			pos = (strLen + pos);
            		}
            		else {
HXLINE(1449)			pos = pos;
            		}
HXLINE(1451)		bool _hx_tmp;
HXDLIN(1451)		if ((pos >= (int)0)) {
HXLINE(1451)			_hx_tmp = (pos > strLen);
            		}
            		else {
HXLINE(1451)			_hx_tmp = true;
            		}
HXDLIN(1451)		if (_hx_tmp) {
HXLINE(1452)			HX_STACK_DO_THROW(HX_("Absolute value of [pos] must be <= str.length",8f,67,7d,63));
            		}
HXLINE(1454)		bool _hx_tmp1;
HXDLIN(1454)		if (hx::IsNotNull( insertion )) {
HXLINE(1454)			_hx_tmp1 = (insertion.length == (int)0);
            		}
            		else {
HXLINE(1454)			_hx_tmp1 = true;
            		}
HXDLIN(1454)		if (_hx_tmp1) {
HXLINE(1455)			return str;
            		}
HXLINE(1457)		::String _hx_tmp2 = (::hx::strings::Strings_obj::substring8(str,(int)0,pos) + insertion);
HXDLIN(1457)		return (_hx_tmp2 + ::hx::strings::Strings_obj::substring8(str,pos,null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,insertAt,return )

::String Strings_obj::ifBlank(::String str,::String fallback){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1478_ifBlank)
HXDLIN(1478)		bool _hx_tmp;
HXDLIN(1478)		if (hx::IsNull( str )) {
HXDLIN(1478)			_hx_tmp = true;
            		}
            		else {
HXDLIN(1478)			_hx_tmp = (::StringTools_obj::trim(str).length == (int)0);
            		}
HXDLIN(1478)		if (_hx_tmp) {
HXDLIN(1478)			return fallback;
            		}
            		else {
HXDLIN(1478)			return str;
            		}
HXDLIN(1478)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,ifBlank,return )

::String Strings_obj::ifEmpty(::String str,::String fallback){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1499_ifEmpty)
HXDLIN(1499)		bool _hx_tmp;
HXDLIN(1499)		if (hx::IsNotNull( str )) {
HXDLIN(1499)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXDLIN(1499)			_hx_tmp = true;
            		}
HXDLIN(1499)		if (_hx_tmp) {
HXDLIN(1499)			return fallback;
            		}
            		else {
HXDLIN(1499)			return str;
            		}
HXDLIN(1499)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,ifEmpty,return )

::String Strings_obj::ifNull(::String str,::String fallback){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1517_ifNull)
HXDLIN(1517)		if (hx::IsNull( str )) {
HXDLIN(1517)			return fallback;
            		}
            		else {
HXDLIN(1517)			return str;
            		}
HXDLIN(1517)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,ifNull,return )

::String Strings_obj::indentLines(::String str,::String indentWith){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1534_indentLines)
HXLINE(1535)		if (hx::IsNull( str )) {
HXLINE(1536)			return null();
            		}
HXLINE(1538)		bool _hx_tmp;
HXDLIN(1538)		if ((str.length != (int)0)) {
HXLINE(1538)			if (hx::IsNotNull( indentWith )) {
HXLINE(1538)				_hx_tmp = (indentWith.length == (int)0);
            			}
            			else {
HXLINE(1538)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(1538)			_hx_tmp = true;
            		}
HXDLIN(1538)		if (_hx_tmp) {
HXLINE(1539)			return str;
            		}
HXLINE(1541)		bool isFirstLine = true;
HXLINE(1542)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(1543)		{
HXLINE(1543)			int _g = (int)0;
HXDLIN(1543)			::Array< ::String > _g1 = ::hx::strings::Strings_obj::REGEX_SPLIT_LINES->ereg->split(str);
HXDLIN(1543)			while((_g < _g1->length)){
HXLINE(1543)				::String line = _g1->__get(_g);
HXDLIN(1543)				_g = (_g + (int)1);
HXLINE(1544)				if (isFirstLine) {
HXLINE(1545)					isFirstLine = false;
            				}
            				else {
HXLINE(1547)					{
HXLINE(1547)						 ::StringBuf _this = sb->sb;
HXDLIN(1547)						if (hx::IsNotNull( _this->charBuf )) {
HXLINE(1547)							_this->flush();
            						}
HXDLIN(1547)						if (hx::IsNull( _this->b )) {
HXLINE(1547)							_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_89,1);
            						}
            						else {
HXLINE(1547)							_this->b->push(HX_("\n",0a,00,00,00));
            						}
            					}
HXDLIN(1547)					sb->len++;
            				}
HXLINE(1548)				{
HXLINE(1548)					{
HXLINE(1548)						 ::StringBuf _this1 = sb->sb;
HXDLIN(1548)						if (hx::IsNotNull( _this1->charBuf )) {
HXLINE(1548)							_this1->flush();
            						}
HXDLIN(1548)						if (hx::IsNull( _this1->b )) {
HXLINE(1548)							_this1->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(indentWith));
            						}
            						else {
HXLINE(1548)							::Array< ::String > _this2 = _this1->b;
HXDLIN(1548)							_this2->push(::Std_obj::string(indentWith));
            						}
            					}
HXDLIN(1548)					 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(1548)					int sb2 = sb1->len;
HXDLIN(1548)					int _hx_tmp1;
HXDLIN(1548)					if (hx::IsNull( indentWith )) {
HXLINE(1548)						_hx_tmp1 = (int)0;
            					}
            					else {
HXLINE(1548)						_hx_tmp1 = ::haxe::Utf8_obj::length(indentWith);
            					}
HXDLIN(1548)					sb1->len = (sb2 + _hx_tmp1);
            				}
HXLINE(1549)				{
HXLINE(1549)					{
HXLINE(1549)						 ::StringBuf _this3 = sb->sb;
HXDLIN(1549)						if (hx::IsNotNull( _this3->charBuf )) {
HXLINE(1549)							_this3->flush();
            						}
HXDLIN(1549)						if (hx::IsNull( _this3->b )) {
HXLINE(1549)							_this3->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(line));
            						}
            						else {
HXLINE(1549)							::Array< ::String > _this4 = _this3->b;
HXDLIN(1549)							_this4->push(::Std_obj::string(line));
            						}
            					}
HXDLIN(1549)					 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN(1549)					int sb4 = sb3->len;
HXDLIN(1549)					int _hx_tmp2;
HXDLIN(1549)					if (hx::IsNull( line )) {
HXLINE(1549)						_hx_tmp2 = (int)0;
            					}
            					else {
HXLINE(1549)						_hx_tmp2 = ::haxe::Utf8_obj::length(line);
            					}
HXDLIN(1549)					sb3->len = (sb4 + _hx_tmp2);
            				}
            			}
            		}
HXLINE(1551)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,indentLines,return )

int Strings_obj::indexOf8(::String str,::String searchFor,hx::Null< int >  __o_startAt){
int startAt = __o_startAt.Default(0);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1599_indexOf8)
HXLINE(1600)		bool _hx_tmp;
HXDLIN(1600)		if (hx::IsNotNull( str )) {
HXLINE(1600)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(1600)			_hx_tmp = true;
            		}
HXDLIN(1600)		if (_hx_tmp) {
HXLINE(1601)			return (int)-1;
            		}
HXLINE(1603)		int strLen;
HXDLIN(1603)		if (hx::IsNull( str )) {
HXLINE(1603)			strLen = (int)0;
            		}
            		else {
HXLINE(1603)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(1604)		int searchForLen;
HXDLIN(1604)		if (hx::IsNull( searchFor )) {
HXLINE(1604)			searchForLen = (int)0;
            		}
            		else {
HXLINE(1604)			searchForLen = ::haxe::Utf8_obj::length(searchFor);
            		}
HXLINE(1607)		if ((startAt < (int)0)) {
HXLINE(1608)			startAt = (int)0;
            		}
HXLINE(1611)		if ((searchForLen == (int)0)) {
HXLINE(1612)			if ((startAt == (int)0)) {
HXLINE(1613)				return (int)0;
            			}
HXLINE(1614)			bool _hx_tmp1;
HXDLIN(1614)			if ((startAt > (int)0)) {
HXLINE(1614)				_hx_tmp1 = (startAt < strLen);
            			}
            			else {
HXLINE(1614)				_hx_tmp1 = false;
            			}
HXDLIN(1614)			if (_hx_tmp1) {
HXLINE(1615)				return startAt;
            			}
HXLINE(1617)			return strLen;
            		}
HXLINE(1621)		if ((startAt >= strLen)) {
HXLINE(1622)			return (int)-1;
            		}
HXLINE(1635)		bool strNeedsUTF8Workaround = (str.length != strLen);
HXLINE(1636)		bool searchForNeedsUTF8Workaround = (searchFor.length != searchForLen);
HXLINE(1639)		bool _hx_tmp2;
HXDLIN(1639)		if (!(strNeedsUTF8Workaround)) {
HXLINE(1639)			_hx_tmp2 = !(searchForNeedsUTF8Workaround);
            		}
            		else {
HXLINE(1639)			_hx_tmp2 = false;
            		}
HXDLIN(1639)		if (_hx_tmp2) {
HXLINE(1640)			return str.indexOf(searchFor,startAt);
            		}
HXLINE(1642)		bool _hx_tmp3;
HXDLIN(1642)		if (searchForNeedsUTF8Workaround) {
HXLINE(1642)			_hx_tmp3 = !(strNeedsUTF8Workaround);
            		}
            		else {
HXLINE(1642)			_hx_tmp3 = false;
            		}
HXDLIN(1642)		if (_hx_tmp3) {
HXLINE(1644)			return (int)-1;
            		}
HXLINE(1646)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(1646)		{
HXLINE(1646)			int _g2 = (int)0;
HXDLIN(1646)			int _g1 = searchForLen;
HXDLIN(1646)			while((_g2 < _g1)){
HXLINE(1646)				_g2 = (_g2 + (int)1);
HXDLIN(1646)				int i = (_g2 - (int)1);
HXDLIN(1646)				_g->push(::haxe::Utf8_obj::charCodeAt(searchFor,i));
            			}
            		}
HXDLIN(1646)		::Array< int > searchForChars = _g;
HXLINE(1648)		int searchForPosToCheck = (int)0;
HXLINE(1649)		{
HXLINE(1649)			int _g21 = startAt;
HXDLIN(1649)			int _g11 = strLen;
HXDLIN(1649)			while((_g21 < _g11)){
HXLINE(1649)				_g21 = (_g21 + (int)1);
HXDLIN(1649)				int strPos = (_g21 - (int)1);
HXLINE(1650)				int strLen1;
HXDLIN(1650)				if (hx::IsNull( str )) {
HXLINE(1650)					strLen1 = (int)0;
            				}
            				else {
HXLINE(1650)					strLen1 = ::haxe::Utf8_obj::length(str);
            				}
HXDLIN(1650)				int strCh;
HXDLIN(1650)				bool strCh1;
HXDLIN(1650)				bool strCh2;
HXDLIN(1650)				if ((strLen1 != (int)0)) {
HXLINE(1650)					strCh2 = (strPos < (int)0);
            				}
            				else {
HXLINE(1650)					strCh2 = true;
            				}
HXDLIN(1650)				if (!(strCh2)) {
HXLINE(1650)					strCh1 = (strPos >= strLen1);
            				}
            				else {
HXLINE(1650)					strCh1 = true;
            				}
HXDLIN(1650)				if (strCh1) {
HXLINE(1650)					strCh = (int)-1;
            				}
            				else {
HXLINE(1650)					strCh = ::haxe::Utf8_obj::charCodeAt(str,strPos);
            				}
HXLINE(1651)				if ((strCh == searchForChars->__get(searchForPosToCheck))) {
HXLINE(1652)					searchForPosToCheck = (searchForPosToCheck + (int)1);
HXLINE(1653)					if ((searchForPosToCheck == searchForLen)) {
HXLINE(1654)						return ((strPos - searchForPosToCheck) + (int)1);
            					}
            				}
            				else {
HXLINE(1656)					searchForPosToCheck = (int)0;
            				}
            			}
            		}
HXLINE(1659)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,indexOf8,return )

bool Strings_obj::isBlank(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1679_isBlank)
HXDLIN(1679)		if (hx::IsNull( str )) {
HXDLIN(1679)			return true;
            		}
            		else {
HXDLIN(1679)			return (::StringTools_obj::trim(str).length == (int)0);
            		}
HXDLIN(1679)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isBlank,return )

bool Strings_obj::isDigits(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1696_isDigits)
HXLINE(1704)		bool _hx_tmp;
HXDLIN(1704)		if (hx::IsNotNull( str )) {
HXLINE(1704)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1704)			_hx_tmp = true;
            		}
HXDLIN(1704)		if (_hx_tmp) {
HXLINE(1705)			return false;
            		}
HXLINE(1707)		{
HXLINE(1707)			int _g1 = (int)0;
HXDLIN(1707)			int _g;
HXDLIN(1707)			if (hx::IsNull( str )) {
HXLINE(1707)				_g = (int)0;
            			}
            			else {
HXLINE(1707)				_g = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(1707)			while((_g1 < _g)){
HXLINE(1707)				_g1 = (_g1 + (int)1);
HXDLIN(1707)				int i = (_g1 - (int)1);
HXLINE(1708)				int this1 = ::haxe::Utf8_obj::charCodeAt(str,i);
HXDLIN(1708)				bool _hx_tmp1;
HXDLIN(1708)				if ((this1 > (int)47)) {
HXLINE(1708)					_hx_tmp1 = (this1 < (int)58);
            				}
            				else {
HXLINE(1708)					_hx_tmp1 = false;
            				}
HXDLIN(1708)				if (!(_hx_tmp1)) {
HXLINE(1709)					return false;
            				}
            			}
            		}
HXLINE(1711)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isDigits,return )

bool Strings_obj::isEmpty(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1729_isEmpty)
HXDLIN(1729)		if (hx::IsNotNull( str )) {
HXDLIN(1729)			return (str.length == (int)0);
            		}
            		else {
HXDLIN(1729)			return true;
            		}
HXDLIN(1729)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isEmpty,return )

bool Strings_obj::isNotBlank(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1746_isNotBlank)
HXDLIN(1746)		if (hx::IsNotNull( str )) {
HXDLIN(1746)			return (::StringTools_obj::trim(str).length > (int)0);
            		}
            		else {
HXDLIN(1746)			return false;
            		}
HXDLIN(1746)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isNotBlank,return )

bool Strings_obj::isNotEmpty(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1763_isNotEmpty)
HXDLIN(1763)		if (hx::IsNotNull( str )) {
HXDLIN(1763)			return (str.length > (int)0);
            		}
            		else {
HXDLIN(1763)			return false;
            		}
HXDLIN(1763)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isNotEmpty,return )

bool Strings_obj::isLowerCase(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1776_isLowerCase)
HXLINE(1777)		bool _hx_tmp;
HXDLIN(1777)		if (hx::IsNotNull( str )) {
HXLINE(1777)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1777)			_hx_tmp = true;
            		}
HXDLIN(1777)		if (_hx_tmp) {
HXLINE(1778)			return false;
            		}
HXLINE(1780)		return (str == ::hx::strings::Strings_obj::toLowerCase8(str));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isLowerCase,return )

bool Strings_obj::isUpperCase(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1793_isUpperCase)
HXLINE(1794)		bool _hx_tmp;
HXDLIN(1794)		if (hx::IsNotNull( str )) {
HXLINE(1794)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1794)			_hx_tmp = true;
            		}
HXDLIN(1794)		if (_hx_tmp) {
HXLINE(1795)			return false;
            		}
HXLINE(1797)		return (str == ::hx::strings::Strings_obj::toUpperCase8(str));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,isUpperCase,return )

void Strings_obj::iterate(::String str, ::Dynamic callback,::String __o_separator){
::String separator = __o_separator.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1803_iterate)
HXLINE(1804)		bool _hx_tmp;
HXDLIN(1804)		if (hx::IsNotNull( str )) {
HXLINE(1804)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1804)			_hx_tmp = true;
            		}
HXDLIN(1804)		if (_hx_tmp) {
HXLINE(1805)			return;
            		}
HXLINE(1807)		{
HXLINE(1807)			int _g = (int)0;
HXDLIN(1807)			::Array< ::String > _g1 = ::hx::strings::Strings_obj::split8(str,::Array_obj< ::String >::__new(1)->init(0,separator),null());
HXDLIN(1807)			while((_g < _g1->length)){
HXLINE(1807)				::String sub = _g1->__get(_g);
HXDLIN(1807)				_g = (_g + (int)1);
HXLINE(1808)				callback(sub);
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,iterate,(void))

void Strings_obj::iterateChars(::String str, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1815_iterateChars)
HXLINE(1816)		bool _hx_tmp;
HXDLIN(1816)		if (hx::IsNotNull( str )) {
HXLINE(1816)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(1816)			_hx_tmp = true;
            		}
HXDLIN(1816)		if (_hx_tmp) {
HXLINE(1817)			return;
            		}
HXLINE(1819)		{
HXLINE(1819)			int _g1 = (int)0;
HXDLIN(1819)			int _g;
HXDLIN(1819)			if (hx::IsNull( str )) {
HXLINE(1819)				_g = (int)0;
            			}
            			else {
HXLINE(1819)				_g = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(1819)			while((_g1 < _g)){
HXLINE(1819)				_g1 = (_g1 + (int)1);
HXDLIN(1819)				int i = (_g1 - (int)1);
HXLINE(1820)				callback(::haxe::Utf8_obj::charCodeAt(str,i));
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,iterateChars,(void))

int Strings_obj::lastIndexOf8(::String str,::String searchFor, ::Dynamic startAt){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1872_lastIndexOf8)
HXLINE(1873)		bool _hx_tmp;
HXDLIN(1873)		if (hx::IsNotNull( str )) {
HXLINE(1873)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(1873)			_hx_tmp = true;
            		}
HXDLIN(1873)		if (_hx_tmp) {
HXLINE(1874)			return (int)-1;
            		}
HXLINE(1876)		int strLen;
HXDLIN(1876)		if (hx::IsNull( str )) {
HXLINE(1876)			strLen = (int)0;
            		}
            		else {
HXLINE(1876)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(1877)		int searchForLen;
HXDLIN(1877)		if (hx::IsNull( searchFor )) {
HXLINE(1877)			searchForLen = (int)0;
            		}
            		else {
HXLINE(1877)			searchForLen = ::haxe::Utf8_obj::length(searchFor);
            		}
HXLINE(1879)		if (hx::IsNull( startAt )) {
HXLINE(1880)			startAt = strLen;
            		}
HXLINE(1883)		if ((searchForLen == (int)0)) {
HXLINE(1884)			if (hx::IsLess( startAt,(int)0 )) {
HXLINE(1885)				return (int)0;
            			}
HXLINE(1886)			if (hx::IsGreater( startAt,strLen )) {
HXLINE(1887)				return strLen;
            			}
HXLINE(1888)			return startAt;
            		}
HXLINE(1892)		if (hx::IsLess( startAt,(int)0 )) {
HXLINE(1893)			return (int)-1;
            		}
            		else {
HXLINE(1895)			if (hx::IsGreaterEq( startAt,strLen )) {
HXLINE(1896)				startAt = (strLen - (int)1);
            			}
            		}
HXLINE(1902)		bool strNeedsUTF8Workaround = (str.length != strLen);
HXLINE(1903)		bool searchForNeedsUTF8Workaround = (searchFor.length != searchForLen);
HXLINE(1907)		bool _hx_tmp1;
HXDLIN(1907)		if (!(strNeedsUTF8Workaround)) {
HXLINE(1907)			_hx_tmp1 = !(searchForNeedsUTF8Workaround);
            		}
            		else {
HXLINE(1907)			_hx_tmp1 = false;
            		}
HXDLIN(1907)		if (_hx_tmp1) {
HXLINE(1908)			return str.lastIndexOf(searchFor,startAt);
            		}
HXLINE(1912)		bool _hx_tmp2;
HXDLIN(1912)		if (searchForNeedsUTF8Workaround) {
HXLINE(1912)			_hx_tmp2 = !(strNeedsUTF8Workaround);
            		}
            		else {
HXLINE(1912)			_hx_tmp2 = false;
            		}
HXDLIN(1912)		if (_hx_tmp2) {
HXLINE(1914)			return (int)-1;
            		}
HXLINE(1916)		::Array< int > searchForChars = ::hx::strings::Strings_obj::toChars(searchFor);
HXLINE(1917)		startAt = (startAt + (searchForLen - (int)1));
HXLINE(1919)		int searchForPosToCheck = (searchForLen - (int)1);
HXLINE(1920)		int strPos = strLen;
HXLINE(1921)		while(true){
HXLINE(1921)			strPos = (strPos - (int)1);
HXDLIN(1921)			if (!(((strPos + (int)1) > (int)0))) {
HXLINE(1921)				goto _hx_goto_105;
            			}
HXLINE(1922)			if (hx::IsGreater( strPos,startAt )) {
HXLINE(1922)				continue;
            			}
HXLINE(1923)			int strCh = ::haxe::Utf8_obj::charCodeAt(str,strPos);
HXLINE(1925)			if ((strCh == searchForChars->__get(searchForPosToCheck))) {
HXLINE(1926)				if ((searchForPosToCheck == (int)0)) {
HXLINE(1927)					return strPos;
            				}
HXLINE(1928)				searchForPosToCheck = (searchForPosToCheck - (int)1);
            			}
            			else {
HXLINE(1930)				searchForPosToCheck = (searchForLen - (int)1);
            			}
            		}
            		_hx_goto_105:;
HXLINE(1933)		return (int)-1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,lastIndexOf8,return )

int Strings_obj::length8(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1948_length8)
HXLINE(1949)		if (hx::IsNull( str )) {
HXLINE(1950)			return (int)0;
            		}
HXLINE(1961)		return ::haxe::Utf8_obj::length(str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,length8,return )

::String Strings_obj::left(::String str,int len){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_1980_left)
HXLINE(1981)		int _hx_tmp;
HXDLIN(1981)		if (hx::IsNull( str )) {
HXLINE(1981)			_hx_tmp = (int)0;
            		}
            		else {
HXLINE(1981)			_hx_tmp = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN(1981)		if ((_hx_tmp <= len)) {
HXLINE(1982)			return str;
            		}
HXLINE(1984)		return ::hx::strings::Strings_obj::substring8(str,(int)0,len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,left,return )

::String Strings_obj::lpad(::String str,int targetLength,::String __o_padStr,hx::Null< bool >  __o_canOverflow){
::String padStr = __o_padStr.Default(HX_HCSTRING(" ","\x20","\x00","\x00","\x00"));
bool canOverflow = __o_canOverflow.Default(true);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2006_lpad)
HXLINE(2007)		int strLen;
HXDLIN(2007)		if (hx::IsNull( str )) {
HXLINE(2007)			strLen = (int)0;
            		}
            		else {
HXLINE(2007)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(2008)		bool _hx_tmp;
HXDLIN(2008)		if (hx::IsNotNull( str )) {
HXLINE(2008)			_hx_tmp = (strLen > targetLength);
            		}
            		else {
HXLINE(2008)			_hx_tmp = true;
            		}
HXDLIN(2008)		if (_hx_tmp) {
HXLINE(2009)			return str;
            		}
HXLINE(2011)		bool _hx_tmp1;
HXDLIN(2011)		if (hx::IsNotNull( padStr )) {
HXLINE(2011)			_hx_tmp1 = (padStr.length == (int)0);
            		}
            		else {
HXLINE(2011)			_hx_tmp1 = true;
            		}
HXDLIN(2011)		if (_hx_tmp1) {
HXLINE(2012)			padStr = HX_(" ",20,00,00,00);
            		}
HXLINE(2014)		::Array< ::String > sb = ::Array_obj< ::String >::__new(1)->init(0,str);
HXLINE(2015)		int padLen;
HXDLIN(2015)		if (hx::IsNull( padStr )) {
HXLINE(2015)			padLen = (int)0;
            		}
            		else {
HXLINE(2015)			padLen = ::haxe::Utf8_obj::length(padStr);
            		}
HXLINE(2016)		while((strLen < targetLength)){
HXLINE(2017)			sb->unshift(padStr);
HXLINE(2018)			strLen = (strLen + padLen);
            		}
HXLINE(2021)		if (canOverflow) {
HXLINE(2022)			return sb->join(HX_("",00,00,00,00));
            		}
HXLINE(2024)		return ::hx::strings::Strings_obj::right(sb->join(HX_("",00,00,00,00)),targetLength);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,lpad,return )

::cpp::VirtualArray Strings_obj::map(::String str, ::Dynamic mapper,::String __o_separator){
::String separator = __o_separator.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2039_map)
HXLINE(2040)		if (hx::IsNull( str )) {
HXLINE(2041)			return null();
            		}
HXLINE(2043)		if (hx::IsNull( separator )) {
HXLINE(2044)			HX_STACK_DO_THROW(HX_("[seperator] must not be null",29,80,48,7a));
            		}
HXLINE(2046)		return ::hx::strings::Strings_obj::split8(str,::Array_obj< ::String >::__new(1)->init(0,separator),null())->map(mapper);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,map,return )

::String Strings_obj::prependIfMissing(::String str,::String suffix){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2061_prependIfMissing)
HXLINE(2062)		if (hx::IsNull( str )) {
HXLINE(2063)			return null();
            		}
HXLINE(2065)		if ((str.length == (int)0)) {
HXLINE(2066)			return (suffix + str);
            		}
HXLINE(2068)		if (::hx::strings::Strings_obj::startsWith(str,suffix)) {
HXLINE(2069)			return str;
            		}
HXLINE(2071)		return (suffix + str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,prependIfMissing,return )

::String Strings_obj::quoteDouble(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2086_quoteDouble)
HXLINE(2087)		if (hx::IsNull( str )) {
HXLINE(2088)			return str;
            		}
HXLINE(2090)		if ((str.length == (int)0)) {
HXLINE(2091)			return HX_("\"\"",c0,1d,00,00);
            		}
HXLINE(2093)		bool _hx_tmp;
HXDLIN(2093)		if (hx::IsNull( str )) {
HXLINE(2093)			_hx_tmp = false;
            		}
            		else {
HXLINE(2093)			_hx_tmp = (str.indexOf(HX_("\"",22,00,00,00),null()) > (int)-1);
            		}
HXDLIN(2093)		if (!(_hx_tmp)) {
HXLINE(2094)			return ((HX_("\"",22,00,00,00) + str) + HX_("\"",22,00,00,00));
            		}
HXLINE(2096)		return ((HX_("\"",22,00,00,00) + ::hx::strings::Strings_obj::replaceAll(str,HX_("\"",22,00,00,00),HX_("\\\"",46,50,00,00))) + HX_("\"",22,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,quoteDouble,return )

::String Strings_obj::quoteSingle(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2111_quoteSingle)
HXLINE(2112)		if (hx::IsNull( str )) {
HXLINE(2113)			return str;
            		}
HXLINE(2115)		if ((str.length == (int)0)) {
HXLINE(2116)			return HX_("''",20,22,00,00);
            		}
HXLINE(2118)		bool _hx_tmp;
HXDLIN(2118)		if (hx::IsNull( str )) {
HXLINE(2118)			_hx_tmp = false;
            		}
            		else {
HXLINE(2118)			_hx_tmp = (str.indexOf(HX_("'",27,00,00,00),null()) > (int)-1);
            		}
HXDLIN(2118)		if (!(_hx_tmp)) {
HXLINE(2119)			return ((HX_("'",27,00,00,00) + str) + HX_("'",27,00,00,00));
            		}
HXLINE(2121)		return ((HX_("'",27,00,00,00) + ::hx::strings::Strings_obj::replaceAll(str,HX_("'",27,00,00,00),HX_("\\'",4b,50,00,00))) + HX_("'",27,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,quoteSingle,return )

::String Strings_obj::removeAfter(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2129_removeAfter)
HXDLIN(2129)		return ::hx::strings::Strings_obj::substringBefore(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeAfter,return )

::String Strings_obj::removeAfterLast(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2137_removeAfterLast)
HXDLIN(2137)		return ::hx::strings::Strings_obj::substringBeforeLast(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeAfterLast,return )

::String Strings_obj::removeAfterIgnoreCase(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2145_removeAfterIgnoreCase)
HXDLIN(2145)		return ::hx::strings::Strings_obj::substringBeforeIgnoreCase(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeAfterIgnoreCase,return )

::String Strings_obj::removeAfterLastIgnoreCase(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2153_removeAfterLastIgnoreCase)
HXDLIN(2153)		return ::hx::strings::Strings_obj::substringBeforeLastIgnoreCase(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeAfterLastIgnoreCase,return )

::String Strings_obj::removeAt(::String str,int pos,int length){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2176_removeAt)
HXLINE(2177)		bool _hx_tmp;
HXDLIN(2177)		bool _hx_tmp1;
HXDLIN(2177)		if (hx::IsNotNull( str )) {
HXLINE(2177)			_hx_tmp1 = (str.length == (int)0);
            		}
            		else {
HXLINE(2177)			_hx_tmp1 = true;
            		}
HXDLIN(2177)		if (!(_hx_tmp1)) {
HXLINE(2177)			_hx_tmp = (length < (int)1);
            		}
            		else {
HXLINE(2177)			_hx_tmp = true;
            		}
HXDLIN(2177)		if (_hx_tmp) {
HXLINE(2178)			return str;
            		}
HXLINE(2180)		int strLen;
HXDLIN(2180)		if (hx::IsNull( str )) {
HXLINE(2180)			strLen = (int)0;
            		}
            		else {
HXLINE(2180)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(2181)		if ((pos < (int)0)) {
HXLINE(2181)			pos = (strLen + pos);
            		}
            		else {
HXLINE(2181)			pos = pos;
            		}
HXLINE(2183)		if ((pos < (int)0)) {
HXLINE(2184)			HX_STACK_DO_THROW(HX_("[pos] must be smaller than -1 * str.length",44,b5,28,65));
            		}
HXLINE(2186)		if (((pos + length) >= strLen)) {
HXLINE(2187)			return ::hx::strings::Strings_obj::substring8(str,(int)0,pos);
            		}
HXLINE(2189)		::String _hx_tmp2 = ::hx::strings::Strings_obj::substring8(str,(int)0,pos);
HXDLIN(2189)		return (_hx_tmp2 + ::hx::strings::Strings_obj::substring8(str,(pos + length),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,removeAt,return )

::String Strings_obj::removeBefore(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2197_removeBefore)
HXDLIN(2197)		return ::hx::strings::Strings_obj::substringAfter(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeBefore,return )

::String Strings_obj::removeBeforeLast(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2205_removeBeforeLast)
HXDLIN(2205)		return ::hx::strings::Strings_obj::substringAfterLast(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeBeforeLast,return )

::String Strings_obj::removeBeforeIgnoreCase(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2213_removeBeforeIgnoreCase)
HXDLIN(2213)		return ::hx::strings::Strings_obj::substringAfterIgnoreCase(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeBeforeIgnoreCase,return )

::String Strings_obj::removeBeforeLastIgnoreCase(::String str,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2221_removeBeforeLastIgnoreCase)
HXDLIN(2221)		return ::hx::strings::Strings_obj::substringAfterLastIgnoreCase(str,searchFor,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeBeforeLastIgnoreCase,return )

::String Strings_obj::removeAll(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2238_removeAll)
HXDLIN(2238)		return ::hx::strings::Strings_obj::replaceAll(searchIn,searchFor,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeAll,return )

::String Strings_obj::removeFirst(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2256_removeFirst)
HXDLIN(2256)		return ::hx::strings::Strings_obj::replaceFirst(searchIn,searchFor,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeFirst,return )

::String Strings_obj::removeFirstIgnoreCase(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2274_removeFirstIgnoreCase)
HXDLIN(2274)		return ::hx::strings::Strings_obj::replaceFirstIgnoreCase(searchIn,searchFor,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeFirstIgnoreCase,return )

::String Strings_obj::removeAnsi(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2285_removeAnsi)
HXLINE(2286)		bool _hx_tmp;
HXDLIN(2286)		if (hx::IsNotNull( str )) {
HXLINE(2286)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(2286)			_hx_tmp = true;
            		}
HXDLIN(2286)		if (_hx_tmp) {
HXLINE(2287)			return str;
            		}
HXLINE(2289)		return ::hx::strings::Strings_obj::REGEX_ANSI_ESC->ereg->replace(str,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,removeAnsi,return )

::String Strings_obj::removeLeading(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2308_removeLeading)
HXLINE(2309)		bool _hx_tmp;
HXDLIN(2309)		bool _hx_tmp1;
HXDLIN(2309)		if (hx::IsNotNull( searchIn )) {
HXLINE(2309)			_hx_tmp1 = (searchIn.length == (int)0);
            		}
            		else {
HXLINE(2309)			_hx_tmp1 = true;
            		}
HXDLIN(2309)		if (!(_hx_tmp1)) {
HXLINE(2309)			if (hx::IsNotNull( searchFor )) {
HXLINE(2309)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(2309)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(2309)			_hx_tmp = true;
            		}
HXDLIN(2309)		if (_hx_tmp) {
HXLINE(2310)			return searchIn;
            		}
HXLINE(2312)		while(::hx::strings::Strings_obj::startsWith(searchIn,searchFor)){
HXLINE(2313)			searchIn = searchIn.substring(searchFor.length,searchIn.length);
            		}
HXLINE(2315)		return searchIn;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeLeading,return )

::String Strings_obj::removeTags(::String xml){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2333_removeTags)
HXLINE(2334)		bool _hx_tmp;
HXDLIN(2334)		if (hx::IsNotNull( xml )) {
HXLINE(2334)			_hx_tmp = (xml.length == (int)0);
            		}
            		else {
HXLINE(2334)			_hx_tmp = true;
            		}
HXDLIN(2334)		if (_hx_tmp) {
HXLINE(2335)			return xml;
            		}
HXLINE(2344)		return ::hx::strings::Strings_obj::REGEX_REMOVE_XML_TAGS->ereg->replace(xml,HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,removeTags,return )

::String Strings_obj::removeTrailing(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2364_removeTrailing)
HXLINE(2365)		bool _hx_tmp;
HXDLIN(2365)		bool _hx_tmp1;
HXDLIN(2365)		if (hx::IsNotNull( searchIn )) {
HXLINE(2365)			_hx_tmp1 = (searchIn.length == (int)0);
            		}
            		else {
HXLINE(2365)			_hx_tmp1 = true;
            		}
HXDLIN(2365)		if (!(_hx_tmp1)) {
HXLINE(2365)			if (hx::IsNotNull( searchFor )) {
HXLINE(2365)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(2365)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(2365)			_hx_tmp = true;
            		}
HXDLIN(2365)		if (_hx_tmp) {
HXLINE(2366)			return searchIn;
            		}
HXLINE(2368)		while(true){
HXLINE(2368)			bool _hx_tmp2;
HXDLIN(2368)			bool _hx_tmp3;
HXDLIN(2368)			if (hx::IsNotNull( searchIn )) {
HXLINE(2368)				_hx_tmp3 = hx::IsNull( searchFor );
            			}
            			else {
HXLINE(2368)				_hx_tmp3 = true;
            			}
HXDLIN(2368)			if (_hx_tmp3) {
HXLINE(2368)				_hx_tmp2 = false;
            			}
            			else {
HXLINE(2368)				_hx_tmp2 = ::StringTools_obj::endsWith(searchIn,searchFor);
            			}
HXDLIN(2368)			if (!(_hx_tmp2)) {
HXLINE(2368)				goto _hx_goto_131;
            			}
HXLINE(2369)			searchIn = searchIn.substring((int)0,(searchIn.length - searchFor.length));
            		}
            		_hx_goto_131:;
HXLINE(2371)		return searchIn;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,removeTrailing,return )

::String Strings_obj::repeat(::String str,int count,::String __o_separator){
::String separator = __o_separator.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2390_repeat)
HXLINE(2391)		if (hx::IsNull( str )) {
HXLINE(2392)			return null();
            		}
HXLINE(2394)		if ((count < (int)1)) {
HXLINE(2395)			return HX_("",00,00,00,00);
            		}
HXLINE(2397)		if ((count == (int)1)) {
HXLINE(2398)			return str;
            		}
HXLINE(2400)		::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(2400)		{
HXLINE(2400)			int _g2 = (int)0;
HXDLIN(2400)			int _g1 = count;
HXDLIN(2400)			while((_g2 < _g1)){
HXLINE(2400)				_g2 = (_g2 + (int)1);
HXDLIN(2400)				int i = (_g2 - (int)1);
HXDLIN(2400)				_g->push(str);
            			}
            		}
HXDLIN(2400)		return _g->join(separator);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,repeat,return )

::String Strings_obj::replaceAll(::String searchIn,::String searchFor,::String replaceWith){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2417_replaceAll)
HXLINE(2418)		bool _hx_tmp;
HXDLIN(2418)		bool _hx_tmp1;
HXDLIN(2418)		if (hx::IsNotNull( searchIn )) {
HXLINE(2418)			if (hx::IsNotNull( searchIn )) {
HXLINE(2418)				_hx_tmp1 = (searchIn.length == (int)0);
            			}
            			else {
HXLINE(2418)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(2418)			_hx_tmp1 = true;
            		}
HXDLIN(2418)		if (!(_hx_tmp1)) {
HXLINE(2418)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2418)			_hx_tmp = true;
            		}
HXDLIN(2418)		if (_hx_tmp) {
HXLINE(2419)			return searchIn;
            		}
HXLINE(2421)		if (hx::IsNull( replaceWith )) {
HXLINE(2421)			replaceWith = HX_("null",87,9e,0e,49);
            		}
HXLINE(2423)		return ::StringTools_obj::replace(searchIn,searchFor,replaceWith);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,replaceAll,return )

::String Strings_obj::replaceFirst(::String searchIn,::String searchFor,::String replaceWith){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2440_replaceFirst)
HXLINE(2441)		bool _hx_tmp;
HXDLIN(2441)		bool _hx_tmp1;
HXDLIN(2441)		if (hx::IsNotNull( searchIn )) {
HXLINE(2441)			if (hx::IsNotNull( searchIn )) {
HXLINE(2441)				_hx_tmp1 = (searchIn.length == (int)0);
            			}
            			else {
HXLINE(2441)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(2441)			_hx_tmp1 = true;
            		}
HXDLIN(2441)		if (!(_hx_tmp1)) {
HXLINE(2441)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2441)			_hx_tmp = true;
            		}
HXDLIN(2441)		if (_hx_tmp) {
HXLINE(2442)			return searchIn;
            		}
HXLINE(2444)		if (hx::IsNull( replaceWith )) {
HXLINE(2444)			replaceWith = HX_("null",87,9e,0e,49);
            		}
HXLINE(2446)		int foundAt;
HXLINE(2447)		if ((searchFor.length == (int)0)) {
HXLINE(2448)			int _hx_tmp2;
HXDLIN(2448)			if (hx::IsNull( searchIn )) {
HXLINE(2448)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE(2448)				_hx_tmp2 = ::haxe::Utf8_obj::length(searchIn);
            			}
HXDLIN(2448)			if ((_hx_tmp2 > (int)1)) {
HXLINE(2449)				foundAt = (int)1;
            			}
            			else {
HXLINE(2451)				return searchIn;
            			}
            		}
            		else {
HXLINE(2453)			foundAt = ::hx::strings::Strings_obj::indexOf8(searchIn,searchFor,null());
            		}
HXLINE(2455)		::String _hx_tmp3 = (::hx::strings::Strings_obj::substr8(searchIn,(int)0,foundAt) + replaceWith);
HXDLIN(2455)		int _hx_tmp4;
HXDLIN(2455)		if (hx::IsNull( searchFor )) {
HXLINE(2455)			_hx_tmp4 = (int)0;
            		}
            		else {
HXLINE(2455)			_hx_tmp4 = ::haxe::Utf8_obj::length(searchFor);
            		}
HXDLIN(2455)		return (_hx_tmp3 + ::hx::strings::Strings_obj::substr8(searchIn,(foundAt + _hx_tmp4),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,replaceFirst,return )

::String Strings_obj::replaceFirstIgnoreCase(::String searchIn,::String searchFor,::String replaceWith){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2472_replaceFirstIgnoreCase)
HXLINE(2473)		bool _hx_tmp;
HXDLIN(2473)		bool _hx_tmp1;
HXDLIN(2473)		if (hx::IsNotNull( searchIn )) {
HXLINE(2473)			if (hx::IsNotNull( searchIn )) {
HXLINE(2473)				_hx_tmp1 = (searchIn.length == (int)0);
            			}
            			else {
HXLINE(2473)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(2473)			_hx_tmp1 = true;
            		}
HXDLIN(2473)		if (!(_hx_tmp1)) {
HXLINE(2473)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2473)			_hx_tmp = true;
            		}
HXDLIN(2473)		if (_hx_tmp) {
HXLINE(2474)			return searchIn;
            		}
HXLINE(2476)		if (hx::IsNull( replaceWith )) {
HXLINE(2476)			replaceWith = HX_("null",87,9e,0e,49);
            		}
HXLINE(2478)		searchFor = searchFor.toLowerCase();
HXLINE(2480)		int foundAt;
HXLINE(2481)		if ((searchFor.length == (int)0)) {
HXLINE(2482)			int _hx_tmp2;
HXDLIN(2482)			if (hx::IsNull( searchIn )) {
HXLINE(2482)				_hx_tmp2 = (int)0;
            			}
            			else {
HXLINE(2482)				_hx_tmp2 = ::haxe::Utf8_obj::length(searchIn);
            			}
HXDLIN(2482)			if ((_hx_tmp2 > (int)1)) {
HXLINE(2483)				foundAt = (int)1;
            			}
            			else {
HXLINE(2485)				return searchIn;
            			}
            		}
            		else {
HXLINE(2487)			foundAt = ::hx::strings::Strings_obj::indexOf8(searchIn.toLowerCase(),searchFor,null());
            		}
HXLINE(2489)		::String _hx_tmp3 = (::hx::strings::Strings_obj::substr8(searchIn,(int)0,foundAt) + replaceWith);
HXDLIN(2489)		int _hx_tmp4;
HXDLIN(2489)		if (hx::IsNull( searchFor )) {
HXLINE(2489)			_hx_tmp4 = (int)0;
            		}
            		else {
HXLINE(2489)			_hx_tmp4 = ::haxe::Utf8_obj::length(searchFor);
            		}
HXDLIN(2489)		return (_hx_tmp3 + ::hx::strings::Strings_obj::substr8(searchIn,(foundAt + _hx_tmp4),null()));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,replaceFirstIgnoreCase,return )

::String Strings_obj::reverse(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2501_reverse)
HXLINE(2502)		bool _hx_tmp;
HXDLIN(2502)		if (hx::IsNotNull( str )) {
HXLINE(2502)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(2502)			_hx_tmp = true;
            		}
HXDLIN(2502)		if (_hx_tmp) {
HXLINE(2503)			return str;
            		}
HXLINE(2505)		::Array< ::String > chars = ::hx::strings::Strings_obj::split8(str,::Array_obj< ::String >::fromData( _hx_array_data_5da8f718_139,1),null());
HXLINE(2506)		chars->reverse();
HXLINE(2507)		return chars->join(HX_("",00,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,reverse,return )

::String Strings_obj::right(::String str,int len){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2523_right)
HXLINE(2524)		bool _hx_tmp;
HXDLIN(2524)		if (hx::IsNotNull( str )) {
HXLINE(2524)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(2524)			_hx_tmp = true;
            		}
HXDLIN(2524)		if (_hx_tmp) {
HXLINE(2525)			return str;
            		}
HXLINE(2527)		int _hx_tmp1;
HXDLIN(2527)		if (hx::IsNull( str )) {
HXLINE(2527)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(2527)			_hx_tmp1 = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN(2527)		return ::hx::strings::Strings_obj::substring8(str,(_hx_tmp1 - len),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,right,return )

::String Strings_obj::rpad(::String str,int targetLength,::String __o_padStr,hx::Null< bool >  __o_canOverflow){
::String padStr = __o_padStr.Default(HX_HCSTRING(" ","\x20","\x00","\x00","\x00"));
bool canOverflow = __o_canOverflow.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2549_rpad)
HXLINE(2550)		int strLen;
HXDLIN(2550)		if (hx::IsNull( str )) {
HXLINE(2550)			strLen = (int)0;
            		}
            		else {
HXLINE(2550)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(2551)		bool _hx_tmp;
HXDLIN(2551)		if (hx::IsNotNull( str )) {
HXLINE(2551)			_hx_tmp = (strLen > targetLength);
            		}
            		else {
HXLINE(2551)			_hx_tmp = true;
            		}
HXDLIN(2551)		if (_hx_tmp) {
HXLINE(2552)			return str;
            		}
HXLINE(2554)		bool _hx_tmp1;
HXDLIN(2554)		if (hx::IsNotNull( padStr )) {
HXLINE(2554)			_hx_tmp1 = (padStr.length == (int)0);
            		}
            		else {
HXLINE(2554)			_hx_tmp1 = true;
            		}
HXDLIN(2554)		if (_hx_tmp1) {
HXLINE(2555)			padStr = HX_(" ",20,00,00,00);
            		}
HXLINE(2557)		int padLen;
HXDLIN(2557)		if (hx::IsNull( padStr )) {
HXLINE(2557)			padLen = (int)0;
            		}
            		else {
HXLINE(2557)			padLen = ::haxe::Utf8_obj::length(padStr);
            		}
HXLINE(2558)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,str);
HXLINE(2559)		while((strLen < targetLength)){
HXLINE(2560)			{
HXLINE(2560)				{
HXLINE(2560)					 ::StringBuf _this = sb->sb;
HXDLIN(2560)					if (hx::IsNotNull( _this->charBuf )) {
HXLINE(2560)						_this->flush();
            					}
HXDLIN(2560)					if (hx::IsNull( _this->b )) {
HXLINE(2560)						_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(padStr));
            					}
            					else {
HXLINE(2560)						::Array< ::String > _this1 = _this->b;
HXDLIN(2560)						_this1->push(::Std_obj::string(padStr));
            					}
            				}
HXDLIN(2560)				 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(2560)				int sb2 = sb1->len;
HXDLIN(2560)				int _hx_tmp2;
HXDLIN(2560)				if (hx::IsNull( padStr )) {
HXLINE(2560)					_hx_tmp2 = (int)0;
            				}
            				else {
HXLINE(2560)					_hx_tmp2 = ::haxe::Utf8_obj::length(padStr);
            				}
HXDLIN(2560)				sb1->len = (sb2 + _hx_tmp2);
            			}
HXLINE(2561)			strLen = (strLen + padLen);
            		}
HXLINE(2564)		if (canOverflow) {
HXLINE(2565)			return sb->toString();
            		}
HXLINE(2567)		::String str1 = sb->toString();
HXDLIN(2567)		int _hx_tmp3;
HXDLIN(2567)		if (hx::IsNull( str1 )) {
HXLINE(2567)			_hx_tmp3 = (int)0;
            		}
            		else {
HXLINE(2567)			_hx_tmp3 = ::haxe::Utf8_obj::length(str1);
            		}
HXDLIN(2567)		if ((_hx_tmp3 <= targetLength)) {
HXLINE(2567)			return str1;
            		}
            		else {
HXLINE(2567)			return ::hx::strings::Strings_obj::substring8(str1,(int)0,targetLength);
            		}
HXDLIN(2567)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,rpad,return )

::Array< ::String > Strings_obj::split8(::String str,::Array< ::String > separator, ::Dynamic __o_maxParts){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		bool _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2604_split8)
HXLINE(2604)			return hx::IsNotNull( s );
            		}
            		HX_END_LOCAL_FUNC1(return)

 ::Dynamic maxParts = __o_maxParts.Default(0);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2595_split8)
HXLINE(2596)		bool _hx_tmp;
HXDLIN(2596)		if (hx::IsNotNull( str )) {
HXLINE(2596)			_hx_tmp = hx::IsNull( separator );
            		}
            		else {
HXLINE(2596)			_hx_tmp = true;
            		}
HXDLIN(2596)		if (_hx_tmp) {
HXLINE(2597)			return null();
            		}
HXLINE(2599)		int strLen;
HXDLIN(2599)		if (hx::IsNull( str )) {
HXLINE(2599)			strLen = (int)0;
            		}
            		else {
HXLINE(2599)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(2601)		if ((strLen == (int)0)) {
HXLINE(2602)			return ::Array_obj< ::String >::__new(0);
            		}
HXLINE(2604)		::Array< ::String > separators = separator->filter( ::Dynamic(new _hx_Closure_0()));
HXLINE(2605)		if ((separators->length == (int)0)) {
HXLINE(2606)			return null();
            		}
HXLINE(2613)		if ((separators->indexOf(HX_("",00,00,00,00),null()) > (int)-1)) {
HXLINE(2614)			if (hx::IsLessEq( maxParts,(int)0 )) {
HXLINE(2615)				::Array< ::String > _g = ::Array_obj< ::String >::__new(0);
HXDLIN(2615)				{
HXLINE(2615)					int _g2 = (int)0;
HXDLIN(2615)					int _g1 = strLen;
HXDLIN(2615)					while((_g2 < _g1)){
HXLINE(2615)						_g2 = (_g2 + (int)1);
HXDLIN(2615)						int i = (_g2 - (int)1);
HXDLIN(2615)						_g->push(::haxe::Utf8_obj::sub(str,i,(int)1));
            					}
            				}
HXDLIN(2615)				return _g;
            			}
HXLINE(2617)			if (hx::IsGreater( maxParts,strLen )) {
HXLINE(2618)				maxParts = strLen;
            			}
HXLINE(2619)			maxParts = (maxParts - (int)1);
HXLINE(2620)			::Array< ::String > _g3 = ::Array_obj< ::String >::__new(0);
HXDLIN(2620)			{
HXLINE(2620)				int _g21 = (int)0;
HXDLIN(2620)				int _g11 = maxParts;
HXDLIN(2620)				while((_g21 < _g11)){
HXLINE(2620)					_g21 = (_g21 + (int)1);
HXDLIN(2620)					int i1 = (_g21 - (int)1);
HXDLIN(2620)					_g3->push(::haxe::Utf8_obj::sub(str,i1,(int)1));
            				}
            			}
HXDLIN(2620)			::Array< ::String > result = _g3;
HXLINE(2621)			result->push(::haxe::Utf8_obj::sub(str,maxParts,(strLen - maxParts)));
HXLINE(2622)			return result;
            		}
HXLINE(2625)		::Array< int > _g4 = ::Array_obj< int >::__new(0);
HXDLIN(2625)		{
HXLINE(2625)			int _g12 = (int)0;
HXDLIN(2625)			while((_g12 < separators->length)){
HXLINE(2625)				::String sep = separators->__get(_g12);
HXDLIN(2625)				_g12 = (_g12 + (int)1);
HXDLIN(2625)				int _hx_tmp1;
HXDLIN(2625)				if (hx::IsNull( sep )) {
HXLINE(2625)					_hx_tmp1 = (int)0;
            				}
            				else {
HXLINE(2625)					_hx_tmp1 = ::haxe::Utf8_obj::length(sep);
            				}
HXDLIN(2625)				_g4->push(_hx_tmp1);
            			}
            		}
HXDLIN(2625)		::Array< int > separatorsLengths = _g4;
HXLINE(2626)		int lastFoundAt = (int)0;
HXLINE(2627)		::Array< ::String > result1 = ::Array_obj< ::String >::__new(0);
HXLINE(2628)		int resultCount = (int)0;
HXLINE(2629)		while(true){
HXLINE(2630)			int separatorLen = (int)0;
HXLINE(2631)			int foundAt = (int)-1;
HXLINE(2632)			{
HXLINE(2632)				int _g22 = (int)0;
HXDLIN(2632)				int _g13 = separators->length;
HXDLIN(2632)				while((_g22 < _g13)){
HXLINE(2632)					_g22 = (_g22 + (int)1);
HXDLIN(2632)					int i2 = (_g22 - (int)1);
HXLINE(2633)					int sepFoundAt = ::hx::strings::Strings_obj::indexOf8(str,separators->__get(i2),lastFoundAt);
HXLINE(2634)					if ((sepFoundAt != (int)-1)) {
HXLINE(2635)						bool _hx_tmp2;
HXDLIN(2635)						if ((foundAt != (int)-1)) {
HXLINE(2635)							_hx_tmp2 = (sepFoundAt < foundAt);
            						}
            						else {
HXLINE(2635)							_hx_tmp2 = true;
            						}
HXDLIN(2635)						if (_hx_tmp2) {
HXLINE(2636)							foundAt = sepFoundAt;
HXLINE(2637)							separatorLen = separatorsLengths->__get(i2);
            						}
            					}
            				}
            			}
HXLINE(2641)			resultCount = (resultCount + (int)1);
HXLINE(2642)			bool _hx_tmp3;
HXDLIN(2642)			if ((foundAt != (int)-1)) {
HXLINE(2642)				_hx_tmp3 = hx::IsEq( resultCount,maxParts );
            			}
            			else {
HXLINE(2642)				_hx_tmp3 = true;
            			}
HXDLIN(2642)			if (_hx_tmp3) {
HXLINE(2643)				result1->push(::haxe::Utf8_obj::sub(str,lastFoundAt,(strLen - lastFoundAt)));
HXLINE(2644)				goto _hx_goto_146;
            			}
HXLINE(2646)			result1->push(::haxe::Utf8_obj::sub(str,lastFoundAt,(foundAt - lastFoundAt)));
HXLINE(2647)			lastFoundAt = (foundAt + separatorLen);
            		}
            		_hx_goto_146:;
HXLINE(2649)		return result1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,split8,return )

::Array< ::String > Strings_obj::splitAt(::String str,::Array< int > splitPos){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(int a,int b){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2691_splitAt)
HXLINE(2691)			if ((a < b)) {
HXLINE(2691)				return (int)-1;
            			}
            			else {
HXLINE(2691)				if ((a > b)) {
HXLINE(2691)					return (int)1;
            				}
            				else {
HXLINE(2691)					return (int)0;
            				}
            			}
HXDLIN(2691)			return (int)0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2668_splitAt)
HXLINE(2669)		if (hx::IsNull( str )) {
HXLINE(2670)			return null();
            		}
HXLINE(2672)		bool _hx_tmp;
HXDLIN(2672)		if (hx::IsNotNull( splitPos )) {
HXLINE(2672)			_hx_tmp = (splitPos->length == (int)0);
            		}
            		else {
HXLINE(2672)			_hx_tmp = true;
            		}
HXDLIN(2672)		if (_hx_tmp) {
HXLINE(2673)			return ::Array_obj< ::String >::__new(1)->init(0,str);
            		}
HXLINE(2675)		int strLen;
HXDLIN(2675)		if (hx::IsNull( str )) {
HXLINE(2675)			strLen = (int)0;
            		}
            		else {
HXLINE(2675)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(2676)		if ((strLen == (int)0)) {
HXLINE(2677)			return ::Array_obj< ::String >::__new(1)->init(0,str);
            		}
HXLINE(2680)		::Array< int > pos = ::Array_obj< int >::__new();
HXLINE(2681)		{
HXLINE(2681)			 ::Dynamic p = splitPos->iterator();
HXDLIN(2681)			while(( (bool)(p->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE(2681)				int p1 = ( (int)(p->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE(2682)				if ((p1 < (int)0)) {
HXLINE(2683)					p1 = (strLen + p1);
            				}
HXLINE(2684)				bool _hx_tmp1;
HXDLIN(2684)				if ((p1 >= (int)0)) {
HXLINE(2684)					_hx_tmp1 = (p1 >= strLen);
            				}
            				else {
HXLINE(2684)					_hx_tmp1 = true;
            				}
HXDLIN(2684)				if (_hx_tmp1) {
HXLINE(2685)					continue;
            				}
HXLINE(2686)				if ((pos->indexOf(p1,null()) > (int)-1)) {
HXLINE(2687)					continue;
            				}
HXLINE(2688)				pos->push(p1);
            			}
            		}
HXLINE(2691)		pos->sort( ::Dynamic(new _hx_Closure_0()));
HXLINE(2693)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE(2695)		int lastPos = (int)0;
HXLINE(2696)		{
HXLINE(2696)			int _g = (int)0;
HXDLIN(2696)			while((_g < pos->length)){
HXLINE(2696)				int p2 = pos->__get(_g);
HXDLIN(2696)				_g = (_g + (int)1);
HXLINE(2697)				::String chunk = ::hx::strings::Strings_obj::substring8(str,lastPos,p2);
HXLINE(2698)				bool _hx_tmp2;
HXDLIN(2698)				if (hx::IsNotNull( chunk )) {
HXLINE(2698)					_hx_tmp2 = (chunk.length > (int)0);
            				}
            				else {
HXLINE(2698)					_hx_tmp2 = false;
            				}
HXDLIN(2698)				if (_hx_tmp2) {
HXLINE(2699)					result->push(chunk);
            				}
HXLINE(2700)				lastPos = p2;
            			}
            		}
HXLINE(2702)		::String chunk1 = ::hx::strings::Strings_obj::substring8(str,lastPos,null());
HXLINE(2703)		bool _hx_tmp3;
HXDLIN(2703)		if (hx::IsNotNull( chunk1 )) {
HXLINE(2703)			_hx_tmp3 = (chunk1.length > (int)0);
            		}
            		else {
HXLINE(2703)			_hx_tmp3 = false;
            		}
HXDLIN(2703)		if (_hx_tmp3) {
HXLINE(2704)			result->push(chunk1);
            		}
HXLINE(2705)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,splitAt,return )

::Array< ::String > Strings_obj::splitEvery(::String str,int count){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2720_splitEvery)
HXLINE(2721)		if (hx::IsNull( str )) {
HXLINE(2722)			return null();
            		}
HXLINE(2724)		if ((count < (int)1)) {
HXLINE(2725)			HX_STACK_DO_THROW(HX_("[count] must be greater than 0",f4,ff,7d,8f));
            		}
HXLINE(2727)		int strLen;
HXDLIN(2727)		if (hx::IsNull( str )) {
HXLINE(2727)			strLen = (int)0;
            		}
            		else {
HXLINE(2727)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(2728)		bool _hx_tmp;
HXDLIN(2728)		if ((strLen != (int)0)) {
HXLINE(2728)			_hx_tmp = (count >= strLen);
            		}
            		else {
HXLINE(2728)			_hx_tmp = true;
            		}
HXDLIN(2728)		if (_hx_tmp) {
HXLINE(2729)			return ::Array_obj< ::String >::__new(1)->init(0,str);
            		}
HXLINE(2731)		::Array< ::String > result = ::Array_obj< ::String >::__new();
HXLINE(2732)		int pos = (int)0;
HXLINE(2733)		while(true){
HXLINE(2734)			::String chunk = ::hx::strings::Strings_obj::substr8(str,pos,count);
HXLINE(2735)			pos = (pos + count);
HXLINE(2736)			bool _hx_tmp1;
HXDLIN(2736)			if (hx::IsNotNull( chunk )) {
HXLINE(2736)				_hx_tmp1 = (chunk.length == (int)0);
            			}
            			else {
HXLINE(2736)				_hx_tmp1 = true;
            			}
HXDLIN(2736)			if (_hx_tmp1) {
HXLINE(2737)				goto _hx_goto_154;
            			}
HXLINE(2738)			result->push(chunk);
            		}
            		_hx_goto_154:;
HXLINE(2740)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,splitEvery,return )

::Array< ::String > Strings_obj::splitLines(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2755_splitLines)
HXLINE(2756)		bool _hx_tmp;
HXDLIN(2756)		if (hx::IsNotNull( str )) {
HXLINE(2756)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(2756)			_hx_tmp = true;
            		}
HXDLIN(2756)		if (_hx_tmp) {
HXLINE(2757)			return ::Array_obj< ::String >::__new(0);
            		}
HXLINE(2759)		return ::hx::strings::Strings_obj::REGEX_SPLIT_LINES->ereg->split(str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,splitLines,return )

bool Strings_obj::startsWith(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2772_startsWith)
HXLINE(2773)		bool _hx_tmp;
HXDLIN(2773)		if (hx::IsNotNull( searchIn )) {
HXLINE(2773)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2773)			_hx_tmp = true;
            		}
HXDLIN(2773)		if (_hx_tmp) {
HXLINE(2774)			return false;
            		}
HXLINE(2776)		bool _hx_tmp1;
HXDLIN(2776)		if (hx::IsNotNull( searchFor )) {
HXLINE(2776)			_hx_tmp1 = (searchFor.length == (int)0);
            		}
            		else {
HXLINE(2776)			_hx_tmp1 = true;
            		}
HXDLIN(2776)		if (_hx_tmp1) {
HXLINE(2777)			return true;
            		}
HXLINE(2779)		return ::StringTools_obj::startsWith(searchIn,searchFor);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,startsWith,return )

bool Strings_obj::startsWithAny(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2796_startsWithAny)
HXLINE(2797)		bool _hx_tmp;
HXDLIN(2797)		if (hx::IsNotNull( searchIn )) {
HXLINE(2797)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2797)			_hx_tmp = true;
            		}
HXDLIN(2797)		if (_hx_tmp) {
HXLINE(2798)			return false;
            		}
HXLINE(2800)		{
HXLINE(2800)			int _g = (int)0;
HXDLIN(2800)			while((_g < searchFor->length)){
HXLINE(2800)				::String candidate = searchFor->__get(_g);
HXDLIN(2800)				_g = (_g + (int)1);
HXLINE(2801)				bool _hx_tmp1;
HXDLIN(2801)				if (hx::IsNotNull( candidate )) {
HXLINE(2801)					_hx_tmp1 = ::StringTools_obj::startsWith(searchIn,candidate);
            				}
            				else {
HXLINE(2801)					_hx_tmp1 = false;
            				}
HXDLIN(2801)				if (_hx_tmp1) {
HXLINE(2802)					return true;
            				}
            			}
            		}
HXLINE(2804)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,startsWithAny,return )

bool Strings_obj::startsWithAnyIgnoreCase(::String searchIn,::Array< ::String > searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2822_startsWithAnyIgnoreCase)
HXLINE(2823)		bool _hx_tmp;
HXDLIN(2823)		if (hx::IsNotNull( searchIn )) {
HXLINE(2823)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2823)			_hx_tmp = true;
            		}
HXDLIN(2823)		if (_hx_tmp) {
HXLINE(2824)			return false;
            		}
HXLINE(2826)		searchIn = ::hx::strings::Strings_obj::toLowerCase8(searchIn);
HXLINE(2827)		{
HXLINE(2827)			int _g = (int)0;
HXDLIN(2827)			while((_g < searchFor->length)){
HXLINE(2827)				::String candidate = searchFor->__get(_g);
HXDLIN(2827)				_g = (_g + (int)1);
HXLINE(2828)				bool _hx_tmp1;
HXDLIN(2828)				if (hx::IsNotNull( candidate )) {
HXLINE(2828)					_hx_tmp1 = ::StringTools_obj::startsWith(searchIn,::hx::strings::Strings_obj::toLowerCase8(candidate));
            				}
            				else {
HXLINE(2828)					_hx_tmp1 = false;
            				}
HXDLIN(2828)				if (_hx_tmp1) {
HXLINE(2829)					return true;
            				}
            			}
            		}
HXLINE(2831)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,startsWithAnyIgnoreCase,return )

bool Strings_obj::startsWithIgnoreCase(::String searchIn,::String searchFor){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2844_startsWithIgnoreCase)
HXLINE(2845)		bool _hx_tmp;
HXDLIN(2845)		if (hx::IsNotNull( searchIn )) {
HXLINE(2845)			_hx_tmp = hx::IsNull( searchFor );
            		}
            		else {
HXLINE(2845)			_hx_tmp = true;
            		}
HXDLIN(2845)		if (_hx_tmp) {
HXLINE(2846)			return false;
            		}
HXLINE(2848)		bool _hx_tmp1;
HXDLIN(2848)		if (hx::IsNotNull( searchFor )) {
HXLINE(2848)			_hx_tmp1 = (searchFor.length == (int)0);
            		}
            		else {
HXLINE(2848)			_hx_tmp1 = true;
            		}
HXDLIN(2848)		if (_hx_tmp1) {
HXLINE(2849)			return true;
            		}
HXLINE(2851)		::String _hx_tmp2 = searchIn.toLowerCase();
HXDLIN(2851)		return ::StringTools_obj::startsWith(_hx_tmp2,searchFor.toLowerCase());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,startsWithIgnoreCase,return )

::String Strings_obj::substr8(::String str,int startAt, ::Dynamic len){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2875_substr8)
HXLINE(2876)		bool _hx_tmp;
HXDLIN(2876)		if (hx::IsNotNull( str )) {
HXLINE(2876)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(2876)			_hx_tmp = true;
            		}
HXDLIN(2876)		if (_hx_tmp) {
HXLINE(2877)			return str;
            		}
HXLINE(2879)		if (hx::IsNull( len )) {
HXLINE(2880)			if (hx::IsNull( str )) {
HXLINE(2880)				len = (int)0;
            			}
            			else {
HXLINE(2880)				len = ::haxe::Utf8_obj::length(str);
            			}
            		}
HXLINE(2882)		if (hx::IsLessEq( len,(int)0 )) {
HXLINE(2883)			return HX_("",00,00,00,00);
            		}
HXLINE(2885)		if ((startAt < (int)0)) {
HXLINE(2886)			int startAt1;
HXDLIN(2886)			if (hx::IsNull( str )) {
HXLINE(2886)				startAt1 = (int)0;
            			}
            			else {
HXLINE(2886)				startAt1 = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(2886)			startAt = (startAt + startAt1);
HXLINE(2887)			if ((startAt < (int)0)) {
HXLINE(2887)				startAt = (int)0;
            			}
            		}
HXLINE(2899)		if (hx::IsLess( len,(int)0 )) {
HXLINE(2900)			if ((startAt != (int)0)) {
HXLINE(2901)				return HX_("",00,00,00,00);
            			}
HXLINE(2902)			int len1;
HXDLIN(2902)			if (hx::IsNull( str )) {
HXLINE(2902)				len1 = (int)0;
            			}
            			else {
HXLINE(2902)				len1 = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(2902)			len = ((len1 - startAt) + len);
HXLINE(2903)			if (hx::IsLessEq( len,(int)0 )) {
HXLINE(2904)				return HX_("",00,00,00,00);
            			}
            		}
HXLINE(2907)		return ::haxe::Utf8_obj::sub(str,startAt,len);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substr8,return )

::String Strings_obj::substring8(::String str,int startAt, ::Dynamic endAt){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2937_substring8)
HXLINE(2938)		bool _hx_tmp;
HXDLIN(2938)		if (hx::IsNotNull( str )) {
HXLINE(2938)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(2938)			_hx_tmp = true;
            		}
HXDLIN(2938)		if (_hx_tmp) {
HXLINE(2939)			return str;
            		}
HXLINE(2941)		if (hx::IsNull( endAt )) {
HXLINE(2942)			if (hx::IsNull( str )) {
HXLINE(2942)				endAt = (int)0;
            			}
            			else {
HXLINE(2942)				endAt = ::haxe::Utf8_obj::length(str);
            			}
            		}
HXLINE(2947)		if ((startAt < (int)0)) {
HXLINE(2947)			startAt = (int)0;
            		}
HXLINE(2948)		if (hx::IsLess( endAt,(int)0 )) {
HXLINE(2948)			endAt = (int)0;
            		}
HXLINE(2949)		if (hx::IsGreater( startAt,endAt )) {
HXLINE(2950)			int tmp = startAt;
HXLINE(2951)			startAt = endAt;
HXLINE(2952)			endAt = tmp;
            		}
HXLINE(2961)		return ::haxe::Utf8_obj::sub(str,startAt,(endAt - startAt));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substring8,return )

::String Strings_obj::substringAfter(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_2979_substringAfter)
HXLINE(2980)		if (hx::IsNull( str )) {
HXLINE(2981)			return null();
            		}
HXLINE(2983)		bool _hx_tmp;
HXDLIN(2983)		if ((str != HX_("",00,00,00,00))) {
HXLINE(2983)			if (hx::IsNotNull( searchFor )) {
HXLINE(2983)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(2983)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(2983)			_hx_tmp = true;
            		}
HXDLIN(2983)		if (_hx_tmp) {
HXLINE(2984)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(2984)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(2984)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(2984)					return str;
            				}
            				break;
            			}
            		}
HXLINE(2986)		int foundAt = str.indexOf(searchFor,null());
HXLINE(2987)		if ((foundAt == (int)-1)) {
HXLINE(2988)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(2988)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(2988)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(2988)					return str;
            				}
            				break;
            			}
            		}
HXLINE(2990)		return str.substring((foundAt + searchFor.length),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringAfter,return )

::String Strings_obj::substringAfterIgnoreCase(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3006_substringAfterIgnoreCase)
HXLINE(3007)		if (hx::IsNull( str )) {
HXLINE(3008)			return null();
            		}
HXLINE(3010)		bool _hx_tmp;
HXDLIN(3010)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3010)			if (hx::IsNotNull( searchFor )) {
HXLINE(3010)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3010)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3010)			_hx_tmp = true;
            		}
HXDLIN(3010)		if (_hx_tmp) {
HXLINE(3011)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3011)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3011)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3011)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3013)		searchFor = searchFor.toLowerCase();
HXLINE(3015)		int foundAt = str.toLowerCase().indexOf(searchFor,null());
HXLINE(3016)		if ((foundAt == (int)-1)) {
HXLINE(3017)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3017)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3017)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3017)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3019)		return str.substring((foundAt + searchFor.length),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringAfterIgnoreCase,return )

::String Strings_obj::substringBetween(::String str,::String after,::String before,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3038_substringBetween)
HXLINE(3039)		if (hx::IsNull( str )) {
HXLINE(3040)			return null();
            		}
HXLINE(3042)		if (hx::IsNull( before )) {
HXLINE(3042)			before = after;
            		}
HXLINE(3044)		bool _hx_tmp;
HXDLIN(3044)		bool _hx_tmp1;
HXDLIN(3044)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3044)			if (hx::IsNotNull( after )) {
HXLINE(3044)				_hx_tmp1 = (after.length == (int)0);
            			}
            			else {
HXLINE(3044)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(3044)			_hx_tmp1 = true;
            		}
HXDLIN(3044)		if (!(_hx_tmp1)) {
HXLINE(3044)			if (hx::IsNotNull( before )) {
HXLINE(3044)				_hx_tmp = (before.length == (int)0);
            			}
            			else {
HXLINE(3044)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3044)			_hx_tmp = true;
            		}
HXDLIN(3044)		if (_hx_tmp) {
HXLINE(3045)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3045)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3045)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3045)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3047)		int foundAfterAt = str.indexOf(after,null());
HXLINE(3048)		if ((foundAfterAt == (int)-1)) {
HXLINE(3049)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3049)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3049)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3049)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3051)		int foundBeforeAt = str.indexOf(before,(foundAfterAt + after.length));
HXLINE(3052)		if ((foundBeforeAt == (int)-1)) {
HXLINE(3053)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3053)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3053)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3053)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3055)		return str.substring((foundAfterAt + after.length),foundBeforeAt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,substringBetween,return )

::String Strings_obj::substringBetweenIgnoreCase(::String str,::String after,::String before,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3074_substringBetweenIgnoreCase)
HXLINE(3075)		if (hx::IsNull( str )) {
HXLINE(3076)			return null();
            		}
HXLINE(3078)		if (hx::IsNull( before )) {
HXLINE(3078)			before = after;
            		}
HXLINE(3080)		bool _hx_tmp;
HXDLIN(3080)		bool _hx_tmp1;
HXDLIN(3080)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3080)			if (hx::IsNotNull( after )) {
HXLINE(3080)				_hx_tmp1 = (after.length == (int)0);
            			}
            			else {
HXLINE(3080)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE(3080)			_hx_tmp1 = true;
            		}
HXDLIN(3080)		if (!(_hx_tmp1)) {
HXLINE(3080)			if (hx::IsNotNull( before )) {
HXLINE(3080)				_hx_tmp = (before.length == (int)0);
            			}
            			else {
HXLINE(3080)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3080)			_hx_tmp = true;
            		}
HXDLIN(3080)		if (_hx_tmp) {
HXLINE(3081)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3081)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3081)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3081)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3083)		::String strLower = ::hx::strings::Strings_obj::toLowerCase8(str);
HXLINE(3084)		after = ::hx::strings::Strings_obj::toLowerCase8(after);
HXLINE(3085)		before = ::hx::strings::Strings_obj::toLowerCase8(before);
HXLINE(3087)		int foundAfterAt = strLower.indexOf(after,null());
HXLINE(3088)		if ((foundAfterAt == (int)-1)) {
HXLINE(3089)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3089)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3089)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3089)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3091)		int foundBeforeAt = strLower.indexOf(before,(foundAfterAt + after.length));
HXLINE(3092)		if ((foundBeforeAt == (int)-1)) {
HXLINE(3093)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3093)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3093)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3093)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3095)		return str.substring((foundAfterAt + after.length),foundBeforeAt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,substringBetweenIgnoreCase,return )

::String Strings_obj::substringAfterLast(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3111_substringAfterLast)
HXLINE(3112)		if (hx::IsNull( str )) {
HXLINE(3113)			return null();
            		}
HXLINE(3115)		bool _hx_tmp;
HXDLIN(3115)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3115)			if (hx::IsNotNull( searchFor )) {
HXLINE(3115)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3115)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3115)			_hx_tmp = true;
            		}
HXDLIN(3115)		if (_hx_tmp) {
HXLINE(3116)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3116)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3116)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3116)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3118)		int foundAt = str.lastIndexOf(searchFor,null());
HXLINE(3119)		if ((foundAt == (int)-1)) {
HXLINE(3120)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3120)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3120)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3120)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3122)		return str.substring((foundAt + searchFor.length),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringAfterLast,return )

::String Strings_obj::substringAfterLastIgnoreCase(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3139_substringAfterLastIgnoreCase)
HXLINE(3140)		if (hx::IsNull( str )) {
HXLINE(3141)			return null();
            		}
HXLINE(3143)		bool _hx_tmp;
HXDLIN(3143)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3143)			if (hx::IsNotNull( searchFor )) {
HXLINE(3143)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3143)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3143)			_hx_tmp = true;
            		}
HXDLIN(3143)		if (_hx_tmp) {
HXLINE(3144)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3144)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3144)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3144)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3146)		searchFor = searchFor.toLowerCase();
HXLINE(3148)		int foundAt = str.toLowerCase().lastIndexOf(searchFor,null());
HXLINE(3149)		if ((foundAt == (int)-1)) {
HXLINE(3150)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3150)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3150)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3150)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3152)		return str.substring((foundAt + searchFor.length),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringAfterLastIgnoreCase,return )

::String Strings_obj::substringBefore(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3168_substringBefore)
HXLINE(3169)		if (hx::IsNull( str )) {
HXLINE(3170)			return null();
            		}
HXLINE(3172)		bool _hx_tmp;
HXDLIN(3172)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3172)			if (hx::IsNotNull( searchFor )) {
HXLINE(3172)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3172)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3172)			_hx_tmp = true;
            		}
HXDLIN(3172)		if (_hx_tmp) {
HXLINE(3173)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3173)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3173)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3173)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3175)		int foundAt = str.indexOf(searchFor,null());
HXLINE(3176)		if ((foundAt == (int)-1)) {
HXLINE(3177)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3177)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3177)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3177)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3179)		return str.substring((int)0,foundAt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringBefore,return )

::String Strings_obj::substringBeforeIgnoreCase(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3196_substringBeforeIgnoreCase)
HXLINE(3197)		if (hx::IsNull( str )) {
HXLINE(3198)			return null();
            		}
HXLINE(3200)		bool _hx_tmp;
HXDLIN(3200)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3200)			if (hx::IsNotNull( searchFor )) {
HXLINE(3200)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3200)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3200)			_hx_tmp = true;
            		}
HXDLIN(3200)		if (_hx_tmp) {
HXLINE(3201)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3201)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3201)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3201)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3203)		searchFor = searchFor.toLowerCase();
HXLINE(3205)		int foundAt = str.toLowerCase().indexOf(searchFor,null());
HXLINE(3206)		if ((foundAt == (int)-1)) {
HXLINE(3207)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3207)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3207)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3207)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3209)		return str.substring((int)0,foundAt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringBeforeIgnoreCase,return )

::String Strings_obj::substringBeforeLast(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3227_substringBeforeLast)
HXLINE(3228)		if (hx::IsNull( str )) {
HXLINE(3229)			return null();
            		}
HXLINE(3231)		bool _hx_tmp;
HXDLIN(3231)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3231)			if (hx::IsNotNull( searchFor )) {
HXLINE(3231)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3231)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3231)			_hx_tmp = true;
            		}
HXDLIN(3231)		if (_hx_tmp) {
HXLINE(3232)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3232)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3232)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3232)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3234)		int foundAt = str.lastIndexOf(searchFor,null());
HXLINE(3235)		if ((foundAt == (int)-1)) {
HXLINE(3236)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3236)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3236)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3236)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3238)		return str.substring((int)0,foundAt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringBeforeLast,return )

::String Strings_obj::substringBeforeLastIgnoreCase(::String str,::String searchFor,hx::Null< int >  __o_notFoundDefault){
int notFoundDefault = __o_notFoundDefault.Default(2);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3255_substringBeforeLastIgnoreCase)
HXLINE(3256)		if (hx::IsNull( str )) {
HXLINE(3257)			return null();
            		}
HXLINE(3259)		bool _hx_tmp;
HXDLIN(3259)		if ((str != HX_("",00,00,00,00))) {
HXLINE(3259)			if (hx::IsNotNull( searchFor )) {
HXLINE(3259)				_hx_tmp = (searchFor.length == (int)0);
            			}
            			else {
HXLINE(3259)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE(3259)			_hx_tmp = true;
            		}
HXDLIN(3259)		if (_hx_tmp) {
HXLINE(3260)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3260)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3260)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3260)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3262)		searchFor = searchFor.toLowerCase();
HXLINE(3264)		int foundAt = str.toLowerCase().lastIndexOf(searchFor,null());
HXLINE(3265)		if ((foundAt == (int)-1)) {
HXLINE(3266)			switch((int)(notFoundDefault)){
            				case (int)1: {
HXLINE(3266)					return null();
            				}
            				break;
            				case (int)2: {
HXLINE(3266)					return HX_("",00,00,00,00);
            				}
            				break;
            				case (int)3: {
HXLINE(3266)					return str;
            				}
            				break;
            			}
            		}
HXLINE(3268)		return str.substring((int)0,foundAt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,substringBeforeLastIgnoreCase,return )

bool Strings_obj::toBool(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3286_toBool)
HXLINE(3287)		bool _hx_tmp;
HXDLIN(3287)		if (hx::IsNotNull( str )) {
HXLINE(3287)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3287)			_hx_tmp = true;
            		}
HXDLIN(3287)		if (_hx_tmp) {
HXLINE(3288)			return false;
            		}
HXLINE(3290)		::String _g = str.toLowerCase();
HXDLIN(3290)		::String _hx_switch_0 = _g;
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ||  (_hx_switch_0==HX_("false",a3,35,4f,fb)) ||  (_hx_switch_0==HX_("no",41,60,00,00)) ){
HXLINE(3291)			return false;
HXDLIN(3291)			goto _hx_goto_175;
            		}
            		/* default */{
HXLINE(3292)			return true;
            		}
            		_hx_goto_175:;
HXLINE(3290)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toBool,return )

 ::haxe::io::Bytes Strings_obj::toBytes(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3306_toBytes)
HXLINE(3309)		if (hx::IsNull( str )) {
HXLINE(3310)			return null();
            		}
HXLINE(3312)		return ::haxe::io::Bytes_obj::ofString(str,null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toBytes,return )

int Strings_obj::toChar(int charCode){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3327_toChar)
HXDLIN(3327)		return charCode;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toChar,return )

 ::hx::strings::CharIterator Strings_obj::toCharIterator(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3341_toCharIterator)
HXDLIN(3341)		if (hx::IsNull( str )) {
HXDLIN(3341)			return ::hx::strings::_CharIterator::NullCharIterator_obj::INSTANCE;
            		}
            		else {
HXDLIN(3341)			return  ::hx::strings::_CharIterator::StringCharIterator_obj::__alloc( HX_CTX ,str,(int)0);
            		}
HXDLIN(3341)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toCharIterator,return )

::Array< int > Strings_obj::toChars(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3354_toChars)
HXLINE(3355)		if (hx::IsNull( str )) {
HXLINE(3356)			return null();
            		}
HXLINE(3358)		int strLen;
HXDLIN(3358)		if (hx::IsNull( str )) {
HXLINE(3358)			strLen = (int)0;
            		}
            		else {
HXLINE(3358)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(3360)		if ((strLen == (int)0)) {
HXLINE(3361)			return ::Array_obj< int >::__new(0);
            		}
HXLINE(3363)		::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(3363)		{
HXLINE(3363)			int _g2 = (int)0;
HXDLIN(3363)			int _g1 = strLen;
HXDLIN(3363)			while((_g2 < _g1)){
HXLINE(3363)				_g2 = (_g2 + (int)1);
HXDLIN(3363)				int i = (_g2 - (int)1);
HXDLIN(3363)				_g->push(::haxe::Utf8_obj::charCodeAt(str,i));
            			}
            		}
HXDLIN(3363)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toChars,return )

 ::hx::strings::Pattern Strings_obj::toPattern(::String str, ::hx::strings::internal::_Either3::_Either3 options){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3375_toPattern)
HXLINE(3376)		if (hx::IsNull( str )) {
HXLINE(3377)			return null();
            		}
HXLINE(3378)		return ::hx::strings::Pattern_obj::compile(str,options);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toPattern,return )

 ::EReg Strings_obj::toEReg(::String str,::String __o_opt){
::String opt = __o_opt.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3390_toEReg)
HXLINE(3391)		if (hx::IsNull( str )) {
HXLINE(3392)			return null();
            		}
HXLINE(3393)		return  ::EReg_obj::__alloc( HX_CTX ,str,opt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toEReg,return )

 ::Dynamic Strings_obj::toFloat(::String str, ::Dynamic ifUnparseable){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3412_toFloat)
HXLINE(3413)		Float result = ::Std_obj::parseFloat(str);
HXLINE(3414)		if (::Math_obj::isNaN(result)) {
HXLINE(3415)			return ifUnparseable;
            		}
HXLINE(3416)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toFloat,return )

::String Strings_obj::toHex(int num,hx::Null< int >  __o_minDigits,hx::Null< bool >  __o_upperCase){
int minDigits = __o_minDigits.Default(0);
bool upperCase = __o_upperCase.Default(true);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3437_toHex)
HXLINE(3438)		::String hexed = ::StringTools_obj::hex(num,(int)0);
HXLINE(3439)		if (!(upperCase)) {
HXLINE(3440)			return hexed.toLowerCase();
            		}
HXLINE(3442)		if ((hexed.length >= minDigits)) {
HXLINE(3443)			return hexed;
            		}
HXLINE(3444)		return ::hx::strings::Strings_obj::lpad(hexed,minDigits,HX_("0",30,00,00,00),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Strings_obj,toHex,return )

 ::Dynamic Strings_obj::toInt(::String str, ::Dynamic ifUnparseable){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3463_toInt)
HXLINE(3464)		 ::Dynamic result = ::Std_obj::parseInt(str);
HXLINE(3465)		if (hx::IsNull( result )) {
HXLINE(3466)			return ifUnparseable;
            		}
HXLINE(3467)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toInt,return )

::String Strings_obj::toLowerCase8(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3483_toLowerCase8)
HXLINE(3484)		bool _hx_tmp;
HXDLIN(3484)		if (hx::IsNotNull( str )) {
HXLINE(3484)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3484)			_hx_tmp = true;
            		}
HXDLIN(3484)		if (_hx_tmp) {
HXLINE(3485)			return str;
            		}
HXLINE(3496)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(3497)		{
HXLINE(3497)			int _g1 = (int)0;
HXDLIN(3497)			int _g;
HXDLIN(3497)			if (hx::IsNull( str )) {
HXLINE(3497)				_g = (int)0;
            			}
            			else {
HXLINE(3497)				_g = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(3497)			while((_g1 < _g)){
HXLINE(3497)				_g1 = (_g1 + (int)1);
HXDLIN(3497)				int i = (_g1 - (int)1);
HXLINE(3498)				int this1 = ::haxe::Utf8_obj::charCodeAt(str,i);
HXDLIN(3498)				 ::Dynamic lowerChar = ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->get(this1);
HXDLIN(3498)				int _hx_tmp1;
HXDLIN(3498)				if (hx::IsNull( lowerChar )) {
HXLINE(3498)					_hx_tmp1 = this1;
            				}
            				else {
HXLINE(3498)					_hx_tmp1 = lowerChar;
            				}
HXDLIN(3498)				sb->addChar(_hx_tmp1);
            			}
            		}
HXLINE(3500)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toLowerCase8,return )

::String Strings_obj::toLowerCaseFirstChar(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3517_toLowerCaseFirstChar)
HXLINE(3518)		bool _hx_tmp;
HXDLIN(3518)		if (hx::IsNotNull( str )) {
HXLINE(3518)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3518)			_hx_tmp = true;
            		}
HXDLIN(3518)		if (_hx_tmp) {
HXLINE(3519)			return str;
            		}
HXLINE(3521)		int this1 = ::haxe::Utf8_obj::charCodeAt(str,(int)0);
HXDLIN(3521)		 ::Dynamic lowerChar = ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->get(this1);
HXDLIN(3521)		int firstChar;
HXDLIN(3521)		if (hx::IsNull( lowerChar )) {
HXLINE(3521)			firstChar = this1;
            		}
            		else {
HXLINE(3521)			firstChar = lowerChar;
            		}
HXLINE(3523)		if ((str.length == (int)1)) {
HXLINE(3524)			return ::hx::strings::_Char::Char_Impl__obj::toString(firstChar);
            		}
HXLINE(3526)		::String other = ::hx::strings::Strings_obj::substr8(str,(int)1,null());
HXDLIN(3526)		return (::hx::strings::_Char::Char_Impl__obj::toString(firstChar) + other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toLowerCaseFirstChar,return )

::String Strings_obj::toLowerCamel(::String str,hx::Null< bool >  __o_keepUppercasedWords){
bool keepUppercasedWords = __o_keepUppercasedWords.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3548_toLowerCamel)
HXLINE(3549)		bool _hx_tmp;
HXDLIN(3549)		if (hx::IsNotNull( str )) {
HXLINE(3549)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3549)			_hx_tmp = true;
            		}
HXDLIN(3549)		if (_hx_tmp) {
HXLINE(3550)			return str;
            		}
HXLINE(3552)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(3553)		if (keepUppercasedWords) {
HXLINE(3554)			int _g = (int)0;
HXDLIN(3554)			::Array< ::String > _g1 = ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str);
HXDLIN(3554)			while((_g < _g1->length)){
HXLINE(3554)				::String word = _g1->__get(_g);
HXDLIN(3554)				_g = (_g + (int)1);
HXLINE(3555)				{
HXLINE(3555)					::String item = ::hx::strings::Strings_obj::toUpperCaseFirstChar(word);
HXDLIN(3555)					{
HXLINE(3555)						 ::StringBuf _this = sb->sb;
HXDLIN(3555)						if (hx::IsNotNull( _this->charBuf )) {
HXLINE(3555)							_this->flush();
            						}
HXDLIN(3555)						if (hx::IsNull( _this->b )) {
HXLINE(3555)							_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            						}
            						else {
HXLINE(3555)							::Array< ::String > _this1 = _this->b;
HXDLIN(3555)							_this1->push(::Std_obj::string(item));
            						}
            					}
HXDLIN(3555)					 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(3555)					int sb2 = sb1->len;
HXDLIN(3555)					int _hx_tmp1;
HXDLIN(3555)					if (hx::IsNull( item )) {
HXLINE(3555)						_hx_tmp1 = (int)0;
            					}
            					else {
HXLINE(3555)						_hx_tmp1 = ::haxe::Utf8_obj::length(item);
            					}
HXDLIN(3555)					sb1->len = (sb2 + _hx_tmp1);
            				}
            			}
            		}
            		else {
HXLINE(3557)			int _g2 = (int)0;
HXDLIN(3557)			::Array< ::String > _g11 = ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str);
HXDLIN(3557)			while((_g2 < _g11->length)){
HXLINE(3557)				::String word1 = _g11->__get(_g2);
HXDLIN(3557)				_g2 = (_g2 + (int)1);
HXLINE(3558)				{
HXLINE(3558)					::String item1 = ::hx::strings::Strings_obj::toUpperCaseFirstChar(::hx::strings::Strings_obj::toLowerCase8(word1));
HXDLIN(3558)					{
HXLINE(3558)						 ::StringBuf _this2 = sb->sb;
HXDLIN(3558)						if (hx::IsNotNull( _this2->charBuf )) {
HXLINE(3558)							_this2->flush();
            						}
HXDLIN(3558)						if (hx::IsNull( _this2->b )) {
HXLINE(3558)							_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item1));
            						}
            						else {
HXLINE(3558)							::Array< ::String > _this3 = _this2->b;
HXDLIN(3558)							_this3->push(::Std_obj::string(item1));
            						}
            					}
HXDLIN(3558)					 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN(3558)					int sb4 = sb3->len;
HXDLIN(3558)					int _hx_tmp2;
HXDLIN(3558)					if (hx::IsNull( item1 )) {
HXLINE(3558)						_hx_tmp2 = (int)0;
            					}
            					else {
HXLINE(3558)						_hx_tmp2 = ::haxe::Utf8_obj::length(item1);
            					}
HXDLIN(3558)					sb3->len = (sb4 + _hx_tmp2);
            				}
            			}
            		}
HXLINE(3559)		return ::hx::strings::Strings_obj::toLowerCaseFirstChar(sb->toString());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toLowerCamel,return )

::String Strings_obj::toLowerHyphen(::String str){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3584_toLowerHyphen)
HXLINE(3584)			return ::hx::strings::Strings_obj::toLowerCase8(s);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3580_toLowerHyphen)
HXLINE(3581)		bool _hx_tmp;
HXDLIN(3581)		if (hx::IsNotNull( str )) {
HXLINE(3581)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3581)			_hx_tmp = true;
            		}
HXDLIN(3581)		if (_hx_tmp) {
HXLINE(3582)			return str;
            		}
HXLINE(3584)		return ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str)->map( ::Dynamic(new _hx_Closure_0()))->join(HX_("-",2d,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toLowerHyphen,return )

::String Strings_obj::toLowerUnderscore(::String str){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3609_toLowerUnderscore)
HXLINE(3609)			return ::hx::strings::Strings_obj::toLowerCase8(s);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3605_toLowerUnderscore)
HXLINE(3606)		bool _hx_tmp;
HXDLIN(3606)		if (hx::IsNotNull( str )) {
HXLINE(3606)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3606)			_hx_tmp = true;
            		}
HXDLIN(3606)		if (_hx_tmp) {
HXLINE(3607)			return str;
            		}
HXLINE(3609)		return ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str)->map( ::Dynamic(new _hx_Closure_0()))->join(HX_("_",5f,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toLowerUnderscore,return )

::String Strings_obj::toTitle(::String str,hx::Null< bool >  __o_keepUppercasedWords){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		::String _hx_run(::String s1){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3639_toTitle)
HXLINE(3639)			return ::hx::strings::Strings_obj::toUpperCaseFirstChar(::hx::strings::Strings_obj::toLowerCase8(s1));
            		}
            		HX_END_LOCAL_FUNC1(return)

bool keepUppercasedWords = __o_keepUppercasedWords.Default(true);
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3629_toTitle)
HXLINE(3630)		bool _hx_tmp;
HXDLIN(3630)		if (hx::IsNotNull( str )) {
HXLINE(3630)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3630)			_hx_tmp = true;
            		}
HXDLIN(3630)		if (_hx_tmp) {
HXLINE(3631)			return str;
            		}
HXLINE(3633)		if (keepUppercasedWords) {
            			HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			::String _hx_run(::String s){
            				HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3635_toTitle)
HXLINE(3635)				if ((::hx::strings::Strings_obj::toUpperCase8(s) == s)) {
HXLINE(3635)					return s;
            				}
            				else {
HXLINE(3635)					return ::hx::strings::Strings_obj::toUpperCaseFirstChar(::hx::strings::Strings_obj::toLowerCase8(s));
            				}
HXDLIN(3635)				return null();
            			}
            			HX_END_LOCAL_FUNC1(return)

HXLINE(3634)			return ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str)->map( ::Dynamic(new _hx_Closure_0()))->join(HX_(" ",20,00,00,00));
            		}
HXLINE(3638)		return ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str)->map( ::Dynamic(new _hx_Closure_1()))->join(HX_(" ",20,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toTitle,return )

::String Strings_obj::toUpperCamel(::String str,hx::Null< bool >  __o_keepUppercasedWords){
bool keepUppercasedWords = __o_keepUppercasedWords.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3658_toUpperCamel)
HXLINE(3659)		bool _hx_tmp;
HXDLIN(3659)		if (hx::IsNotNull( str )) {
HXLINE(3659)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3659)			_hx_tmp = true;
            		}
HXDLIN(3659)		if (_hx_tmp) {
HXLINE(3660)			return str;
            		}
HXLINE(3662)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(3663)		if (keepUppercasedWords) {
HXLINE(3664)			int _g = (int)0;
HXDLIN(3664)			::Array< ::String > _g1 = ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str);
HXDLIN(3664)			while((_g < _g1->length)){
HXLINE(3664)				::String word = _g1->__get(_g);
HXDLIN(3664)				_g = (_g + (int)1);
HXLINE(3665)				{
HXLINE(3665)					::String item = ::hx::strings::Strings_obj::toUpperCaseFirstChar(word);
HXDLIN(3665)					{
HXLINE(3665)						 ::StringBuf _this = sb->sb;
HXDLIN(3665)						if (hx::IsNotNull( _this->charBuf )) {
HXLINE(3665)							_this->flush();
            						}
HXDLIN(3665)						if (hx::IsNull( _this->b )) {
HXLINE(3665)							_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            						}
            						else {
HXLINE(3665)							::Array< ::String > _this1 = _this->b;
HXDLIN(3665)							_this1->push(::Std_obj::string(item));
            						}
            					}
HXDLIN(3665)					 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(3665)					int sb2 = sb1->len;
HXDLIN(3665)					int _hx_tmp1;
HXDLIN(3665)					if (hx::IsNull( item )) {
HXLINE(3665)						_hx_tmp1 = (int)0;
            					}
            					else {
HXLINE(3665)						_hx_tmp1 = ::haxe::Utf8_obj::length(item);
            					}
HXDLIN(3665)					sb1->len = (sb2 + _hx_tmp1);
            				}
            			}
            		}
            		else {
HXLINE(3667)			int _g2 = (int)0;
HXDLIN(3667)			::Array< ::String > _g11 = ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str);
HXDLIN(3667)			while((_g2 < _g11->length)){
HXLINE(3667)				::String word1 = _g11->__get(_g2);
HXDLIN(3667)				_g2 = (_g2 + (int)1);
HXLINE(3668)				{
HXLINE(3668)					::String item1 = ::hx::strings::Strings_obj::toUpperCaseFirstChar(::hx::strings::Strings_obj::toLowerCase8(word1));
HXDLIN(3668)					{
HXLINE(3668)						 ::StringBuf _this2 = sb->sb;
HXDLIN(3668)						if (hx::IsNotNull( _this2->charBuf )) {
HXLINE(3668)							_this2->flush();
            						}
HXDLIN(3668)						if (hx::IsNull( _this2->b )) {
HXLINE(3668)							_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item1));
            						}
            						else {
HXLINE(3668)							::Array< ::String > _this3 = _this2->b;
HXDLIN(3668)							_this3->push(::Std_obj::string(item1));
            						}
            					}
HXDLIN(3668)					 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN(3668)					int sb4 = sb3->len;
HXDLIN(3668)					int _hx_tmp2;
HXDLIN(3668)					if (hx::IsNull( item1 )) {
HXLINE(3668)						_hx_tmp2 = (int)0;
            					}
            					else {
HXLINE(3668)						_hx_tmp2 = ::haxe::Utf8_obj::length(item1);
            					}
HXDLIN(3668)					sb3->len = (sb4 + _hx_tmp2);
            				}
            			}
            		}
HXLINE(3669)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,toUpperCamel,return )

::String Strings_obj::toUpperUnderscore(::String str){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		::String _hx_run(::String s){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3690_toUpperUnderscore)
HXLINE(3690)			return ::hx::strings::Strings_obj::toUpperCase8(s);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3686_toUpperUnderscore)
HXLINE(3687)		bool _hx_tmp;
HXDLIN(3687)		if (hx::IsNotNull( str )) {
HXLINE(3687)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3687)			_hx_tmp = true;
            		}
HXDLIN(3687)		if (_hx_tmp) {
HXLINE(3688)			return str;
            		}
HXLINE(3690)		return ::hx::strings::Strings_obj::_splitAsciiWordsUnsafe(str)->map( ::Dynamic(new _hx_Closure_0()))->join(HX_("_",5f,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toUpperUnderscore,return )

::String Strings_obj::toString(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3705_toString)
HXDLIN(3705)		if (hx::IsNull( str )) {
HXDLIN(3705)			return HX_("null",87,9e,0e,49);
            		}
            		else {
HXDLIN(3705)			return str;
            		}
HXDLIN(3705)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toString,return )

::String Strings_obj::toUpperCase8(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3721_toUpperCase8)
HXLINE(3722)		bool _hx_tmp;
HXDLIN(3722)		if (hx::IsNotNull( str )) {
HXLINE(3722)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3722)			_hx_tmp = true;
            		}
HXDLIN(3722)		if (_hx_tmp) {
HXLINE(3723)			return str;
            		}
HXLINE(3734)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(3735)		{
HXLINE(3735)			int _g1 = (int)0;
HXDLIN(3735)			int _g;
HXDLIN(3735)			if (hx::IsNull( str )) {
HXLINE(3735)				_g = (int)0;
            			}
            			else {
HXLINE(3735)				_g = ::haxe::Utf8_obj::length(str);
            			}
HXDLIN(3735)			while((_g1 < _g)){
HXLINE(3735)				_g1 = (_g1 + (int)1);
HXDLIN(3735)				int i = (_g1 - (int)1);
HXLINE(3736)				int this1 = ::haxe::Utf8_obj::charCodeAt(str,i);
HXDLIN(3736)				 ::Dynamic upperChar = ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapL2U->get(this1);
HXDLIN(3736)				int _hx_tmp1;
HXDLIN(3736)				if (hx::IsNull( upperChar )) {
HXLINE(3736)					_hx_tmp1 = this1;
            				}
            				else {
HXLINE(3736)					_hx_tmp1 = upperChar;
            				}
HXDLIN(3736)				sb->addChar(_hx_tmp1);
            			}
            		}
HXLINE(3738)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toUpperCase8,return )

::String Strings_obj::toUpperCaseFirstChar(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3756_toUpperCaseFirstChar)
HXLINE(3757)		bool _hx_tmp;
HXDLIN(3757)		if (hx::IsNotNull( str )) {
HXLINE(3757)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3757)			_hx_tmp = true;
            		}
HXDLIN(3757)		if (_hx_tmp) {
HXLINE(3758)			return str;
            		}
HXLINE(3760)		int this1 = ::haxe::Utf8_obj::charCodeAt(str,(int)0);
HXDLIN(3760)		 ::Dynamic upperChar = ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapL2U->get(this1);
HXDLIN(3760)		int firstChar;
HXDLIN(3760)		if (hx::IsNull( upperChar )) {
HXLINE(3760)			firstChar = this1;
            		}
            		else {
HXLINE(3760)			firstChar = upperChar;
            		}
HXLINE(3762)		if ((str.length == (int)1)) {
HXLINE(3763)			return ::hx::strings::_Char::Char_Impl__obj::toString(firstChar);
            		}
HXLINE(3764)		::String other = ::hx::strings::Strings_obj::substr8(str,(int)1,null());
HXDLIN(3764)		return (::hx::strings::_Char::Char_Impl__obj::toString(firstChar) + other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,toUpperCaseFirstChar,return )

::String Strings_obj::trim(::String str, ::hx::strings::internal::_Either2::_Either2 charsToRemove){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3782_trim)
HXLINE(3783)		bool _hx_tmp;
HXDLIN(3783)		if (hx::IsNotNull( str )) {
HXLINE(3783)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3783)			_hx_tmp = true;
            		}
HXDLIN(3783)		if (_hx_tmp) {
HXLINE(3784)			return str;
            		}
HXLINE(3786)		if (hx::IsNull( charsToRemove )) {
HXLINE(3787)			return ::StringTools_obj::trim(str);
            		}
HXLINE(3789)		::Array< int > removableChars;
HXDLIN(3789)		 ::hx::strings::internal::_Either2::_Either2 _g = charsToRemove;
HXDLIN(3789)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(3790)				::String str1 = ( (::String)(_g->_hx_getObject(0)) );
HXLINE(3789)				removableChars = ::hx::strings::Strings_obj::toChars(str1);
            			}
            			break;
            			case (int)1: {
HXLINE(3791)				::Array< int > chars = ( (::Array< int >)(_g->_hx_getObject(0)) );
HXLINE(3789)				removableChars = chars;
            			}
            			break;
            		}
HXLINE(3794)		 ::hx::strings::internal::_Either2::_Either2 this1 = ::hx::strings::internal::_Either2::_Either2_obj::b(removableChars);
HXDLIN(3794)		::String _hx_tmp1 = ::hx::strings::Strings_obj::trimRight(str,this1);
HXDLIN(3794)		 ::hx::strings::internal::_Either2::_Either2 this2 = ::hx::strings::internal::_Either2::_Either2_obj::b(removableChars);
HXDLIN(3794)		return ::hx::strings::Strings_obj::trimLeft(_hx_tmp1,this2);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trim,return )

::String Strings_obj::trimRight(::String str, ::hx::strings::internal::_Either2::_Either2 charsToRemove){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3814_trimRight)
HXLINE(3815)		bool _hx_tmp;
HXDLIN(3815)		if (hx::IsNotNull( str )) {
HXLINE(3815)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3815)			_hx_tmp = true;
            		}
HXDLIN(3815)		if (_hx_tmp) {
HXLINE(3816)			return str;
            		}
HXLINE(3818)		if (hx::IsNull( charsToRemove )) {
HXLINE(3819)			return ::StringTools_obj::rtrim(str);
            		}
HXLINE(3821)		::Array< int > removableChars;
HXDLIN(3821)		 ::hx::strings::internal::_Either2::_Either2 _g = charsToRemove;
HXDLIN(3821)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(3822)				::String str1 = ( (::String)(_g->_hx_getObject(0)) );
HXLINE(3821)				removableChars = ::hx::strings::Strings_obj::toChars(str1);
            			}
            			break;
            			case (int)1: {
HXLINE(3823)				::Array< int > chars = ( (::Array< int >)(_g->_hx_getObject(0)) );
HXLINE(3821)				removableChars = chars;
            			}
            			break;
            		}
HXLINE(3826)		if ((removableChars->length == (int)0)) {
HXLINE(3827)			return str;
            		}
HXLINE(3829)		int len;
HXDLIN(3829)		if (hx::IsNull( str )) {
HXLINE(3829)			len = (int)0;
            		}
            		else {
HXLINE(3829)			len = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(3830)		int i = (len - (int)1);
HXLINE(3831)		while(true){
HXLINE(3831)			bool _hx_tmp1;
HXDLIN(3831)			if ((i > (int)-1)) {
HXLINE(3831)				::String str2 = ::hx::strings::Strings_obj::charAt8(str,i,null());
HXDLIN(3831)				int strLen;
HXDLIN(3831)				if (hx::IsNull( str2 )) {
HXLINE(3831)					strLen = (int)0;
            				}
            				else {
HXLINE(3831)					strLen = ::haxe::Utf8_obj::length(str2);
            				}
HXDLIN(3831)				int _hx_tmp2;
HXDLIN(3831)				bool _hx_tmp3;
HXDLIN(3831)				if ((strLen != (int)0)) {
HXLINE(3831)					_hx_tmp3 = ((int)0 >= strLen);
            				}
            				else {
HXLINE(3831)					_hx_tmp3 = true;
            				}
HXDLIN(3831)				if (_hx_tmp3) {
HXLINE(3831)					_hx_tmp2 = (int)-1;
            				}
            				else {
HXLINE(3831)					_hx_tmp2 = ::haxe::Utf8_obj::charCodeAt(str2,(int)0);
            				}
HXDLIN(3831)				_hx_tmp1 = (removableChars->indexOf(_hx_tmp2,null()) > (int)-1);
            			}
            			else {
HXLINE(3831)				_hx_tmp1 = false;
            			}
HXDLIN(3831)			if (!(_hx_tmp1)) {
HXLINE(3831)				goto _hx_goto_210;
            			}
HXLINE(3832)			i = (i - (int)1);
            		}
            		_hx_goto_210:;
HXLINE(3834)		if ((i < (len - (int)1))) {
HXLINE(3835)			return ::hx::strings::Strings_obj::substring8(str,(int)0,(i + (int)1));
            		}
HXLINE(3836)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trimRight,return )

::String Strings_obj::trimLeft(::String str, ::hx::strings::internal::_Either2::_Either2 charsToRemove){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3856_trimLeft)
HXLINE(3857)		if (hx::IsNull( str )) {
HXLINE(3858)			return str;
            		}
HXLINE(3860)		if (hx::IsNull( charsToRemove )) {
HXLINE(3861)			return ::StringTools_obj::ltrim(str);
            		}
HXLINE(3863)		::Array< int > removableChars;
HXDLIN(3863)		 ::hx::strings::internal::_Either2::_Either2 _g = charsToRemove;
HXDLIN(3863)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(3864)				::String str1 = ( (::String)(_g->_hx_getObject(0)) );
HXLINE(3863)				removableChars = ::hx::strings::Strings_obj::toChars(str1);
            			}
            			break;
            			case (int)1: {
HXLINE(3865)				::Array< int > chars = ( (::Array< int >)(_g->_hx_getObject(0)) );
HXLINE(3863)				removableChars = chars;
            			}
            			break;
            		}
HXLINE(3868)		if ((removableChars->length == (int)0)) {
HXLINE(3869)			return str;
            		}
HXLINE(3871)		int len;
HXDLIN(3871)		if (hx::IsNull( str )) {
HXLINE(3871)			len = (int)0;
            		}
            		else {
HXLINE(3871)			len = ::haxe::Utf8_obj::length(str);
            		}
HXLINE(3872)		int i = (int)0;
HXLINE(3873)		while(true){
HXLINE(3873)			bool _hx_tmp;
HXDLIN(3873)			if ((i < len)) {
HXLINE(3873)				::String str2 = ::hx::strings::Strings_obj::charAt8(str,i,null());
HXDLIN(3873)				int strLen;
HXDLIN(3873)				if (hx::IsNull( str2 )) {
HXLINE(3873)					strLen = (int)0;
            				}
            				else {
HXLINE(3873)					strLen = ::haxe::Utf8_obj::length(str2);
            				}
HXDLIN(3873)				int _hx_tmp1;
HXDLIN(3873)				bool _hx_tmp2;
HXDLIN(3873)				if ((strLen != (int)0)) {
HXLINE(3873)					_hx_tmp2 = ((int)0 >= strLen);
            				}
            				else {
HXLINE(3873)					_hx_tmp2 = true;
            				}
HXDLIN(3873)				if (_hx_tmp2) {
HXLINE(3873)					_hx_tmp1 = (int)-1;
            				}
            				else {
HXLINE(3873)					_hx_tmp1 = ::haxe::Utf8_obj::charCodeAt(str2,(int)0);
            				}
HXDLIN(3873)				_hx_tmp = (removableChars->indexOf(_hx_tmp1,null()) > (int)-1);
            			}
            			else {
HXLINE(3873)				_hx_tmp = false;
            			}
HXDLIN(3873)			if (!(_hx_tmp)) {
HXLINE(3873)				goto _hx_goto_212;
            			}
HXLINE(3874)			i = (i + (int)1);
            		}
            		_hx_goto_212:;
HXLINE(3876)		if ((i > (int)0)) {
HXLINE(3877)			return ::hx::strings::Strings_obj::substring8(str,i,len);
            		}
HXLINE(3878)		return str;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trimLeft,return )

::String Strings_obj::trimLines(::String str, ::hx::strings::internal::_Either2::_Either2 charsToRemove){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0, ::hx::strings::internal::_Either2::_Either2,charsToRemove) HXARGC(1)
            		::String _hx_run(::String line){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3898_trimLines)
HXLINE(3898)			return ::hx::strings::Strings_obj::trim(line,charsToRemove);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3894_trimLines)
HXLINE(3895)		bool _hx_tmp;
HXDLIN(3895)		if (hx::IsNotNull( str )) {
HXLINE(3895)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3895)			_hx_tmp = true;
            		}
HXDLIN(3895)		if (_hx_tmp) {
HXLINE(3896)			return str;
            		}
HXLINE(3898)		return ::hx::strings::Strings_obj::REGEX_SPLIT_LINES->ereg->split(str)->map( ::Dynamic(new _hx_Closure_0(charsToRemove)))->join(HX_("\n",0a,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,trimLines,return )

::String Strings_obj::trimToNull(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3911_trimToNull)
HXLINE(3912)		if (hx::IsNull( str )) {
HXLINE(3913)			return null();
            		}
HXLINE(3915)		::String trimmed = ::hx::strings::Strings_obj::trim(str,null());
HXLINE(3917)		bool _hx_tmp;
HXDLIN(3917)		if (hx::IsNotNull( trimmed )) {
HXLINE(3917)			_hx_tmp = (trimmed.length == (int)0);
            		}
            		else {
HXLINE(3917)			_hx_tmp = true;
            		}
HXDLIN(3917)		if (_hx_tmp) {
HXLINE(3918)			return null();
            		}
HXLINE(3920)		return trimmed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,trimToNull,return )

::String Strings_obj::trimToEmpty(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3933_trimToEmpty)
HXLINE(3934)		::String trimmed = ::hx::strings::Strings_obj::trim(str,null());
HXLINE(3936)		bool _hx_tmp;
HXDLIN(3936)		if (hx::IsNotNull( trimmed )) {
HXLINE(3936)			_hx_tmp = (trimmed.length == (int)0);
            		}
            		else {
HXLINE(3936)			_hx_tmp = true;
            		}
HXDLIN(3936)		if (_hx_tmp) {
HXLINE(3937)			return HX_("",00,00,00,00);
            		}
HXLINE(3939)		return trimmed;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,trimToEmpty,return )

::String Strings_obj::truncate(::String str,int maxLength){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3955_truncate)
HXDLIN(3955)		int _hx_tmp;
HXDLIN(3955)		if (hx::IsNull( str )) {
HXDLIN(3955)			_hx_tmp = (int)0;
            		}
            		else {
HXDLIN(3955)			_hx_tmp = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN(3955)		if ((_hx_tmp <= maxLength)) {
HXDLIN(3955)			return str;
            		}
            		else {
HXDLIN(3955)			return ::hx::strings::Strings_obj::substring8(str,(int)0,maxLength);
            		}
HXDLIN(3955)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Strings_obj,truncate,return )

::String Strings_obj::urlDecode(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3967_urlDecode)
HXLINE(3968)		bool _hx_tmp;
HXDLIN(3968)		if (hx::IsNotNull( str )) {
HXLINE(3968)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3968)			_hx_tmp = true;
            		}
HXDLIN(3968)		if (_hx_tmp) {
HXLINE(3969)			return str;
            		}
HXLINE(3978)		return ::StringTools_obj::urlDecode(str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,urlDecode,return )

::String Strings_obj::urlEncode(::String str){
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_3993_urlEncode)
HXLINE(3994)		bool _hx_tmp;
HXDLIN(3994)		if (hx::IsNotNull( str )) {
HXLINE(3994)			_hx_tmp = (str.length == (int)0);
            		}
            		else {
HXLINE(3994)			_hx_tmp = true;
            		}
HXDLIN(3994)		if (_hx_tmp) {
HXLINE(3995)			return str;
            		}
HXLINE(4004)		return ::StringTools_obj::urlEncode(str);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Strings_obj,urlEncode,return )

::String Strings_obj::wrap(::String str,int maxLineLength,hx::Null< bool >  __o_splitLongWords,::String __o_newLineSeparator){
bool splitLongWords = __o_splitLongWords.Default(true);
::String newLineSeparator = __o_newLineSeparator.Default(HX_HCSTRING("\n","\x0a","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_fd0a69697a336cdd_4020_wrap)
HXLINE(4021)		bool _hx_tmp;
HXDLIN(4021)		int _hx_tmp1;
HXDLIN(4021)		if (hx::IsNull( str )) {
HXLINE(4021)			_hx_tmp1 = (int)0;
            		}
            		else {
HXLINE(4021)			_hx_tmp1 = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN(4021)		if ((_hx_tmp1 > maxLineLength)) {
HXLINE(4021)			_hx_tmp = (maxLineLength < (int)1);
            		}
            		else {
HXLINE(4021)			_hx_tmp = true;
            		}
HXDLIN(4021)		if (_hx_tmp) {
HXLINE(4022)			return str;
            		}
HXLINE(4024)		 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(4025)		::Array< int > wordChars = ::Array_obj< int >::__new(0);
HXLINE(4026)		int currLineLength = (int)0;
HXLINE(4027)		{
HXLINE(4027)			int _g = (int)0;
HXDLIN(4027)			::Array< int > _g1 = ::hx::strings::Strings_obj::toChars(str);
HXDLIN(4027)			while((_g < _g1->length)){
HXLINE(4027)				int ch = _g1->__get(_g);
HXDLIN(4027)				_g = (_g + (int)1);
HXLINE(4028)				bool _hx_tmp2;
HXDLIN(4028)				bool _hx_tmp3;
HXDLIN(4028)				if ((ch > (int)8)) {
HXLINE(4028)					_hx_tmp3 = (ch < (int)14);
            				}
            				else {
HXLINE(4028)					_hx_tmp3 = false;
            				}
HXDLIN(4028)				if (!(_hx_tmp3)) {
HXLINE(4028)					_hx_tmp2 = (ch == (int)32);
            				}
            				else {
HXLINE(4028)					_hx_tmp2 = true;
            				}
HXDLIN(4028)				if (_hx_tmp2) {
HXLINE(4029)					if ((wordChars->length > (int)0)) {
HXLINE(4030)						{
HXLINE(4030)							int _g2 = (int)0;
HXDLIN(4030)							while((_g2 < wordChars->length)){
HXLINE(4030)								int wordCh = wordChars->__get(_g2);
HXDLIN(4030)								_g2 = (_g2 + (int)1);
HXLINE(4031)								bool _hx_tmp4;
HXDLIN(4031)								if ((currLineLength == maxLineLength)) {
HXLINE(4031)									_hx_tmp4 = splitLongWords;
            								}
            								else {
HXLINE(4031)									_hx_tmp4 = false;
            								}
HXDLIN(4031)								if (_hx_tmp4) {
HXLINE(4032)									{
HXLINE(4032)										{
HXLINE(4032)											 ::StringBuf _this = sb->sb;
HXDLIN(4032)											if (hx::IsNotNull( _this->charBuf )) {
HXLINE(4032)												_this->flush();
            											}
HXDLIN(4032)											if (hx::IsNull( _this->b )) {
HXLINE(4032)												_this->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(newLineSeparator));
            											}
            											else {
HXLINE(4032)												::Array< ::String > _this1 = _this->b;
HXDLIN(4032)												_this1->push(::Std_obj::string(newLineSeparator));
            											}
            										}
HXDLIN(4032)										 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(4032)										int sb2 = sb1->len;
HXDLIN(4032)										int _hx_tmp5;
HXDLIN(4032)										if (hx::IsNull( newLineSeparator )) {
HXLINE(4032)											_hx_tmp5 = (int)0;
            										}
            										else {
HXLINE(4032)											_hx_tmp5 = ::haxe::Utf8_obj::length(newLineSeparator);
            										}
HXDLIN(4032)										sb1->len = (sb2 + _hx_tmp5);
            									}
HXLINE(4033)									currLineLength = (int)0;
            								}
HXLINE(4035)								currLineLength = (currLineLength + (int)1);
HXLINE(4036)								sb->addChar(wordCh);
            							}
            						}
HXLINE(4038)						wordChars = ::Array_obj< int >::__new(0);
            					}
HXLINE(4040)					if ((currLineLength >= maxLineLength)) {
HXLINE(4041)						{
HXLINE(4041)							{
HXLINE(4041)								 ::StringBuf _this2 = sb->sb;
HXDLIN(4041)								if (hx::IsNotNull( _this2->charBuf )) {
HXLINE(4041)									_this2->flush();
            								}
HXDLIN(4041)								if (hx::IsNull( _this2->b )) {
HXLINE(4041)									_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(newLineSeparator));
            								}
            								else {
HXLINE(4041)									::Array< ::String > _this3 = _this2->b;
HXDLIN(4041)									_this3->push(::Std_obj::string(newLineSeparator));
            								}
            							}
HXDLIN(4041)							 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN(4041)							int sb4 = sb3->len;
HXDLIN(4041)							int _hx_tmp6;
HXDLIN(4041)							if (hx::IsNull( newLineSeparator )) {
HXLINE(4041)								_hx_tmp6 = (int)0;
            							}
            							else {
HXLINE(4041)								_hx_tmp6 = ::haxe::Utf8_obj::length(newLineSeparator);
            							}
HXDLIN(4041)							sb3->len = (sb4 + _hx_tmp6);
            						}
HXLINE(4042)						currLineLength = (int)0;
            					}
HXLINE(4044)					sb->addChar(ch);
HXLINE(4045)					currLineLength = (currLineLength + (int)1);
            				}
            				else {
HXLINE(4048)					wordChars->push(ch);
            				}
            			}
            		}
HXLINE(4051)		if ((wordChars->length > (int)0)) {
HXLINE(4052)			int _g3 = (int)0;
HXDLIN(4052)			while((_g3 < wordChars->length)){
HXLINE(4052)				int wordCh1 = wordChars->__get(_g3);
HXDLIN(4052)				_g3 = (_g3 + (int)1);
HXLINE(4053)				bool _hx_tmp7;
HXDLIN(4053)				if ((currLineLength == maxLineLength)) {
HXLINE(4053)					_hx_tmp7 = splitLongWords;
            				}
            				else {
HXLINE(4053)					_hx_tmp7 = false;
            				}
HXDLIN(4053)				if (_hx_tmp7) {
HXLINE(4054)					{
HXLINE(4054)						{
HXLINE(4054)							 ::StringBuf _this4 = sb->sb;
HXDLIN(4054)							if (hx::IsNotNull( _this4->charBuf )) {
HXLINE(4054)								_this4->flush();
            							}
HXDLIN(4054)							if (hx::IsNull( _this4->b )) {
HXLINE(4054)								_this4->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(newLineSeparator));
            							}
            							else {
HXLINE(4054)								::Array< ::String > _this5 = _this4->b;
HXDLIN(4054)								_this5->push(::Std_obj::string(newLineSeparator));
            							}
            						}
HXDLIN(4054)						 ::hx::strings::StringBuilder sb5 = sb;
HXDLIN(4054)						int sb6 = sb5->len;
HXDLIN(4054)						int _hx_tmp8;
HXDLIN(4054)						if (hx::IsNull( newLineSeparator )) {
HXLINE(4054)							_hx_tmp8 = (int)0;
            						}
            						else {
HXLINE(4054)							_hx_tmp8 = ::haxe::Utf8_obj::length(newLineSeparator);
            						}
HXDLIN(4054)						sb5->len = (sb6 + _hx_tmp8);
            					}
HXLINE(4055)					currLineLength = (int)0;
            				}
HXLINE(4057)				currLineLength = (currLineLength + (int)1);
HXLINE(4058)				sb->addChar(wordCh1);
            			}
            		}
HXLINE(4061)		return sb->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Strings_obj,wrap,return )


Strings_obj::Strings_obj()
{
}

bool Strings_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = map_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"diff") ) { outValue = diff_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"left") ) { outValue = left_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lpad") ) { outValue = lpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rpad") ) { outValue = rpad_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trim") ) { outValue = trim_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"wrap") ) { outValue = wrap_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { outValue = right_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toHex") ) { outValue = toHex_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"diffAt") ) { outValue = diffAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equals") ) { outValue = equals_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filter") ) { outValue = filter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ifNull") ) { outValue = ifNull_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"repeat") ) { outValue = repeat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"split8") ) { outValue = split8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBool") ) { outValue = toBool_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toChar") ) { outValue = toChar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toEReg") ) { outValue = toEReg_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charAt8") ) { outValue = charAt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compact") ) { outValue = compact_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"compare") ) { outValue = compare_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ifBlank") ) { outValue = ifBlank_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ifEmpty") ) { outValue = ifEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isBlank") ) { outValue = isBlank_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { outValue = isEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterate") ) { outValue = iterate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"length8") ) { outValue = length8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reverse") ) { outValue = reverse_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitAt") ) { outValue = splitAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substr8") ) { outValue = substr8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toBytes") ) { outValue = toBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toChars") ) { outValue = toChars_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toTitle") ) { outValue = toTitle_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"NEW_LINE") ) { outValue = ( NEW_LINE ); return true; }
		if (HX_FIELD_EQ(inName,"contains") ) { outValue = contains_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endsWith") ) { outValue = endsWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"hashCode") ) { outValue = hashCode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"insertAt") ) { outValue = insertAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indexOf8") ) { outValue = indexOf8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isDigits") ) { outValue = isDigits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAt") ) { outValue = removeAt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimLeft") ) { outValue = trimLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"truncate") ) { outValue = truncate_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"removeAll") ) { outValue = removeAll_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toPattern") ) { outValue = toPattern_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimRight") ) { outValue = trimRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimLines") ) { outValue = trimLines_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"urlDecode") ) { outValue = urlDecode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"urlEncode") ) { outValue = urlEncode_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"ansiToHtml") ) { outValue = ansiToHtml_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"htmlDecode") ) { outValue = htmlDecode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"htmlEncode") ) { outValue = htmlEncode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNotBlank") ) { outValue = isNotBlank_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isNotEmpty") ) { outValue = isNotEmpty_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAnsi") ) { outValue = removeAnsi_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTags") ) { outValue = removeTags_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replaceAll") ) { outValue = replaceAll_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitEvery") ) { outValue = splitEvery_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"splitLines") ) { outValue = splitLines_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"startsWith") ) { outValue = startsWith_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substring8") ) { outValue = substring8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimToNull") ) { outValue = trimToNull_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charCodeAt8") ) { outValue = charCodeAt8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsAll") ) { outValue = containsAll_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsAny") ) { outValue = containsAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endsWithAny") ) { outValue = endsWithAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"filterChars") ) { outValue = filterChars_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"indentLines") ) { outValue = indentLines_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isLowerCase") ) { outValue = isLowerCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUpperCase") ) { outValue = isUpperCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quoteDouble") ) { outValue = quoteDouble_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"quoteSingle") ) { outValue = quoteSingle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAfter") ) { outValue = removeAfter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFirst") ) { outValue = removeFirst_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"trimToEmpty") ) { outValue = trimToEmpty_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"base64Encode") ) { outValue = base64Encode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"base64Decode") ) { outValue = base64Decode_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsOnly") ) { outValue = containsOnly_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsNone") ) { outValue = containsNone_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"countMatches") ) { outValue = countMatches_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterateChars") ) { outValue = iterateChars_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lastIndexOf8") ) { outValue = lastIndexOf8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeBefore") ) { outValue = removeBefore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replaceFirst") ) { outValue = replaceFirst_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCase8") ) { outValue = toLowerCase8_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCamel") ) { outValue = toLowerCamel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUpperCamel") ) { outValue = toUpperCamel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUpperCase8") ) { outValue = toUpperCase8_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"ellipsizeLeft") ) { outValue = ellipsizeLeft_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeLeading") ) { outValue = removeLeading_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"startsWithAny") ) { outValue = startsWithAny_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerHyphen") ) { outValue = toLowerHyphen_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"REGEX_ANSI_ESC") ) { outValue = ( REGEX_ANSI_ESC ); return true; }
		if (HX_FIELD_EQ(inName,"ellipsizeRight") ) { outValue = ellipsizeRight_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeTrailing") ) { outValue = removeTrailing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringAfter") ) { outValue = substringAfter_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toCharIterator") ) { outValue = toCharIterator_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"appendIfMissing") ) { outValue = appendIfMissing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ellipsizeMiddle") ) { outValue = ellipsizeMiddle_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAfterLast") ) { outValue = removeAfterLast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringBefore") ) { outValue = substringBefore_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"equalsIgnoreCase") ) { outValue = equalsIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getFuzzyDistance") ) { outValue = getFuzzyDistance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prependIfMissing") ) { outValue = prependIfMissing_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeBeforeLast") ) { outValue = removeBeforeLast_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringBetween") ) { outValue = substringBetween_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"REGEX_SPLIT_LINES") ) { outValue = ( REGEX_SPLIT_LINES ); return true; }
		if (HX_FIELD_EQ(inName,"compareIgnoreCase") ) { outValue = compareIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerUnderscore") ) { outValue = toLowerUnderscore_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUpperUnderscore") ) { outValue = toUpperUnderscore_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_charCodeAt8Unsafe") ) { outValue = _charCodeAt8Unsafe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endsWithIgnoreCase") ) { outValue = endsWithIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringAfterLast") ) { outValue = substringAfterLast_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"REGEX_HTML_UNESCAPE") ) { outValue = ( REGEX_HTML_UNESCAPE ); return true; }
		if (HX_FIELD_EQ(inName,"_getNotFoundDefault") ) { outValue = _getNotFoundDefault_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsWhitespaces") ) { outValue = containsWhitespaces_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringBeforeLast") ) { outValue = substringBeforeLast_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"startsWithIgnoreCase") ) { outValue = startsWithIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCaseFirstChar") ) { outValue = toLowerCaseFirstChar_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUpperCaseFirstChar") ) { outValue = toUpperCaseFirstChar_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"REGEX_REMOVE_XML_TAGS") ) { outValue = ( REGEX_REMOVE_XML_TAGS ); return true; }
		if (HX_FIELD_EQ(inName,"containsAllIgnoreCase") ) { outValue = containsAllIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsAnyIgnoreCase") ) { outValue = containsAnyIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"endsWithAnyIgnoreCase") ) { outValue = endsWithAnyIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAfterIgnoreCase") ) { outValue = removeAfterIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeFirstIgnoreCase") ) { outValue = removeFirstIgnoreCase_dyn(); return true; }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"_splitAsciiWordsUnsafe") ) { outValue = _splitAsciiWordsUnsafe_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"containsNoneIgnoreCase") ) { outValue = containsNoneIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"countMatchesIgnoreCase") ) { outValue = countMatchesIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getLevenshteinDistance") ) { outValue = getLevenshteinDistance_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeBeforeIgnoreCase") ) { outValue = removeBeforeIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"replaceFirstIgnoreCase") ) { outValue = replaceFirstIgnoreCase_dyn(); return true; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"startsWithAnyIgnoreCase") ) { outValue = startsWithAnyIgnoreCase_dyn(); return true; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"substringAfterIgnoreCase") ) { outValue = substringAfterIgnoreCase_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"getLongestCommonSubstring") ) { outValue = getLongestCommonSubstring_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"removeAfterLastIgnoreCase") ) { outValue = removeAfterLastIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringBeforeIgnoreCase") ) { outValue = substringBeforeIgnoreCase_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"removeBeforeLastIgnoreCase") ) { outValue = removeBeforeLastIgnoreCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"substringBetweenIgnoreCase") ) { outValue = substringBetweenIgnoreCase_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"substringAfterLastIgnoreCase") ) { outValue = substringAfterLastIgnoreCase_dyn(); return true; }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"substringBeforeLastIgnoreCase") ) { outValue = substringBeforeLastIgnoreCase_dyn(); return true; }
	}
	return false;
}

bool Strings_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"NEW_LINE") ) { NEW_LINE=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"REGEX_ANSI_ESC") ) { REGEX_ANSI_ESC=ioValue.Cast<  ::hx::strings::Pattern >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"REGEX_SPLIT_LINES") ) { REGEX_SPLIT_LINES=ioValue.Cast<  ::hx::strings::Pattern >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"REGEX_HTML_UNESCAPE") ) { REGEX_HTML_UNESCAPE=ioValue.Cast<  ::hx::strings::Pattern >(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"REGEX_REMOVE_XML_TAGS") ) { REGEX_REMOVE_XML_TAGS=ioValue.Cast<  ::hx::strings::Pattern >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Strings_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Strings_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::hx::strings::Pattern*/ ,(void *) &Strings_obj::REGEX_ANSI_ESC,HX_HCSTRING("REGEX_ANSI_ESC","\x31","\x61","\xd8","\x29")},
	{hx::fsObject /*::hx::strings::Pattern*/ ,(void *) &Strings_obj::REGEX_HTML_UNESCAPE,HX_HCSTRING("REGEX_HTML_UNESCAPE","\x56","\x24","\xbd","\x91")},
	{hx::fsObject /*::hx::strings::Pattern*/ ,(void *) &Strings_obj::REGEX_SPLIT_LINES,HX_HCSTRING("REGEX_SPLIT_LINES","\x82","\x3a","\x1c","\x2f")},
	{hx::fsObject /*::hx::strings::Pattern*/ ,(void *) &Strings_obj::REGEX_REMOVE_XML_TAGS,HX_HCSTRING("REGEX_REMOVE_XML_TAGS","\x64","\x25","\x24","\x22")},
	{hx::fsInt,(void *) &Strings_obj::POS_NOT_FOUND,HX_HCSTRING("POS_NOT_FOUND","\xcb","\xfc","\x8f","\x49")},
	{hx::fsString,(void *) &Strings_obj::NEW_LINE_NIX,HX_HCSTRING("NEW_LINE_NIX","\xd1","\xa1","\x46","\x65")},
	{hx::fsString,(void *) &Strings_obj::NEW_LINE_WIN,HX_HCSTRING("NEW_LINE_WIN","\x10","\x76","\x4d","\x65")},
	{hx::fsString,(void *) &Strings_obj::NEW_LINE,HX_HCSTRING("NEW_LINE","\x93","\x27","\x39","\x51")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Strings_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Strings_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Strings_obj::REGEX_ANSI_ESC,"REGEX_ANSI_ESC");
	HX_MARK_MEMBER_NAME(Strings_obj::REGEX_HTML_UNESCAPE,"REGEX_HTML_UNESCAPE");
	HX_MARK_MEMBER_NAME(Strings_obj::REGEX_SPLIT_LINES,"REGEX_SPLIT_LINES");
	HX_MARK_MEMBER_NAME(Strings_obj::REGEX_REMOVE_XML_TAGS,"REGEX_REMOVE_XML_TAGS");
	HX_MARK_MEMBER_NAME(Strings_obj::POS_NOT_FOUND,"POS_NOT_FOUND");
	HX_MARK_MEMBER_NAME(Strings_obj::NEW_LINE_NIX,"NEW_LINE_NIX");
	HX_MARK_MEMBER_NAME(Strings_obj::NEW_LINE_WIN,"NEW_LINE_WIN");
	HX_MARK_MEMBER_NAME(Strings_obj::NEW_LINE,"NEW_LINE");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Strings_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Strings_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Strings_obj::REGEX_ANSI_ESC,"REGEX_ANSI_ESC");
	HX_VISIT_MEMBER_NAME(Strings_obj::REGEX_HTML_UNESCAPE,"REGEX_HTML_UNESCAPE");
	HX_VISIT_MEMBER_NAME(Strings_obj::REGEX_SPLIT_LINES,"REGEX_SPLIT_LINES");
	HX_VISIT_MEMBER_NAME(Strings_obj::REGEX_REMOVE_XML_TAGS,"REGEX_REMOVE_XML_TAGS");
	HX_VISIT_MEMBER_NAME(Strings_obj::POS_NOT_FOUND,"POS_NOT_FOUND");
	HX_VISIT_MEMBER_NAME(Strings_obj::NEW_LINE_NIX,"NEW_LINE_NIX");
	HX_VISIT_MEMBER_NAME(Strings_obj::NEW_LINE_WIN,"NEW_LINE_WIN");
	HX_VISIT_MEMBER_NAME(Strings_obj::NEW_LINE,"NEW_LINE");
};

#endif

hx::Class Strings_obj::__mClass;

static ::String Strings_obj_sStaticFields[] = {
	HX_HCSTRING("REGEX_ANSI_ESC","\x31","\x61","\xd8","\x29"),
	HX_HCSTRING("REGEX_HTML_UNESCAPE","\x56","\x24","\xbd","\x91"),
	HX_HCSTRING("REGEX_SPLIT_LINES","\x82","\x3a","\x1c","\x2f"),
	HX_HCSTRING("REGEX_REMOVE_XML_TAGS","\x64","\x25","\x24","\x22"),
	HX_HCSTRING("POS_NOT_FOUND","\xcb","\xfc","\x8f","\x49"),
	HX_HCSTRING("NEW_LINE_NIX","\xd1","\xa1","\x46","\x65"),
	HX_HCSTRING("NEW_LINE_WIN","\x10","\x76","\x4d","\x65"),
	HX_HCSTRING("NEW_LINE","\x93","\x27","\x39","\x51"),
	HX_HCSTRING("_getNotFoundDefault","\x7b","\xc4","\x74","\xbc"),
	HX_HCSTRING("_charCodeAt8Unsafe","\x09","\x1b","\xac","\xb0"),
	HX_HCSTRING("_splitAsciiWordsUnsafe","\xd9","\x4e","\xc4","\x94"),
	HX_HCSTRING("ansiToHtml","\xa9","\xf7","\x4d","\xef"),
	HX_HCSTRING("appendIfMissing","\xcf","\x63","\x58","\x82"),
	HX_HCSTRING("base64Encode","\x05","\x79","\xb9","\x4b"),
	HX_HCSTRING("base64Decode","\x1d","\xe4","\xc2","\xb6"),
	HX_HCSTRING("charAt8","\xaf","\xc2","\x54","\xcf"),
	HX_HCSTRING("charCodeAt8","\x82","\x30","\xf5","\x74"),
	HX_HCSTRING("compact","\xa3","\x0b","\x69","\x83"),
	HX_HCSTRING("contains","\x1f","\x5a","\x7b","\x2c"),
	HX_HCSTRING("containsOnly","\x2b","\x07","\x28","\xa4"),
	HX_HCSTRING("containsAll","\x42","\x34","\x48","\x24"),
	HX_HCSTRING("containsAllIgnoreCase","\xc4","\xd3","\xfc","\xed"),
	HX_HCSTRING("containsAny","\x0d","\x36","\x48","\x24"),
	HX_HCSTRING("containsAnyIgnoreCase","\x4f","\x21","\xc7","\xfc"),
	HX_HCSTRING("containsNone","\x77","\x94","\x7f","\xa3"),
	HX_HCSTRING("containsNoneIgnoreCase","\x39","\x68","\x38","\x4e"),
	HX_HCSTRING("containsWhitespaces","\x77","\x94","\x20","\xbc"),
	HX_HCSTRING("countMatches","\xe4","\xe7","\xe4","\x14"),
	HX_HCSTRING("countMatchesIgnoreCase","\xe6","\x25","\x57","\x4b"),
	HX_HCSTRING("compare","\xa5","\x18","\x69","\x83"),
	HX_HCSTRING("compareIgnoreCase","\xe7","\x31","\xa6","\x62"),
	HX_HCSTRING("diff","\x05","\x5c","\x69","\x42"),
	HX_HCSTRING("diffAt","\x58","\x60","\x7c","\xb4"),
	HX_HCSTRING("ellipsizeLeft","\xb4","\xe6","\x34","\xa9"),
	HX_HCSTRING("ellipsizeMiddle","\x42","\x77","\xda","\xbf"),
	HX_HCSTRING("ellipsizeRight","\x8f","\x04","\x22","\xdc"),
	HX_HCSTRING("endsWith","\x5e","\x7a","\xb6","\xdb"),
	HX_HCSTRING("endsWithAny","\x2e","\x87","\x65","\xbc"),
	HX_HCSTRING("endsWithAnyIgnoreCase","\xb0","\x85","\xbf","\xb7"),
	HX_HCSTRING("endsWithIgnoreCase","\xe0","\x54","\x92","\x64"),
	HX_HCSTRING("equals","\x3f","\xee","\xf2","\xbf"),
	HX_HCSTRING("equalsIgnoreCase","\x01","\xcc","\x78","\x99"),
	HX_HCSTRING("filter","\xb8","\x1f","\x35","\x85"),
	HX_HCSTRING("filterChars","\x05","\xf2","\x65","\xf5"),
	HX_HCSTRING("getFuzzyDistance","\xa9","\xf2","\x91","\x48"),
	HX_HCSTRING("getLevenshteinDistance","\x10","\xe6","\x09","\x66"),
	HX_HCSTRING("getLongestCommonSubstring","\xb2","\xa7","\x6c","\xf9"),
	HX_HCSTRING("hashCode","\x1b","\x0c","\x75","\x07"),
	HX_HCSTRING("htmlDecode","\xf9","\xc8","\xae","\x32"),
	HX_HCSTRING("htmlEncode","\xe1","\x5d","\xa5","\xc7"),
	HX_HCSTRING("insertAt","\x8c","\x7c","\x1f","\xc2"),
	HX_HCSTRING("ifBlank","\x37","\xd2","\xd3","\x1e"),
	HX_HCSTRING("ifEmpty","\x70","\x2d","\xbc","\xd9"),
	HX_HCSTRING("ifNull","\x04","\xd9","\x3f","\xea"),
	HX_HCSTRING("indentLines","\xf3","\xb9","\x3b","\xba"),
	HX_HCSTRING("indexOf8","\x4f","\x67","\xa0","\xc6"),
	HX_HCSTRING("isBlank","\x0a","\x83","\x77","\x51"),
	HX_HCSTRING("isDigits","\xb0","\xa5","\x91","\x0d"),
	HX_HCSTRING("isEmpty","\x43","\xde","\x5f","\x0c"),
	HX_HCSTRING("isNotBlank","\x4b","\xc3","\xaf","\xbf"),
	HX_HCSTRING("isNotEmpty","\x84","\x1e","\x98","\x7a"),
	HX_HCSTRING("isLowerCase","\x07","\x90","\xff","\x2f"),
	HX_HCSTRING("isUpperCase","\xe8","\x73","\x98","\xb0"),
	HX_HCSTRING("iterate","\xfa","\x79","\xd0","\xe2"),
	HX_HCSTRING("iterateChars","\x83","\x28","\xf2","\xe7"),
	HX_HCSTRING("lastIndexOf8","\xc5","\x73","\x32","\x28"),
	HX_HCSTRING("length8","\x92","\xb4","\x9a","\x87"),
	HX_HCSTRING("left","\x07","\x08","\xb0","\x47"),
	HX_HCSTRING("lpad","\x67","\x5c","\xb8","\x47"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("prependIfMissing","\x1b","\x68","\xad","\x2e"),
	HX_HCSTRING("quoteDouble","\x6d","\xd7","\x15","\xf5"),
	HX_HCSTRING("quoteSingle","\xe4","\x12","\x6c","\x7b"),
	HX_HCSTRING("removeAfter","\x38","\x43","\xd6","\x1b"),
	HX_HCSTRING("removeAfterLast","\xae","\x75","\xaa","\x08"),
	HX_HCSTRING("removeAfterIgnoreCase","\x3a","\x72","\xa3","\x22"),
	HX_HCSTRING("removeAfterLastIgnoreCase","\x30","\x94","\xef","\xb7"),
	HX_HCSTRING("removeAt","\x57","\x6e","\x1b","\xad"),
	HX_HCSTRING("removeBefore","\xe3","\xef","\x5f","\x09"),
	HX_HCSTRING("removeBeforeLast","\xd9","\x53","\xff","\x4f"),
	HX_HCSTRING("removeBeforeIgnoreCase","\xa5","\xc2","\x0d","\x3a"),
	HX_HCSTRING("removeBeforeLastIgnoreCase","\x1b","\xf6","\xa1","\x76"),
	HX_HCSTRING("removeAll","\x3d","\x17","\xe5","\xca"),
	HX_HCSTRING("removeFirst","\x4c","\x55","\xd1","\xfe"),
	HX_HCSTRING("removeFirstIgnoreCase","\x4e","\x65","\x49","\x62"),
	HX_HCSTRING("removeAnsi","\x27","\xc9","\x90","\xbd"),
	HX_HCSTRING("removeLeading","\xe2","\x8e","\x1b","\xe2"),
	HX_HCSTRING("removeTags","\x3d","\xef","\x15","\xca"),
	HX_HCSTRING("removeTrailing","\x40","\xd5","\x24","\xbf"),
	HX_HCSTRING("repeat","\x5b","\x97","\x7c","\x06"),
	HX_HCSTRING("replaceAll","\x4d","\x81","\xc5","\x77"),
	HX_HCSTRING("replaceFirst","\x5c","\x63","\x2c","\xf4"),
	HX_HCSTRING("replaceFirstIgnoreCase","\x5e","\xa7","\x28","\xef"),
	HX_HCSTRING("reverse","\x22","\x39","\xfc","\x1a"),
	HX_HCSTRING("right","\xdc","\x0b","\x64","\xe9"),
	HX_HCSTRING("rpad","\x21","\xa4","\xaf","\x4b"),
	HX_HCSTRING("split8","\x1e","\x94","\x9e","\xbf"),
	HX_HCSTRING("splitAt","\x6d","\x0e","\x23","\xeb"),
	HX_HCSTRING("splitEvery","\x61","\xba","\xff","\x44"),
	HX_HCSTRING("splitLines","\xc5","\xcc","\x3c","\x44"),
	HX_HCSTRING("startsWith","\x77","\xc0","\xcf","\xf9"),
	HX_HCSTRING("startsWithAny","\xb5","\x56","\x62","\x09"),
	HX_HCSTRING("startsWithAnyIgnoreCase","\xf7","\xa3","\xbf","\x65"),
	HX_HCSTRING("startsWithIgnoreCase","\x39","\x94","\xf7","\xe2"),
	HX_HCSTRING("substr8","\xe7","\x5b","\x86","\x2f"),
	HX_HCSTRING("substring8","\xc7","\x14","\x0c","\xa8"),
	HX_HCSTRING("substringAfter","\x0b","\xde","\xc2","\xa8"),
	HX_HCSTRING("substringAfterIgnoreCase","\xcd","\xf2","\x66","\x92"),
	HX_HCSTRING("substringBetween","\x77","\x23","\xd5","\x54"),
	HX_HCSTRING("substringBetweenIgnoreCase","\x39","\xb7","\xb6","\x19"),
	HX_HCSTRING("substringAfterLast","\x01","\x76","\x78","\xae"),
	HX_HCSTRING("substringAfterLastIgnoreCase","\x43","\x5a","\x5a","\xb3"),
	HX_HCSTRING("substringBefore","\xb0","\xcd","\x7a","\xcb"),
	HX_HCSTRING("substringBeforeIgnoreCase","\xb2","\xc2","\x5a","\x95"),
	HX_HCSTRING("substringBeforeLast","\x26","\x9c","\x71","\xbe"),
	HX_HCSTRING("substringBeforeLastIgnoreCase","\xa8","\x80","\xa4","\x78"),
	HX_HCSTRING("toBool","\x45","\xef","\xd4","\x76"),
	HX_HCSTRING("toBytes","\xf0","\x54","\x1c","\x8a"),
	HX_HCSTRING("toChar","\xf1","\xc9","\x78","\x77"),
	HX_HCSTRING("toCharIterator","\xff","\xa8","\x79","\x3d"),
	HX_HCSTRING("toChars","\x62","\xe9","\x37","\x12"),
	HX_HCSTRING("toPattern","\x15","\x3e","\x0b","\x41"),
	HX_HCSTRING("toEReg","\x0a","\x89","\xba","\x78"),
	HX_HCSTRING("toFloat","\x21","\x12","\x1b","\xcf"),
	HX_HCSTRING("toHex","\x20","\xf4","\x10","\x14"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toLowerCase8","\x22","\x7f","\x5e","\x9f"),
	HX_HCSTRING("toLowerCaseFirstChar","\xf0","\x33","\x17","\x6a"),
	HX_HCSTRING("toLowerCamel","\xd0","\xf1","\x59","\x9f"),
	HX_HCSTRING("toLowerHyphen","\x18","\x43","\xbe","\xa2"),
	HX_HCSTRING("toLowerUnderscore","\x60","\xd9","\xed","\x61"),
	HX_HCSTRING("toTitle","\x1d","\x62","\xbf","\xdc"),
	HX_HCSTRING("toUpperCamel","\xcf","\x72","\x88","\xa4"),
	HX_HCSTRING("toUpperUnderscore","\x01","\x5c","\x30","\x79"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	HX_HCSTRING("toUpperCase8","\x21","\x00","\x8d","\xa4"),
	HX_HCSTRING("toUpperCaseFirstChar","\xef","\x4b","\x3d","\x20"),
	HX_HCSTRING("trim","\xe2","\x9c","\x03","\x4d"),
	HX_HCSTRING("trimRight","\x9a","\xeb","\x9f","\x2d"),
	HX_HCSTRING("trimLeft","\x09","\xea","\x19","\x60"),
	HX_HCSTRING("trimLines","\xbd","\xbd","\x3d","\xb9"),
	HX_HCSTRING("trimToNull","\x24","\xf0","\xef","\xee"),
	HX_HCSTRING("trimToEmpty","\x50","\x52","\x20","\xef"),
	HX_HCSTRING("truncate","\x66","\xbe","\xf9","\xce"),
	HX_HCSTRING("urlDecode","\xfd","\xb9","\x5b","\x05"),
	HX_HCSTRING("urlEncode","\xe5","\x4e","\x52","\x9a"),
	HX_HCSTRING("wrap","\xca","\x39","\xff","\x4e"),
	::String(null())
};

void Strings_obj::__register()
{
	hx::Object *dummy = new Strings_obj;
	Strings_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings.Strings","\x18","\xf7","\xa8","\x5d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Strings_obj::__GetStatic;
	__mClass->mSetStaticField = &Strings_obj::__SetStatic;
	__mClass->mMarkFunc = Strings_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Strings_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Strings_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Strings_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Strings_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Strings_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Strings_obj::__boot()
{
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_31_boot)
HXDLIN(  31)			::String _hx_tmp = (::hx::strings::_Char::Char_Impl__obj::toString((int)27) + HX_("\\[[;\\d]*m",f9,38,1d,be));
HXDLIN(  31)			 ::hx::strings::internal::_Either3::_Either3 this1 = ::hx::strings::internal::_Either3::_Either3_obj::b(HX_("g",67,00,00,00));
HXDLIN(  31)			return ::hx::strings::Pattern_obj::compile(_hx_tmp,this1);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_31_boot)
HXDLIN(  31)		REGEX_ANSI_ESC =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_32_boot)
HXDLIN(  32)			 ::hx::strings::internal::_Either3::_Either3 this1 = ::hx::strings::internal::_Either3::_Either3_obj::b(HX_("g",67,00,00,00));
HXDLIN(  32)			return ::hx::strings::Pattern_obj::compile(HX_("&(#\\d+|amp|nbsp|apos|lt|gt|quot);",a6,cb,61,46),this1);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_32_boot)
HXDLIN(  32)		REGEX_HTML_UNESCAPE =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_33_boot)
HXDLIN(  33)			 ::hx::strings::internal::_Either3::_Either3 this1 = ::hx::strings::internal::_Either3::_Either3_obj::b(HX_("g",67,00,00,00));
HXDLIN(  33)			return ::hx::strings::Pattern_obj::compile(HX_("\\r?\\n",bb,cf,67,44),this1);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_33_boot)
HXDLIN(  33)		REGEX_SPLIT_LINES =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_36_boot)
HXDLIN(  36)			 ::hx::strings::internal::_Either3::_Either3 this1 = ::hx::strings::internal::_Either3::_Either3_obj::b(HX_("g",67,00,00,00));
HXDLIN(  36)			return ::hx::strings::Pattern_obj::compile(HX_("<[!a-zA-Z\\/][^>]*>",5e,e5,70,7b),this1);
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_36_boot)
HXDLIN(  36)		REGEX_REMOVE_XML_TAGS =  ::Dynamic(new _hx_Closure_0())();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_39_boot)
HXDLIN(  39)		POS_NOT_FOUND = (int)-1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_44_boot)
HXDLIN(  44)		NEW_LINE_NIX = HX_("\n",0a,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_49_boot)
HXDLIN(  49)		NEW_LINE_WIN = HX_("\r\n",5d,0b,00,00);
            	}
{
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		 ::Dynamic _hx_run(){
            			HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_54_boot)
HXDLIN(  54)			if (::hx::strings::internal::OS_obj::isWindows) {
HXDLIN(  54)				return HX_("\r\n",5d,0b,00,00);
            			}
            			else {
HXDLIN(  54)				return HX_("\n",0a,00,00,00);
            			}
HXDLIN(  54)			return null();
            		}
            		HX_END_LOCAL_FUNC0(return)

            	HX_STACKFRAME(&_hx_pos_fd0a69697a336cdd_54_boot)
HXDLIN(  54)		NEW_LINE =  ::Dynamic(new _hx_Closure_0())();
            	}
}

} // end namespace hx
} // end namespace strings
