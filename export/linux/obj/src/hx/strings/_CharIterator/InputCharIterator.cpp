// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_hx_strings_CharIterator
#include <hx/strings/CharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_InputCharIterator
#include <hx/strings/_CharIterator/InputCharIterator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0d90c307ece713da_268_new,"hx.strings._CharIterator.InputCharIterator","new",0xfb9d00cb,"hx.strings._CharIterator.InputCharIterator.new","hx/strings/CharIterator.hx",268,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_0d90c307ece713da_281_isEOF,"hx.strings._CharIterator.InputCharIterator","isEOF",0x0591741d,"hx.strings._CharIterator.InputCharIterator.isEOF","hx/strings/CharIterator.hx",281,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_0d90c307ece713da_294_getChar,"hx.strings._CharIterator.InputCharIterator","getChar",0xbfc35077,"hx.strings._CharIterator.InputCharIterator.getChar","hx/strings/CharIterator.hx",294,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_0d90c307ece713da_308_readUtf8Char,"hx.strings._CharIterator.InputCharIterator","readUtf8Char",0x939e0452,"hx.strings._CharIterator.InputCharIterator.readUtf8Char","hx/strings/CharIterator.hx",308,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_0d90c307ece713da_370_readUtf8MultiSequenceByte,"hx.strings._CharIterator.InputCharIterator","readUtf8MultiSequenceByte",0x9f78e306,"hx.strings._CharIterator.InputCharIterator.readUtf8MultiSequenceByte","hx/strings/CharIterator.hx",370,0x1504f62e)
namespace hx{
namespace strings{
namespace _CharIterator{

void InputCharIterator_obj::__construct( ::haxe::io::Input chars,int prevBufferSize){
            	HX_STACKFRAME(&_hx_pos_0d90c307ece713da_268_new)
HXLINE( 273)		this->nextCharAvailable = null();
HXLINE( 271)		this->currCharIndex = (int)-1;
HXLINE( 269)		this->byteIndex = (int)0;
HXLINE( 276)		super::__construct(prevBufferSize);
HXLINE( 277)		this->input = chars;
            	}

Dynamic InputCharIterator_obj::__CreateEmpty() { return new InputCharIterator_obj; }

void *InputCharIterator_obj::_hx_vtable = 0;

Dynamic InputCharIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InputCharIterator_obj > _hx_result = new InputCharIterator_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool InputCharIterator_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x021d6a39) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x021d6a39;
	} else {
		return inClassId==(int)0x74a953f6;
	}
}

bool InputCharIterator_obj::isEOF(){
            	HX_STACKFRAME(&_hx_pos_0d90c307ece713da_281_isEOF)
HXLINE( 282)		if (hx::IsNull( this->nextCharAvailable )) {
HXLINE( 283)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 284)				int byte1 = this->input->readByte();
HXDLIN( 284)				this->byteIndex++;
HXDLIN( 284)				int _hx_tmp;
HXDLIN( 284)				if ((byte1 <= (int)127)) {
HXLINE( 284)					_hx_tmp = byte1;
            				}
            				else {
HXLINE( 284)					byte1 = ((int)byte1 & (int)(int)-129);
HXDLIN( 284)					byte1 = ((int)byte1 & (int)(int)-65);
HXDLIN( 284)					int totalBytes = (int)2;
HXDLIN( 284)					bool isBit6Set = ((int)1 == ((int)((int)byte1 >> (int)(int)5) & (int)(int)1));
HXDLIN( 284)					bool isBit5Set = false;
HXDLIN( 284)					if (isBit6Set) {
HXLINE( 284)						byte1 = ((int)byte1 & (int)(int)-33);
HXDLIN( 284)						totalBytes = (totalBytes + (int)1);
HXDLIN( 284)						isBit5Set = ((int)1 == ((int)((int)byte1 >> (int)(int)4) & (int)(int)1));
HXDLIN( 284)						if (isBit5Set) {
HXLINE( 284)							byte1 = ((int)byte1 & (int)(int)-17);
HXDLIN( 284)							totalBytes = (totalBytes + (int)1);
HXDLIN( 284)							if (((int)1 == ((int)((int)byte1 >> (int)(int)3) & (int)(int)1))) {
HXLINE( 284)								HX_STACK_DO_THROW(((((HX_("Valid UTF-8 byte expected at position [",6f,4c,4a,03) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte1) + HX_("]!",24,51,00,00)));
            							}
            						}
            					}
HXDLIN( 284)					int result = ((int)byte1 << (int)((int)6 * (totalBytes - (int)1)));
HXDLIN( 284)					int byte = this->input->readByte();
HXDLIN( 284)					this->byteIndex++;
HXDLIN( 284)					if (((int)1 != ((int)((int)byte >> (int)(int)7) & (int)(int)1))) {
HXLINE( 284)						HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte) + HX_("]!",24,51,00,00)));
            					}
HXDLIN( 284)					if (((int)1 == ((int)((int)byte >> (int)(int)6) & (int)(int)1))) {
HXLINE( 284)						HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte) + HX_("]!",24,51,00,00)));
            					}
HXDLIN( 284)					int byte2 = ((int)byte & (int)(int)-129);
HXDLIN( 284)					result = (result + ((int)byte2 << (int)((int)6 * (totalBytes - (int)2))));
HXDLIN( 284)					if (isBit6Set) {
HXLINE( 284)						int byte3 = this->input->readByte();
HXDLIN( 284)						this->byteIndex++;
HXDLIN( 284)						if (((int)1 != ((int)((int)byte3 >> (int)(int)7) & (int)(int)1))) {
HXLINE( 284)							HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte3) + HX_("]!",24,51,00,00)));
            						}
HXDLIN( 284)						if (((int)1 == ((int)((int)byte3 >> (int)(int)6) & (int)(int)1))) {
HXLINE( 284)							HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte3) + HX_("]!",24,51,00,00)));
            						}
HXDLIN( 284)						int byte31 = ((int)byte3 & (int)(int)-129);
HXDLIN( 284)						result = (result + ((int)byte31 << (int)((int)6 * (totalBytes - (int)3))));
HXDLIN( 284)						if (isBit5Set) {
HXLINE( 284)							int byte4 = this->input->readByte();
HXDLIN( 284)							this->byteIndex++;
HXDLIN( 284)							if (((int)1 != ((int)((int)byte4 >> (int)(int)7) & (int)(int)1))) {
HXLINE( 284)								HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte4) + HX_("]!",24,51,00,00)));
            							}
HXDLIN( 284)							if (((int)1 == ((int)((int)byte4 >> (int)(int)6) & (int)(int)1))) {
HXLINE( 284)								HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte4) + HX_("]!",24,51,00,00)));
            							}
HXDLIN( 284)							int byte41 = ((int)byte4 & (int)(int)-129);
HXDLIN( 284)							result = (result + ((int)byte41 << (int)((int)6 * (totalBytes - (int)4))));
            						}
            					}
HXDLIN( 284)					bool _hx_tmp1;
HXDLIN( 284)					if ((this->index == (int)0)) {
HXLINE( 284)						_hx_tmp1 = (result == (int)65279);
            					}
            					else {
HXLINE( 284)						_hx_tmp1 = false;
            					}
HXDLIN( 284)					if (_hx_tmp1) {
HXLINE( 284)						_hx_tmp = this->readUtf8Char();
            					}
            					else {
HXLINE( 284)						_hx_tmp = result;
            					}
            				}
HXDLIN( 284)				this->nextChar = _hx_tmp;
HXLINE( 285)				this->nextCharAvailable = true;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof ex = _hx_e;
HXLINE( 287)					this->nextCharAvailable = false;
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
HXLINE( 290)		return hx::IsNotEq( this->nextCharAvailable,true );
            	}


int InputCharIterator_obj::getChar(){
            	HX_STACKFRAME(&_hx_pos_0d90c307ece713da_294_getChar)
HXLINE( 295)		if ((this->index != this->currCharIndex)) {
HXLINE( 296)			this->currCharIndex = this->index;
HXLINE( 297)			this->nextCharAvailable = null();
HXLINE( 298)			return this->nextChar;
            		}
HXLINE( 300)		return this->currChar;
            	}


int InputCharIterator_obj::readUtf8Char(){
            	HX_STACKFRAME(&_hx_pos_0d90c307ece713da_308_readUtf8Char)
HXLINE( 309)		int byte1 = this->input->readByte();
HXLINE( 310)		this->byteIndex++;
HXLINE( 311)		if ((byte1 <= (int)127)) {
HXLINE( 312)			return byte1;
            		}
HXLINE( 318)		byte1 = ((int)byte1 & (int)(int)-129);
HXLINE( 319)		byte1 = ((int)byte1 & (int)(int)-65);
HXLINE( 320)		int totalBytes = (int)2;
HXLINE( 322)		bool isBit6Set = ((int)1 == ((int)((int)byte1 >> (int)(int)5) & (int)(int)1));
HXLINE( 323)		bool isBit5Set = false;
HXLINE( 324)		if (isBit6Set) {
HXLINE( 325)			byte1 = ((int)byte1 & (int)(int)-33);
HXLINE( 326)			totalBytes = (totalBytes + (int)1);
HXLINE( 328)			isBit5Set = ((int)1 == ((int)((int)byte1 >> (int)(int)4) & (int)(int)1));
HXLINE( 329)			if (isBit5Set) {
HXLINE( 330)				byte1 = ((int)byte1 & (int)(int)-17);
HXLINE( 331)				totalBytes = (totalBytes + (int)1);
HXLINE( 333)				if (((int)1 == ((int)((int)byte1 >> (int)(int)3) & (int)(int)1))) {
HXLINE( 334)					HX_STACK_DO_THROW(((((HX_("Valid UTF-8 byte expected at position [",6f,4c,4a,03) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte1) + HX_("]!",24,51,00,00)));
            				}
            			}
            		}
HXLINE( 338)		int result = ((int)byte1 << (int)((int)6 * (totalBytes - (int)1)));
HXLINE( 343)		int byte = this->input->readByte();
HXDLIN( 343)		this->byteIndex++;
HXDLIN( 343)		if (((int)1 != ((int)((int)byte >> (int)(int)7) & (int)(int)1))) {
HXLINE( 343)			HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte) + HX_("]!",24,51,00,00)));
            		}
HXDLIN( 343)		if (((int)1 == ((int)((int)byte >> (int)(int)6) & (int)(int)1))) {
HXLINE( 343)			HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte) + HX_("]!",24,51,00,00)));
            		}
HXDLIN( 343)		int byte2 = ((int)byte & (int)(int)-129);
HXLINE( 344)		result = (result + ((int)byte2 << (int)((int)6 * (totalBytes - (int)2))));
HXLINE( 349)		if (isBit6Set) {
HXLINE( 350)			int byte3 = this->input->readByte();
HXDLIN( 350)			this->byteIndex++;
HXDLIN( 350)			if (((int)1 != ((int)((int)byte3 >> (int)(int)7) & (int)(int)1))) {
HXLINE( 350)				HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte3) + HX_("]!",24,51,00,00)));
            			}
HXDLIN( 350)			if (((int)1 == ((int)((int)byte3 >> (int)(int)6) & (int)(int)1))) {
HXLINE( 350)				HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte3) + HX_("]!",24,51,00,00)));
            			}
HXDLIN( 350)			int byte31 = ((int)byte3 & (int)(int)-129);
HXLINE( 351)			result = (result + ((int)byte31 << (int)((int)6 * (totalBytes - (int)3))));
HXLINE( 356)			if (isBit5Set) {
HXLINE( 357)				int byte4 = this->input->readByte();
HXDLIN( 357)				this->byteIndex++;
HXDLIN( 357)				if (((int)1 != ((int)((int)byte4 >> (int)(int)7) & (int)(int)1))) {
HXLINE( 357)					HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte4) + HX_("]!",24,51,00,00)));
            				}
HXDLIN( 357)				if (((int)1 == ((int)((int)byte4 >> (int)(int)6) & (int)(int)1))) {
HXLINE( 357)					HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte4) + HX_("]!",24,51,00,00)));
            				}
HXDLIN( 357)				int byte41 = ((int)byte4 & (int)(int)-129);
HXLINE( 358)				result = (result + ((int)byte41 << (int)((int)6 * (totalBytes - (int)4))));
            			}
            		}
HXLINE( 363)		bool _hx_tmp;
HXDLIN( 363)		if ((this->index == (int)0)) {
HXLINE( 363)			_hx_tmp = (result == (int)65279);
            		}
            		else {
HXLINE( 363)			_hx_tmp = false;
            		}
HXDLIN( 363)		if (_hx_tmp) {
HXLINE( 364)			return this->readUtf8Char();
            		}
HXLINE( 366)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputCharIterator_obj,readUtf8Char,return )

int InputCharIterator_obj::readUtf8MultiSequenceByte(){
            	HX_STACKFRAME(&_hx_pos_0d90c307ece713da_370_readUtf8MultiSequenceByte)
HXLINE( 371)		int byte = this->input->readByte();
HXLINE( 372)		this->byteIndex++;
HXLINE( 374)		if (((int)1 != ((int)((int)byte >> (int)(int)7) & (int)(int)1))) {
HXLINE( 375)			HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte) + HX_("]!",24,51,00,00)));
            		}
HXLINE( 377)		if (((int)1 == ((int)((int)byte >> (int)(int)6) & (int)(int)1))) {
HXLINE( 378)			HX_STACK_DO_THROW(((((HX_("Valid UTF-8 multi-sequence byte expected at position [",c8,79,bd,80) + this->byteIndex) + HX_("] but found byte with value [",6a,c4,be,83)) + byte) + HX_("]!",24,51,00,00)));
            		}
HXLINE( 380)		return ((int)byte & (int)(int)-129);
            	}


HX_DEFINE_DYNAMIC_FUNC0(InputCharIterator_obj,readUtf8MultiSequenceByte,return )


hx::ObjectPtr< InputCharIterator_obj > InputCharIterator_obj::__new( ::haxe::io::Input chars,int prevBufferSize) {
	hx::ObjectPtr< InputCharIterator_obj > __this = new InputCharIterator_obj();
	__this->__construct(chars,prevBufferSize);
	return __this;
}

hx::ObjectPtr< InputCharIterator_obj > InputCharIterator_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::io::Input chars,int prevBufferSize) {
	InputCharIterator_obj *__this = (InputCharIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(InputCharIterator_obj), true, "hx.strings._CharIterator.InputCharIterator"));
	*(void **)__this = InputCharIterator_obj::_hx_vtable;
	__this->__construct(chars,prevBufferSize);
	return __this;
}

InputCharIterator_obj::InputCharIterator_obj()
{
}

void InputCharIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(InputCharIterator);
	HX_MARK_MEMBER_NAME(byteIndex,"byteIndex");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(currCharIndex,"currCharIndex");
	HX_MARK_MEMBER_NAME(nextChar,"nextChar");
	HX_MARK_MEMBER_NAME(nextCharAvailable,"nextCharAvailable");
	 ::hx::strings::CharIterator_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void InputCharIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(byteIndex,"byteIndex");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(currCharIndex,"currCharIndex");
	HX_VISIT_MEMBER_NAME(nextChar,"nextChar");
	HX_VISIT_MEMBER_NAME(nextCharAvailable,"nextCharAvailable");
	 ::hx::strings::CharIterator_obj::__Visit(HX_VISIT_ARG);
}

hx::Val InputCharIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"isEOF") ) { return hx::Val( isEOF_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getChar") ) { return hx::Val( getChar_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextChar") ) { return hx::Val( nextChar ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"byteIndex") ) { return hx::Val( byteIndex ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"readUtf8Char") ) { return hx::Val( readUtf8Char_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currCharIndex") ) { return hx::Val( currCharIndex ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextCharAvailable") ) { return hx::Val( nextCharAvailable ); }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"readUtf8MultiSequenceByte") ) { return hx::Val( readUtf8MultiSequenceByte_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val InputCharIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast<  ::haxe::io::Input >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"nextChar") ) { nextChar=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"byteIndex") ) { byteIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currCharIndex") ) { currCharIndex=inValue.Cast< int >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"nextCharAvailable") ) { nextCharAvailable=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void InputCharIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("byteIndex","\xea","\x6e","\x49","\x54"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("currCharIndex","\x0a","\xcb","\x62","\x23"));
	outFields->push(HX_HCSTRING("nextChar","\x69","\x05","\x8c","\xed"));
	outFields->push(HX_HCSTRING("nextCharAvailable","\x20","\xbf","\x2c","\x6d"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo InputCharIterator_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(InputCharIterator_obj,byteIndex),HX_HCSTRING("byteIndex","\xea","\x6e","\x49","\x54")},
	{hx::fsObject /*::haxe::io::Input*/ ,(int)offsetof(InputCharIterator_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsInt,(int)offsetof(InputCharIterator_obj,currCharIndex),HX_HCSTRING("currCharIndex","\x0a","\xcb","\x62","\x23")},
	{hx::fsInt,(int)offsetof(InputCharIterator_obj,nextChar),HX_HCSTRING("nextChar","\x69","\x05","\x8c","\xed")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(InputCharIterator_obj,nextCharAvailable),HX_HCSTRING("nextCharAvailable","\x20","\xbf","\x2c","\x6d")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *InputCharIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String InputCharIterator_obj_sMemberFields[] = {
	HX_HCSTRING("byteIndex","\xea","\x6e","\x49","\x54"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("currCharIndex","\x0a","\xcb","\x62","\x23"),
	HX_HCSTRING("nextChar","\x69","\x05","\x8c","\xed"),
	HX_HCSTRING("nextCharAvailable","\x20","\xbf","\x2c","\x6d"),
	HX_HCSTRING("isEOF","\xf2","\x12","\x4b","\xc1"),
	HX_HCSTRING("getChar","\x8c","\x0e","\x42","\x14"),
	HX_HCSTRING("readUtf8Char","\x1d","\x1a","\x6d","\x6a"),
	HX_HCSTRING("readUtf8MultiSequenceByte","\x5b","\xca","\x91","\x0a"),
	::String(null()) };

static void InputCharIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InputCharIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InputCharIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InputCharIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class InputCharIterator_obj::__mClass;

void InputCharIterator_obj::__register()
{
	hx::Object *dummy = new InputCharIterator_obj;
	InputCharIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings._CharIterator.InputCharIterator","\x59","\x3f","\xac","\x19");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InputCharIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(InputCharIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< InputCharIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InputCharIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputCharIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputCharIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace strings
} // end namespace _CharIterator
