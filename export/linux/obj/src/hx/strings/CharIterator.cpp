// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_hx_strings_CharIterator
#include <hx/strings/CharIterator.h>
#endif
#ifndef INCLUDED_hx_strings_CharPos
#include <hx/strings/CharPos.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_ArrayCharIterator
#include <hx/strings/_CharIterator/ArrayCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_CharWithPos
#include <hx/strings/_CharIterator/CharWithPos.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_InputCharIterator
#include <hx/strings/_CharIterator/InputCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_IteratorCharIterator
#include <hx/strings/_CharIterator/IteratorCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_NullCharIterator
#include <hx/strings/_CharIterator/NullCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings__CharIterator_StringCharIterator
#include <hx/strings/_CharIterator/StringCharIterator.h>
#endif
#ifndef INCLUDED_hx_strings_internal__RingBuffer_RingBufferImpl
#include <hx/strings/internal/_RingBuffer/RingBufferImpl.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_20_new,"hx.strings.CharIterator","new",0xc35be280,"hx.strings.CharIterator.new","hx/strings/CharIterator.hx",20,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_103_get_pos,"hx.strings.CharIterator","get_pos",0xb115c84b,"hx.strings.CharIterator.get_pos","hx/strings/CharIterator.hx",103,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_116_hasPrev,"hx.strings.CharIterator","hasPrev",0xa3ee818d,"hx.strings.CharIterator.hasPrev","hx/strings/CharIterator.hx",116,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_124_prev,"hx.strings.CharIterator","prev",0x2e6688d3,"hx.strings.CharIterator.prev","hx/strings/CharIterator.hx",124,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_141_hasNext,"hx.strings.CharIterator","hasNext",0xa292478d,"hx.strings.CharIterator.hasNext","hx/strings/CharIterator.hx",141,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_155_next,"hx.strings.CharIterator","next",0x2d0a4ed3,"hx.strings.CharIterator.next","hx/strings/CharIterator.hx",155,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_192_getChar,"hx.strings.CharIterator","getChar",0x9e8db0ac,"hx.strings.CharIterator.getChar","hx/strings/CharIterator.hx",192,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_194_isEOF,"hx.strings.CharIterator","isEOF",0x6413ed12,"hx.strings.CharIterator.isEOF","hx/strings/CharIterator.hx",194,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_34_fromString,"hx.strings.CharIterator","fromString",0x34c09fbb,"hx.strings.CharIterator.fromString","hx/strings/CharIterator.hx",34,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_51_fromArray,"hx.strings.CharIterator","fromArray",0x4828c1ef,"hx.strings.CharIterator.fromArray","hx/strings/CharIterator.hx",51,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_70_fromInput,"hx.strings.CharIterator","fromInput",0xe0b71860,"hx.strings.CharIterator.fromInput","hx/strings/CharIterator.hx",70,0x1504f62e)
HX_LOCAL_STACK_FRAME(_hx_pos_cfe0227c992c8ab4_87_fromIterator,"hx.strings.CharIterator","fromIterator",0x1565cf58,"hx.strings.CharIterator.fromIterator","hx/strings/CharIterator.hx",87,0x1504f62e)
namespace hx{
namespace strings{

void CharIterator_obj::__construct(int prevBufferSize){
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_20_new)
HXLINE( 100)		this->prevBufferNextIdx = (int)-1;
HXLINE(  99)		this->prevBufferPrevIdx = (int)-1;
HXLINE(  95)		this->currChar = (int)-1;
HXLINE(  94)		this->col = (int)0;
HXLINE(  93)		this->line = (int)0;
HXLINE(  92)		this->index = (int)-1;
HXLINE( 106)		if ((prevBufferSize > (int)0)) {
HXLINE( 107)			this->usePrevBuffer = true;
HXLINE( 108)			 ::hx::strings::internal::_RingBuffer::RingBufferImpl this1 =  ::hx::strings::internal::_RingBuffer::RingBufferImpl_obj::__alloc( HX_CTX ,(prevBufferSize + (int)1));
HXDLIN( 108)			this->prevBuffer = this1;
            		}
            		else {
HXLINE( 110)			this->usePrevBuffer = false;
            		}
            	}

Dynamic CharIterator_obj::__CreateEmpty() { return new CharIterator_obj; }

void *CharIterator_obj::_hx_vtable = 0;

Dynamic CharIterator_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CharIterator_obj > _hx_result = new CharIterator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CharIterator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x74a953f6;
}

 ::hx::strings::CharPos CharIterator_obj::get_pos(){
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_103_get_pos)
HXDLIN( 103)		return  ::hx::strings::CharPos_obj::__alloc( HX_CTX ,this->index,this->line,this->col);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,get_pos,return )

bool CharIterator_obj::hasPrev(){
            	HX_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_116_hasPrev)
HXDLIN( 116)		return (this->prevBufferPrevIdx > (int)-1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,hasPrev,return )

int CharIterator_obj::prev(){
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_124_prev)
HXLINE( 126)		if (this->isEOF()) {
HXLINE( 127)			HX_STACK_DO_THROW( ::haxe::io::Eof_obj::__alloc( HX_CTX ));
            		}
HXLINE( 129)		 ::hx::strings::_CharIterator::CharWithPos prevChar = this->prevBuffer->get(this->prevBufferPrevIdx).StaticCast<  ::hx::strings::_CharIterator::CharWithPos >();
HXLINE( 130)		this->currChar = prevChar->_hx_char;
HXLINE( 131)		this->index = prevChar->index;
HXLINE( 132)		this->line = prevChar->line;
HXLINE( 133)		this->col = prevChar->col;
HXLINE( 135)		int _hx_tmp;
HXDLIN( 135)		if (((this->prevBufferPrevIdx + (int)1) < this->prevBuffer->length)) {
HXLINE( 135)			_hx_tmp = (this->prevBufferPrevIdx + (int)1);
            		}
            		else {
HXLINE( 135)			_hx_tmp = (int)-1;
            		}
HXDLIN( 135)		this->prevBufferNextIdx = _hx_tmp;
HXLINE( 136)		this->prevBufferPrevIdx--;
HXLINE( 137)		return this->currChar;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,prev,return )

bool CharIterator_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_141_hasNext)
HXLINE( 142)		if ((this->prevBufferNextIdx > (int)-1)) {
HXLINE( 143)			return true;
            		}
HXLINE( 146)		return !(this->isEOF());
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,hasNext,return )

int CharIterator_obj::next(){
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_155_next)
HXLINE( 157)		if ((this->prevBufferNextIdx > (int)-1)) {
HXLINE( 158)			 ::hx::strings::_CharIterator::CharWithPos prevChar = this->prevBuffer->get(this->prevBufferNextIdx).StaticCast<  ::hx::strings::_CharIterator::CharWithPos >();
HXLINE( 159)			this->currChar = prevChar->_hx_char;
HXLINE( 160)			this->index = prevChar->index;
HXLINE( 161)			this->line = prevChar->line;
HXLINE( 162)			this->col = prevChar->col;
HXLINE( 163)			this->prevBufferPrevIdx = (this->prevBufferNextIdx - (int)1);
HXLINE( 164)			int _hx_tmp;
HXDLIN( 164)			if (((this->prevBufferNextIdx + (int)1) < this->prevBuffer->length)) {
HXLINE( 164)				_hx_tmp = (this->prevBufferNextIdx + (int)1);
            			}
            			else {
HXLINE( 164)				_hx_tmp = (int)-1;
            			}
HXDLIN( 164)			this->prevBufferNextIdx = _hx_tmp;
HXLINE( 165)			return this->currChar;
            		}
HXLINE( 168)		if (this->isEOF()) {
HXLINE( 169)			HX_STACK_DO_THROW( ::haxe::io::Eof_obj::__alloc( HX_CTX ));
            		}
HXLINE( 171)		bool _hx_tmp1;
HXDLIN( 171)		if (!((this->currChar == (int)10))) {
HXLINE( 171)			_hx_tmp1 = (this->currChar < (int)0);
            		}
            		else {
HXLINE( 171)			_hx_tmp1 = true;
            		}
HXDLIN( 171)		if (_hx_tmp1) {
HXLINE( 172)			this->line++;
HXLINE( 173)			this->col = (int)0;
            		}
HXLINE( 176)		this->index++;
HXLINE( 177)		this->col++;
HXLINE( 178)		this->currChar = this->getChar();
HXLINE( 180)		if (this->usePrevBuffer) {
HXLINE( 181)			 ::hx::strings::internal::_RingBuffer::RingBufferImpl _hx_tmp2 = this->prevBuffer;
HXDLIN( 181)			_hx_tmp2->add( ::hx::strings::_CharIterator::CharWithPos_obj::__alloc( HX_CTX ,this->currChar,this->index,this->col,this->line));
HXLINE( 182)			this->prevBufferPrevIdx = (this->prevBuffer->length - (int)2);
HXLINE( 183)			this->prevBufferNextIdx = (int)-1;
            		}
HXLINE( 186)		return this->currChar;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,next,return )

int CharIterator_obj::getChar(){
            	HX_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_192_getChar)
HXDLIN( 192)		HX_STACK_DO_THROW(HX_("Not implemented",15,1e,32,34));
HXDLIN( 192)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,getChar,return )

bool CharIterator_obj::isEOF(){
            	HX_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_194_isEOF)
HXDLIN( 194)		HX_STACK_DO_THROW(HX_("Not implemented",15,1e,32,34));
HXDLIN( 194)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharIterator_obj,isEOF,return )

 ::hx::strings::CharIterator CharIterator_obj::fromString(::String chars,hx::Null< int >  __o_prevBufferSize){
int prevBufferSize = __o_prevBufferSize.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_34_fromString)
HXLINE(  35)		if (hx::IsNull( chars )) {
HXLINE(  35)			return ::hx::strings::_CharIterator::NullCharIterator_obj::INSTANCE;
            		}
HXLINE(  36)		return  ::hx::strings::_CharIterator::StringCharIterator_obj::__alloc( HX_CTX ,chars,prevBufferSize);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CharIterator_obj,fromString,return )

 ::hx::strings::CharIterator CharIterator_obj::fromArray(::Array< int > chars,hx::Null< int >  __o_prevBufferSize){
int prevBufferSize = __o_prevBufferSize.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_51_fromArray)
HXLINE(  52)		if (hx::IsNull( chars )) {
HXLINE(  52)			return ::hx::strings::_CharIterator::NullCharIterator_obj::INSTANCE;
            		}
HXLINE(  53)		return  ::hx::strings::_CharIterator::ArrayCharIterator_obj::__alloc( HX_CTX ,chars,prevBufferSize);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CharIterator_obj,fromArray,return )

 ::hx::strings::CharIterator CharIterator_obj::fromInput( ::haxe::io::Input chars,hx::Null< int >  __o_prevBufferSize){
int prevBufferSize = __o_prevBufferSize.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_70_fromInput)
HXLINE(  71)		if (hx::IsNull( chars )) {
HXLINE(  71)			return ::hx::strings::_CharIterator::NullCharIterator_obj::INSTANCE;
            		}
HXLINE(  72)		return  ::hx::strings::_CharIterator::InputCharIterator_obj::__alloc( HX_CTX ,chars,prevBufferSize);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CharIterator_obj,fromInput,return )

 ::hx::strings::CharIterator CharIterator_obj::fromIterator( ::Dynamic chars,hx::Null< int >  __o_prevBufferSize){
int prevBufferSize = __o_prevBufferSize.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_cfe0227c992c8ab4_87_fromIterator)
HXLINE(  88)		if (hx::IsNull( chars )) {
HXLINE(  88)			return ::hx::strings::_CharIterator::NullCharIterator_obj::INSTANCE;
            		}
HXLINE(  89)		return  ::hx::strings::_CharIterator::IteratorCharIterator_obj::__alloc( HX_CTX ,chars,prevBufferSize);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CharIterator_obj,fromIterator,return )


hx::ObjectPtr< CharIterator_obj > CharIterator_obj::__new(int prevBufferSize) {
	hx::ObjectPtr< CharIterator_obj > __this = new CharIterator_obj();
	__this->__construct(prevBufferSize);
	return __this;
}

hx::ObjectPtr< CharIterator_obj > CharIterator_obj::__alloc(hx::Ctx *_hx_ctx,int prevBufferSize) {
	CharIterator_obj *__this = (CharIterator_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(CharIterator_obj), true, "hx.strings.CharIterator"));
	*(void **)__this = CharIterator_obj::_hx_vtable;
	__this->__construct(prevBufferSize);
	return __this;
}

CharIterator_obj::CharIterator_obj()
{
}

void CharIterator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharIterator);
	HX_MARK_MEMBER_NAME(index,"index");
	HX_MARK_MEMBER_NAME(line,"line");
	HX_MARK_MEMBER_NAME(col,"col");
	HX_MARK_MEMBER_NAME(currChar,"currChar");
	HX_MARK_MEMBER_NAME(usePrevBuffer,"usePrevBuffer");
	HX_MARK_MEMBER_NAME(prevBuffer,"prevBuffer");
	HX_MARK_MEMBER_NAME(prevBufferPrevIdx,"prevBufferPrevIdx");
	HX_MARK_MEMBER_NAME(prevBufferNextIdx,"prevBufferNextIdx");
	HX_MARK_END_CLASS();
}

void CharIterator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(index,"index");
	HX_VISIT_MEMBER_NAME(line,"line");
	HX_VISIT_MEMBER_NAME(col,"col");
	HX_VISIT_MEMBER_NAME(currChar,"currChar");
	HX_VISIT_MEMBER_NAME(usePrevBuffer,"usePrevBuffer");
	HX_VISIT_MEMBER_NAME(prevBuffer,"prevBuffer");
	HX_VISIT_MEMBER_NAME(prevBufferPrevIdx,"prevBufferPrevIdx");
	HX_VISIT_MEMBER_NAME(prevBufferNextIdx,"prevBufferNextIdx");
}

hx::Val CharIterator_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"col") ) { return hx::Val( col ); }
		if (HX_FIELD_EQ(inName,"pos") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pos() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { return hx::Val( line ); }
		if (HX_FIELD_EQ(inName,"prev") ) { return hx::Val( prev_dyn() ); }
		if (HX_FIELD_EQ(inName,"next") ) { return hx::Val( next_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { return hx::Val( index ); }
		if (HX_FIELD_EQ(inName,"isEOF") ) { return hx::Val( isEOF_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"get_pos") ) { return hx::Val( get_pos_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasPrev") ) { return hx::Val( hasPrev_dyn() ); }
		if (HX_FIELD_EQ(inName,"hasNext") ) { return hx::Val( hasNext_dyn() ); }
		if (HX_FIELD_EQ(inName,"getChar") ) { return hx::Val( getChar_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currChar") ) { return hx::Val( currChar ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"prevBuffer") ) { return hx::Val( prevBuffer ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"usePrevBuffer") ) { return hx::Val( usePrevBuffer ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"prevBufferPrevIdx") ) { return hx::Val( prevBufferPrevIdx ); }
		if (HX_FIELD_EQ(inName,"prevBufferNextIdx") ) { return hx::Val( prevBufferNextIdx ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharIterator_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromArray") ) { outValue = fromArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromInput") ) { outValue = fromInput_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"fromIterator") ) { outValue = fromIterator_dyn(); return true; }
	}
	return false;
}

hx::Val CharIterator_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"col") ) { col=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"line") ) { line=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"index") ) { index=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"currChar") ) { currChar=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"prevBuffer") ) { prevBuffer=inValue.Cast<  ::hx::strings::internal::_RingBuffer::RingBufferImpl >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"usePrevBuffer") ) { usePrevBuffer=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"prevBufferPrevIdx") ) { prevBufferPrevIdx=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"prevBufferNextIdx") ) { prevBufferNextIdx=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CharIterator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"));
	outFields->push(HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"));
	outFields->push(HX_HCSTRING("col","\x40","\x80","\x4b","\x00"));
	outFields->push(HX_HCSTRING("currChar","\xe8","\x36","\xc7","\x84"));
	outFields->push(HX_HCSTRING("usePrevBuffer","\x7a","\x17","\x73","\x09"));
	outFields->push(HX_HCSTRING("prevBuffer","\x53","\x28","\x0a","\xd1"));
	outFields->push(HX_HCSTRING("prevBufferPrevIdx","\xf7","\x96","\x79","\x3a"));
	outFields->push(HX_HCSTRING("prevBufferNextIdx","\xf7","\x90","\xf5","\xa3"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo CharIterator_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(CharIterator_obj,index),HX_HCSTRING("index","\x12","\x9b","\x14","\xbe")},
	{hx::fsInt,(int)offsetof(CharIterator_obj,line),HX_HCSTRING("line","\xf4","\x17","\xb3","\x47")},
	{hx::fsInt,(int)offsetof(CharIterator_obj,col),HX_HCSTRING("col","\x40","\x80","\x4b","\x00")},
	{hx::fsInt,(int)offsetof(CharIterator_obj,currChar),HX_HCSTRING("currChar","\xe8","\x36","\xc7","\x84")},
	{hx::fsBool,(int)offsetof(CharIterator_obj,usePrevBuffer),HX_HCSTRING("usePrevBuffer","\x7a","\x17","\x73","\x09")},
	{hx::fsObject /*::hx::strings::internal::_RingBuffer::RingBufferImpl*/ ,(int)offsetof(CharIterator_obj,prevBuffer),HX_HCSTRING("prevBuffer","\x53","\x28","\x0a","\xd1")},
	{hx::fsInt,(int)offsetof(CharIterator_obj,prevBufferPrevIdx),HX_HCSTRING("prevBufferPrevIdx","\xf7","\x96","\x79","\x3a")},
	{hx::fsInt,(int)offsetof(CharIterator_obj,prevBufferNextIdx),HX_HCSTRING("prevBufferNextIdx","\xf7","\x90","\xf5","\xa3")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *CharIterator_obj_sStaticStorageInfo = 0;
#endif

static ::String CharIterator_obj_sMemberFields[] = {
	HX_HCSTRING("index","\x12","\x9b","\x14","\xbe"),
	HX_HCSTRING("line","\xf4","\x17","\xb3","\x47"),
	HX_HCSTRING("col","\x40","\x80","\x4b","\x00"),
	HX_HCSTRING("currChar","\xe8","\x36","\xc7","\x84"),
	HX_HCSTRING("usePrevBuffer","\x7a","\x17","\x73","\x09"),
	HX_HCSTRING("prevBuffer","\x53","\x28","\x0a","\xd1"),
	HX_HCSTRING("prevBufferPrevIdx","\xf7","\x96","\x79","\x3a"),
	HX_HCSTRING("prevBufferNextIdx","\xf7","\x90","\xf5","\xa3"),
	HX_HCSTRING("get_pos","\x2b","\x26","\xca","\x26"),
	HX_HCSTRING("hasPrev","\x6d","\xdf","\xa2","\x19"),
	HX_HCSTRING("prev","\xf3","\xbe","\x5e","\x4a"),
	HX_HCSTRING("hasNext","\x6d","\xa5","\x46","\x18"),
	HX_HCSTRING("next","\xf3","\x84","\x02","\x49"),
	HX_HCSTRING("getChar","\x8c","\x0e","\x42","\x14"),
	HX_HCSTRING("isEOF","\xf2","\x12","\x4b","\xc1"),
	::String(null()) };

static void CharIterator_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharIterator_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharIterator_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharIterator_obj::__mClass,"__mClass");
};

#endif

hx::Class CharIterator_obj::__mClass;

static ::String CharIterator_obj_sStaticFields[] = {
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("fromArray","\xcf","\x57","\x18","\xda"),
	HX_HCSTRING("fromInput","\x40","\xae","\xa6","\x72"),
	HX_HCSTRING("fromIterator","\x78","\x25","\xb1","\x33"),
	::String(null())
};

void CharIterator_obj::__register()
{
	hx::Object *dummy = new CharIterator_obj;
	CharIterator_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings.CharIterator","\x8e","\xe2","\xa0","\x82");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharIterator_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CharIterator_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CharIterator_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(CharIterator_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< CharIterator_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharIterator_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharIterator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharIterator_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace strings
