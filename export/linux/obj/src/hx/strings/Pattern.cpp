// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_hx_strings_Matcher
#include <hx/strings/Matcher.h>
#endif
#ifndef INCLUDED_hx_strings_Pattern
#include <hx/strings/Pattern.h>
#endif
#ifndef INCLUDED_hx_strings_Strings
#include <hx/strings/Strings.h>
#endif
#ifndef INCLUDED_hx_strings__Char_Char_Impl_
#include <hx/strings/_Char/Char_Impl_.h>
#endif
#ifndef INCLUDED_hx_strings__Pattern_MatcherImpl
#include <hx/strings/_Pattern/MatcherImpl.h>
#endif
#ifndef INCLUDED_hx_strings_internal__Either3__Either3
#include <hx/strings/internal/_Either3/_Either3.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e1b1a9770adac693_51_new,"hx.strings.Pattern","new",0x9ce07ad8,"hx.strings.Pattern.new","hx/strings/Pattern.hx",51,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_69_matcher,"hx.strings.Pattern","matcher",0x92bb836a,"hx.strings.Pattern.matcher","hx/strings/Pattern.hx",69,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_83_replace,"hx.strings.Pattern","replace",0xb4678eac,"hx.strings.Pattern.replace","hx/strings/Pattern.hx",83,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_97_remove,"hx.strings.Pattern","remove",0x7513cccc,"hx.strings.Pattern.remove","hx/strings/Pattern.hx",97,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_110_split,"hx.strings.Pattern","split",0xda552352,"hx.strings.Pattern.split","hx/strings/Pattern.hx",110,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_32_compile,"hx.strings.Pattern","compile",0x8cae6beb,"hx.strings.Pattern.compile","hx/strings/Pattern.hx",32,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_39_compile,"hx.strings.Pattern","compile",0x8cae6beb,"hx.strings.Pattern.compile","hx/strings/Pattern.hx",39,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_37_compile,"hx.strings.Pattern","compile",0x8cae6beb,"hx.strings.Pattern.compile","hx/strings/Pattern.hx",37,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_47_compile,"hx.strings.Pattern","compile",0x8cae6beb,"hx.strings.Pattern.compile","hx/strings/Pattern.hx",47,0x80e2271a)
HX_LOCAL_STACK_FRAME(_hx_pos_e1b1a9770adac693_22_boot,"hx.strings.Pattern","boot",0x9fa402ba,"hx.strings.Pattern.boot","hx/strings/Pattern.hx",22,0x80e2271a)
namespace hx{
namespace strings{

void Pattern_obj::__construct(::String pattern,::String options){
            	HX_GC_STACKFRAME(&_hx_pos_e1b1a9770adac693_51_new)
HXLINE(  52)		this->pattern = pattern;
HXLINE(  53)		this->options = options;
HXLINE(  54)		this->ereg =  ::EReg_obj::__alloc( HX_CTX ,pattern,options);
HXLINE(  57)		 ::hx::strings::Pattern _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  57)		_hx_tmp->options = (_hx_tmp->options + HX_("u",75,00,00,00));
            	}

Dynamic Pattern_obj::__CreateEmpty() { return new Pattern_obj; }

void *Pattern_obj::_hx_vtable = 0;

Dynamic Pattern_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Pattern_obj > _hx_result = new Pattern_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Pattern_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30c9767e;
}

::Dynamic Pattern_obj::matcher(::String str){
            	HX_GC_STACKFRAME(&_hx_pos_e1b1a9770adac693_69_matcher)
HXDLIN(  69)		return  ::hx::strings::_Pattern::MatcherImpl_obj::__alloc( HX_CTX ,this->ereg,this->pattern,this->options,str);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pattern_obj,matcher,return )

::String Pattern_obj::replace(::String str,::String replaceWith){
            	HX_STACKFRAME(&_hx_pos_e1b1a9770adac693_83_replace)
HXDLIN(  83)		return this->ereg->replace(str,replaceWith);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Pattern_obj,replace,return )

::String Pattern_obj::remove(::String str){
            	HX_STACKFRAME(&_hx_pos_e1b1a9770adac693_97_remove)
HXDLIN(  97)		return this->ereg->replace(str,HX_("",00,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pattern_obj,remove,return )

::Array< ::String > Pattern_obj::split(::String str){
            	HX_STACKFRAME(&_hx_pos_e1b1a9770adac693_110_split)
HXDLIN( 110)		return this->ereg->split(str);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Pattern_obj,split,return )

 ::hx::strings::Pattern Pattern_obj::compile(::String pattern, ::hx::strings::internal::_Either3::_Either3 options){
            	HX_GC_STACKFRAME(&_hx_pos_e1b1a9770adac693_32_compile)
HXLINE(  33)		if (hx::IsNull( options )) {
HXLINE(  34)			return  ::hx::strings::Pattern_obj::__alloc( HX_CTX ,pattern,HX_("",00,00,00,00));
            		}
HXLINE(  36)		 ::hx::strings::internal::_Either3::_Either3 _g = options;
HXDLIN(  36)		::String _hx_tmp;
HXDLIN(  36)		switch((int)(_hx_getEnumValueIndex(_g))){
            			case (int)0: {
HXLINE(  37)				::String str = ( (::String)(_g->_hx_getObject(0)) );
HXDLIN(  37)				::String str1 = ::hx::strings::Strings_obj::toLowerCase8(str);
HXDLIN(  37)				bool _hx_tmp1;
HXDLIN(  37)				if (hx::IsNotNull( str1 )) {
HXLINE(  37)					_hx_tmp1 = (str1.length == (int)0);
            				}
            				else {
HXLINE(  37)					_hx_tmp1 = true;
            				}
HXDLIN(  37)				if (_hx_tmp1) {
HXLINE(  36)					_hx_tmp = str1;
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            					bool _hx_run(int ch){
            						HX_GC_STACKFRAME(&_hx_pos_e1b1a9770adac693_39_compile)
HXLINE(  40)						bool _hx_tmp2;
HXDLIN(  40)						bool _hx_tmp3;
HXDLIN(  40)						int strLen = ::haxe::Utf8_obj::length(HX_("i",69,00,00,00));
HXDLIN(  40)						int _hx_tmp4;
HXDLIN(  40)						bool _hx_tmp5;
HXDLIN(  40)						if ((strLen != (int)0)) {
HXLINE(  40)							_hx_tmp5 = ((int)0 >= strLen);
            						}
            						else {
HXLINE(  40)							_hx_tmp5 = true;
            						}
HXDLIN(  40)						if (_hx_tmp5) {
HXLINE(  40)							_hx_tmp4 = (int)-1;
            						}
            						else {
HXLINE(  40)							_hx_tmp4 = ::haxe::Utf8_obj::charCodeAt(HX_("i",69,00,00,00),(int)0);
            						}
HXDLIN(  40)						if (!((ch == _hx_tmp4))) {
HXLINE(  40)							int strLen1 = ::haxe::Utf8_obj::length(HX_("m",6d,00,00,00));
HXDLIN(  40)							int _hx_tmp6;
HXDLIN(  40)							bool _hx_tmp7;
HXDLIN(  40)							if ((strLen1 != (int)0)) {
HXLINE(  40)								_hx_tmp7 = ((int)0 >= strLen1);
            							}
            							else {
HXLINE(  40)								_hx_tmp7 = true;
            							}
HXDLIN(  40)							if (_hx_tmp7) {
HXLINE(  40)								_hx_tmp6 = (int)-1;
            							}
            							else {
HXLINE(  40)								_hx_tmp6 = ::haxe::Utf8_obj::charCodeAt(HX_("m",6d,00,00,00),(int)0);
            							}
HXDLIN(  40)							_hx_tmp3 = (ch == _hx_tmp6);
            						}
            						else {
HXLINE(  40)							_hx_tmp3 = true;
            						}
HXDLIN(  40)						if (!(_hx_tmp3)) {
HXLINE(  40)							int strLen2 = ::haxe::Utf8_obj::length(HX_("g",67,00,00,00));
HXDLIN(  40)							int _hx_tmp8;
HXDLIN(  40)							bool _hx_tmp9;
HXDLIN(  40)							if ((strLen2 != (int)0)) {
HXLINE(  40)								_hx_tmp9 = ((int)0 >= strLen2);
            							}
            							else {
HXLINE(  40)								_hx_tmp9 = true;
            							}
HXDLIN(  40)							if (_hx_tmp9) {
HXLINE(  40)								_hx_tmp8 = (int)-1;
            							}
            							else {
HXLINE(  40)								_hx_tmp8 = ::haxe::Utf8_obj::charCodeAt(HX_("g",67,00,00,00),(int)0);
            							}
HXDLIN(  40)							_hx_tmp2 = (ch == _hx_tmp8);
            						}
            						else {
HXLINE(  40)							_hx_tmp2 = true;
            						}
HXDLIN(  40)						if (!(_hx_tmp2)) {
HXLINE(  42)							int strLen3 = ::haxe::Utf8_obj::length(HX_("s",73,00,00,00));
HXDLIN(  42)							int _hx_tmp10;
HXDLIN(  42)							bool _hx_tmp11;
HXDLIN(  42)							if ((strLen3 != (int)0)) {
HXLINE(  42)								_hx_tmp11 = ((int)0 >= strLen3);
            							}
            							else {
HXLINE(  42)								_hx_tmp11 = true;
            							}
HXDLIN(  42)							if (_hx_tmp11) {
HXLINE(  42)								_hx_tmp10 = (int)-1;
            							}
            							else {
HXLINE(  42)								_hx_tmp10 = ::haxe::Utf8_obj::charCodeAt(HX_("s",73,00,00,00),(int)0);
            							}
HXDLIN(  42)							return (ch == _hx_tmp10);
            						}
            						else {
HXLINE(  40)							return true;
            						}
HXDLIN(  40)						return false;
            					}
            					HX_END_LOCAL_FUNC1(return)

            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            					::String _hx_run(int ch1){
            						HX_GC_STACKFRAME(&_hx_pos_e1b1a9770adac693_37_compile)
HXLINE(  37)						return ::hx::strings::_Char::Char_Impl__obj::toString(ch1);
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE(  36)					_hx_tmp = ::hx::strings::Strings_obj::toChars(str1)->filter( ::Dynamic(new _hx_Closure_0()))->map( ::Dynamic(new _hx_Closure_1()))->join(HX_("",00,00,00,00));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(  46)				::String opt = ( (::String)(_g->_hx_getObject(0)) );
HXLINE(  36)				_hx_tmp = ::Std_obj::string(opt);
            			}
            			break;
            			case (int)2: {
            				HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            				bool _hx_run(::String m){
            					HX_GC_STACKFRAME(&_hx_pos_e1b1a9770adac693_47_compile)
HXLINE(  47)					return hx::IsNotNull( m );
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE(  47)				::Array< ::String > arr = ( (::Array< ::String >)(_g->_hx_getObject(0)) );
HXLINE(  36)				_hx_tmp = arr->filter( ::Dynamic(new _hx_Closure_2()))->join(HX_("",00,00,00,00));
            			}
            			break;
            		}
HXDLIN(  36)		return  ::hx::strings::Pattern_obj::__alloc( HX_CTX ,pattern,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Pattern_obj,compile,return )


hx::ObjectPtr< Pattern_obj > Pattern_obj::__new(::String pattern,::String options) {
	hx::ObjectPtr< Pattern_obj > __this = new Pattern_obj();
	__this->__construct(pattern,options);
	return __this;
}

hx::ObjectPtr< Pattern_obj > Pattern_obj::__alloc(hx::Ctx *_hx_ctx,::String pattern,::String options) {
	Pattern_obj *__this = (Pattern_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Pattern_obj), true, "hx.strings.Pattern"));
	*(void **)__this = Pattern_obj::_hx_vtable;
	__this->__construct(pattern,options);
	return __this;
}

Pattern_obj::Pattern_obj()
{
}

void Pattern_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Pattern);
	HX_MARK_MEMBER_NAME(pattern,"pattern");
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(ereg,"ereg");
	HX_MARK_END_CLASS();
}

void Pattern_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pattern,"pattern");
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(ereg,"ereg");
}

hx::Val Pattern_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ereg") ) { return hx::Val( ereg ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"split") ) { return hx::Val( split_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"remove") ) { return hx::Val( remove_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pattern") ) { return hx::Val( pattern ); }
		if (HX_FIELD_EQ(inName,"options") ) { return hx::Val( options ); }
		if (HX_FIELD_EQ(inName,"matcher") ) { return hx::Val( matcher_dyn() ); }
		if (HX_FIELD_EQ(inName,"replace") ) { return hx::Val( replace_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Pattern_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"compile") ) { outValue = compile_dyn(); return true; }
	}
	return false;
}

hx::Val Pattern_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"ereg") ) { ereg=inValue.Cast<  ::EReg >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pattern") ) { pattern=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pattern_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("pattern","\x50","\x06","\x77","\x11"));
	outFields->push(HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"));
	outFields->push(HX_HCSTRING("ereg","\x0f","\x66","\x19","\x43"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Pattern_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Pattern_obj,pattern),HX_HCSTRING("pattern","\x50","\x06","\x77","\x11")},
	{hx::fsString,(int)offsetof(Pattern_obj,options),HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf")},
	{hx::fsObject /*::EReg*/ ,(int)offsetof(Pattern_obj,ereg),HX_HCSTRING("ereg","\x0f","\x66","\x19","\x43")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Pattern_obj_sStaticStorageInfo = 0;
#endif

static ::String Pattern_obj_sMemberFields[] = {
	HX_HCSTRING("pattern","\x50","\x06","\x77","\x11"),
	HX_HCSTRING("options","\x5e","\x33","\xfe","\xdf"),
	HX_HCSTRING("ereg","\x0f","\x66","\x19","\x43"),
	HX_HCSTRING("matcher","\xf2","\x3c","\x7c","\x89"),
	HX_HCSTRING("replace","\x34","\x48","\x28","\xab"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("split","\xda","\xea","\x6e","\x81"),
	::String(null()) };

static void Pattern_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Pattern_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Pattern_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Pattern_obj::__mClass,"__mClass");
};

#endif

hx::Class Pattern_obj::__mClass;

static ::String Pattern_obj_sStaticFields[] = {
	HX_HCSTRING("compile","\x73","\x25","\x6f","\x83"),
	::String(null())
};

void Pattern_obj::__register()
{
	hx::Object *dummy = new Pattern_obj;
	Pattern_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings.Pattern","\xe6","\x6e","\x2c","\x76");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Pattern_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Pattern_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Pattern_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Pattern_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Pattern_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Pattern_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pattern_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Pattern_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e1b1a9770adac693_22_boot)
HXDLIN(  22)		__mClass->__meta__ =  ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("obj",f7,8f,54,00), ::Dynamic(hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("threadSafe",37,51,16,48),null())
            				->setFixed(1,HX_("immutable",42,28,c7,66),null()))));
            	}
}

} // end namespace hx
} // end namespace strings
