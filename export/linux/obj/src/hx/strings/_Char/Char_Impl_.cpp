// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_hx_strings__Char_CharCaseMapper
#include <hx/strings/_Char/CharCaseMapper.h>
#endif
#ifndef INCLUDED_hx_strings__Char_Char_Impl_
#include <hx/strings/_Char/Char_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_256_fromString,"hx.strings._Char.Char_Impl_","fromString",0xd2d3a690,"hx.strings._Char.Char_Impl_.fromString","hx/strings/Char.hx",256,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_261_of,"hx.strings._Char.Char_Impl_","of",0x717d9ccc,"hx.strings._Char.Char_Impl_.of","hx/strings/Char.hx",261,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_267_op_plus_string,"hx.strings._Char.Char_Impl_","op_plus_string",0x54c92e2d,"hx.strings._Char.Char_Impl_.op_plus_string","hx/strings/Char.hx",267,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_273_op_plus_string2,"hx.strings._Char.Char_Impl_","op_plus_string2",0xdb3f3965,"hx.strings._Char.Char_Impl_.op_plus_string2","hx/strings/Char.hx",273,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_279_op_plus,"hx.strings._Char.Char_Impl_","op_plus",0x437776a3,"hx.strings._Char.Char_Impl_.op_plus","hx/strings/Char.hx",279,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_333_isAscii,"hx.strings._Char.Char_Impl_","isAscii",0x38f82132,"hx.strings._Char.Char_Impl_.isAscii","hx/strings/Char.hx",333,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_359_isAsciiAlpha,"hx.strings._Char.Char_Impl_","isAsciiAlpha",0xbd8c60cc,"hx.strings._Char.Char_Impl_.isAsciiAlpha","hx/strings/Char.hx",359,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_385_isAsciiAlphanumeric,"hx.strings._Char.Char_Impl_","isAsciiAlphanumeric",0x76b37381,"hx.strings._Char.Char_Impl_.isAsciiAlphanumeric","hx/strings/Char.hx",385,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_409_isAsciiControl,"hx.strings._Char.Char_Impl_","isAsciiControl",0xe96adc4b,"hx.strings._Char.Char_Impl_.isAsciiControl","hx/strings/Char.hx",409,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_434_isAsciiPrintable,"hx.strings._Char.Char_Impl_","isAsciiPrintable",0x8861e8b5,"hx.strings._Char.Char_Impl_.isAsciiPrintable","hx/strings/Char.hx",434,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_469_isDigit,"hx.strings._Char.Char_Impl_","isDigit",0xec92c58e,"hx.strings._Char.Char_Impl_.isDigit","hx/strings/Char.hx",469,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_481_isEOF,"hx.strings._Char.Char_Impl_","isEOF",0x1328565d,"hx.strings._Char.Char_Impl_.isEOF","hx/strings/Char.hx",481,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_502_isSpace,"hx.strings._Char.Char_Impl_","isSpace",0x943164a7,"hx.strings._Char.Char_Impl_.isSpace","hx/strings/Char.hx",502,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_528_isUTF8,"hx.strings._Char.Char_Impl_","isUTF8",0xbaba7070,"hx.strings._Char.Char_Impl_.isUTF8","hx/strings/Char.hx",528,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_549_isWhitespace,"hx.strings._Char.Char_Impl_","isWhitespace",0x8762f5fc,"hx.strings._Char.Char_Impl_.isWhitespace","hx/strings/Char.hx",549,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_561_isLowerCase,"hx.strings._Char.Char_Impl_","isLowerCase",0x4529b5b2,"hx.strings._Char.Char_Impl_.isLowerCase","hx/strings/Char.hx",561,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_573_isUpperCase,"hx.strings._Char.Char_Impl_","isUpperCase",0xc5c29993,"hx.strings._Char.Char_Impl_.isUpperCase","hx/strings/Char.hx",573,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_585_toLowerCase,"hx.strings._Char.Char_Impl_","toLowerCase",0xcd8e7201,"hx.strings._Char.Char_Impl_.toLowerCase","hx/strings/Char.hx",585,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_597_toUpperCase,"hx.strings._Char.Char_Impl_","toUpperCase",0x4e2755e2,"hx.strings._Char.Char_Impl_.toUpperCase","hx/strings/Char.hx",597,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_609_toInt,"hx.strings._Char.Char_Impl_","toInt",0x65ef019f,"hx.strings._Char.Char_Impl_.toInt","hx/strings/Char.hx",609,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_625_toString,"hx.strings._Char.Char_Impl_","toString",0x3eb74221,"hx.strings._Char.Char_Impl_.toString","hx/strings/Char.hx",625,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_31_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",31,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_36_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",36,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_41_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",41,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_46_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",46,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_51_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",51,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_56_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",56,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_61_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",61,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_66_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",66,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_71_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",71,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_76_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",76,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_81_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",81,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_86_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",86,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_91_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",91,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_96_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",96,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_101_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",101,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_106_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",106,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_111_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",111,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_116_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",116,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_121_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",121,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_126_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",126,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_131_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",131,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_136_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",136,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_141_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",141,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_146_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",146,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_151_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",151,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_156_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",156,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_161_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",161,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_166_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",166,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_171_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",171,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_176_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",176,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_181_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",181,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_186_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",186,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_191_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",191,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_196_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",196,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_201_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",201,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_206_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",206,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_211_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",211,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_216_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",216,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_221_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",221,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_226_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",226,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_231_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",231,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_236_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",236,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_241_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",241,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_246_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",246,0x345e517c)
HX_LOCAL_STACK_FRAME(_hx_pos_fedf12890863f20c_251_boot,"hx.strings._Char.Char_Impl_","boot",0xf926d727,"hx.strings._Char.Char_Impl_.boot","hx/strings/Char.hx",251,0x345e517c)
namespace hx{
namespace strings{
namespace _Char{

void Char_Impl__obj::__construct() { }

Dynamic Char_Impl__obj::__CreateEmpty() { return new Char_Impl__obj; }

void *Char_Impl__obj::_hx_vtable = 0;

Dynamic Char_Impl__obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Char_Impl__obj > _hx_result = new Char_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Char_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0b786dc1;
}

 ::hx::strings::_Char::CharCaseMapper Char_Impl__obj::CHAR_CASE_MAPPER;

int Char_Impl__obj::BACKSPACE;

int Char_Impl__obj::TAB;

int Char_Impl__obj::LF;

int Char_Impl__obj::CR;

int Char_Impl__obj::ESC;

int Char_Impl__obj::SPACE;

int Char_Impl__obj::EXCLAMATION_MARK;

int Char_Impl__obj::DOUBLE_QUOTE;

int Char_Impl__obj::HASH;

int Char_Impl__obj::DOLLAR;

int Char_Impl__obj::AMPERSAND;

int Char_Impl__obj::SINGLE_QUOTE;

int Char_Impl__obj::BRACKET_ROUND_LEFT;

int Char_Impl__obj::BRACKET_ROUND_RIGHT;

int Char_Impl__obj::ASTERISK;

int Char_Impl__obj::PLUS;

int Char_Impl__obj::COMMA;

int Char_Impl__obj::MINUS;

int Char_Impl__obj::DOT;

int Char_Impl__obj::SLASH;

int Char_Impl__obj::ZERO;

int Char_Impl__obj::ONE;

int Char_Impl__obj::TWO;

int Char_Impl__obj::TRHEE;

int Char_Impl__obj::FOUR;

int Char_Impl__obj::FIVE;

int Char_Impl__obj::SIX;

int Char_Impl__obj::SEVEN;

int Char_Impl__obj::EIGHT;

int Char_Impl__obj::NINE;

int Char_Impl__obj::COLON;

int Char_Impl__obj::SEMICOLON;

int Char_Impl__obj::LOWER_THAN;

int Char_Impl__obj::EQUALS;

int Char_Impl__obj::GREATER_THAN;

int Char_Impl__obj::QUESTION_MARK;

int Char_Impl__obj::BRACKET_SQUARE_LEFT;

int Char_Impl__obj::BACKSLASH;

int Char_Impl__obj::BRACKET_SQUARE_RIGHT;

int Char_Impl__obj::CARET;

int Char_Impl__obj::UNDERSCORE;

int Char_Impl__obj::BRACKET_CURLY_LEFT;

int Char_Impl__obj::PIPE;

int Char_Impl__obj::BRACKET_CURLY_RIGHT;

int Char_Impl__obj::fromString(::String str){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_256_fromString)
HXDLIN( 256)		int strLen;
HXDLIN( 256)		if (hx::IsNull( str )) {
HXDLIN( 256)			strLen = (int)0;
            		}
            		else {
HXDLIN( 256)			strLen = ::haxe::Utf8_obj::length(str);
            		}
HXDLIN( 256)		bool _hx_tmp;
HXDLIN( 256)		if ((strLen != (int)0)) {
HXDLIN( 256)			_hx_tmp = ((int)0 >= strLen);
            		}
            		else {
HXDLIN( 256)			_hx_tmp = true;
            		}
HXDLIN( 256)		if (_hx_tmp) {
HXDLIN( 256)			return (int)-1;
            		}
            		else {
HXDLIN( 256)			return ::haxe::Utf8_obj::charCodeAt(str,(int)0);
            		}
HXDLIN( 256)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,fromString,return )

int Char_Impl__obj::of(int ch){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_261_of)
HXDLIN( 261)		return ch;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,of,return )

::String Char_Impl__obj::op_plus_string(int ch,::String other){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_267_op_plus_string)
HXDLIN( 267)		return (::hx::strings::_Char::Char_Impl__obj::toString(ch) + other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,op_plus_string,return )

::String Char_Impl__obj::op_plus_string2(::String str,int ch){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_273_op_plus_string2)
HXDLIN( 273)		return (str + ::hx::strings::_Char::Char_Impl__obj::toString(ch));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,op_plus_string2,return )

int Char_Impl__obj::op_plus(int ch,int other){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_279_op_plus)
HXDLIN( 279)		return (ch + other);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Char_Impl__obj,op_plus,return )

bool Char_Impl__obj::isAscii(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_333_isAscii)
HXDLIN( 333)		if ((this1 > (int)-1)) {
HXDLIN( 333)			return (this1 < (int)128);
            		}
            		else {
HXDLIN( 333)			return false;
            		}
HXDLIN( 333)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isAscii,return )

bool Char_Impl__obj::isAsciiAlpha(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_359_isAsciiAlpha)
HXDLIN( 359)		bool _hx_tmp;
HXDLIN( 359)		if ((this1 > (int)64)) {
HXDLIN( 359)			_hx_tmp = (this1 < (int)91);
            		}
            		else {
HXDLIN( 359)			_hx_tmp = false;
            		}
HXDLIN( 359)		if (!(_hx_tmp)) {
HXDLIN( 359)			if ((this1 > (int)96)) {
HXDLIN( 359)				return (this1 < (int)123);
            			}
            			else {
HXDLIN( 359)				return false;
            			}
            		}
            		else {
HXDLIN( 359)			return true;
            		}
HXDLIN( 359)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isAsciiAlpha,return )

bool Char_Impl__obj::isAsciiAlphanumeric(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_385_isAsciiAlphanumeric)
HXDLIN( 385)		bool _hx_tmp;
HXDLIN( 385)		bool _hx_tmp1;
HXDLIN( 385)		if ((this1 > (int)64)) {
HXDLIN( 385)			_hx_tmp1 = (this1 < (int)91);
            		}
            		else {
HXDLIN( 385)			_hx_tmp1 = false;
            		}
HXDLIN( 385)		if (!(_hx_tmp1)) {
HXDLIN( 385)			if ((this1 > (int)96)) {
HXDLIN( 385)				_hx_tmp = (this1 < (int)123);
            			}
            			else {
HXDLIN( 385)				_hx_tmp = false;
            			}
            		}
            		else {
HXDLIN( 385)			_hx_tmp = true;
            		}
HXDLIN( 385)		if (!(_hx_tmp)) {
HXDLIN( 385)			if ((this1 > (int)47)) {
HXDLIN( 385)				return (this1 < (int)58);
            			}
            			else {
HXDLIN( 385)				return false;
            			}
            		}
            		else {
HXDLIN( 385)			return true;
            		}
HXDLIN( 385)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isAsciiAlphanumeric,return )

bool Char_Impl__obj::isAsciiControl(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_409_isAsciiControl)
HXDLIN( 409)		bool _hx_tmp;
HXDLIN( 409)		if ((this1 > (int)-1)) {
HXDLIN( 409)			_hx_tmp = (this1 < (int)32);
            		}
            		else {
HXDLIN( 409)			_hx_tmp = false;
            		}
HXDLIN( 409)		if (!(_hx_tmp)) {
HXDLIN( 409)			return (this1 == (int)127);
            		}
            		else {
HXDLIN( 409)			return true;
            		}
HXDLIN( 409)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isAsciiControl,return )

bool Char_Impl__obj::isAsciiPrintable(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_434_isAsciiPrintable)
HXDLIN( 434)		if ((this1 > (int)31)) {
HXDLIN( 434)			return (this1 < (int)127);
            		}
            		else {
HXDLIN( 434)			return false;
            		}
HXDLIN( 434)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isAsciiPrintable,return )

bool Char_Impl__obj::isDigit(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_469_isDigit)
HXDLIN( 469)		if ((this1 > (int)47)) {
HXDLIN( 469)			return (this1 < (int)58);
            		}
            		else {
HXDLIN( 469)			return false;
            		}
HXDLIN( 469)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isDigit,return )

bool Char_Impl__obj::isEOF(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_481_isEOF)
HXDLIN( 481)		return (this1 == (int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isEOF,return )

bool Char_Impl__obj::isSpace(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_502_isSpace)
HXDLIN( 502)		return (this1 == (int)32);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isSpace,return )

bool Char_Impl__obj::isUTF8(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_528_isUTF8)
HXDLIN( 528)		if ((this1 > (int)-1)) {
HXDLIN( 528)			return (this1 < (int)1114112);
            		}
            		else {
HXDLIN( 528)			return false;
            		}
HXDLIN( 528)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isUTF8,return )

bool Char_Impl__obj::isWhitespace(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_549_isWhitespace)
HXDLIN( 549)		bool _hx_tmp;
HXDLIN( 549)		if ((this1 > (int)8)) {
HXDLIN( 549)			_hx_tmp = (this1 < (int)14);
            		}
            		else {
HXDLIN( 549)			_hx_tmp = false;
            		}
HXDLIN( 549)		if (!(_hx_tmp)) {
HXDLIN( 549)			return (this1 == (int)32);
            		}
            		else {
HXDLIN( 549)			return true;
            		}
HXDLIN( 549)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isWhitespace,return )

bool Char_Impl__obj::isLowerCase(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_561_isLowerCase)
HXDLIN( 561)		return ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapL2U->exists(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isLowerCase,return )

bool Char_Impl__obj::isUpperCase(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_573_isUpperCase)
HXDLIN( 573)		return ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->exists(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,isUpperCase,return )

int Char_Impl__obj::toLowerCase(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_585_toLowerCase)
HXDLIN( 585)		 ::Dynamic lowerChar = ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapU2L->get(this1);
HXDLIN( 585)		if (hx::IsNull( lowerChar )) {
HXDLIN( 585)			return this1;
            		}
            		else {
HXDLIN( 585)			return lowerChar;
            		}
HXDLIN( 585)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toLowerCase,return )

int Char_Impl__obj::toUpperCase(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_597_toUpperCase)
HXDLIN( 597)		 ::Dynamic upperChar = ::hx::strings::_Char::Char_Impl__obj::CHAR_CASE_MAPPER->mapL2U->get(this1);
HXDLIN( 597)		if (hx::IsNull( upperChar )) {
HXDLIN( 597)			return this1;
            		}
            		else {
HXDLIN( 597)			return upperChar;
            		}
HXDLIN( 597)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toUpperCase,return )

int Char_Impl__obj::toInt(int this1){
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_609_toInt)
HXDLIN( 609)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toInt,return )

::String Char_Impl__obj::toString(int this1){
            	HX_GC_STACKFRAME(&_hx_pos_fedf12890863f20c_625_toString)
HXDLIN( 625)		if ((this1 > (int)127)) {
HXLINE( 626)			 ::haxe::Utf8 ch8 =  ::haxe::Utf8_obj::__alloc( HX_CTX ,null());
HXLINE( 627)			ch8->addChar(this1);
HXLINE( 628)			return ch8->toString();
            		}
            		else {
HXLINE( 631)			return ::String::fromCharCode(this1);
            		}
HXLINE( 625)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Char_Impl__obj,toString,return )


Char_Impl__obj::Char_Impl__obj()
{
}

bool Char_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"of") ) { outValue = of_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"isEOF") ) { outValue = isEOF_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"isUTF8") ) { outValue = isUTF8_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"op_plus") ) { outValue = op_plus_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAscii") ) { outValue = isAscii_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isDigit") ) { outValue = isDigit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isSpace") ) { outValue = isSpace_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isLowerCase") ) { outValue = isLowerCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isUpperCase") ) { outValue = isUpperCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toLowerCase") ) { outValue = toLowerCase_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toUpperCase") ) { outValue = toUpperCase_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"isAsciiAlpha") ) { outValue = isAsciiAlpha_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isWhitespace") ) { outValue = isWhitespace_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"op_plus_string") ) { outValue = op_plus_string_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isAsciiControl") ) { outValue = isAsciiControl_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"op_plus_string2") ) { outValue = op_plus_string2_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"isAsciiPrintable") ) { outValue = isAsciiPrintable_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"isAsciiAlphanumeric") ) { outValue = isAsciiAlphanumeric_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Char_Impl__obj_sMemberStorageInfo = 0;
static hx::StaticInfo Char_Impl__obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::hx::strings::_Char::CharCaseMapper*/ ,(void *) &Char_Impl__obj::CHAR_CASE_MAPPER,HX_HCSTRING("CHAR_CASE_MAPPER","\x87","\x9e","\x2b","\x6a")},
	{hx::fsInt,(void *) &Char_Impl__obj::BACKSPACE,HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6")},
	{hx::fsInt,(void *) &Char_Impl__obj::TAB,HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::LF,HX_HCSTRING("LF","\x7a","\x42","\x00","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::CR,HX_HCSTRING("CR","\xaf","\x3a","\x00","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::ESC,HX_HCSTRING("ESC","\x15","\xa4","\x34","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::SPACE,HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff")},
	{hx::fsInt,(void *) &Char_Impl__obj::EXCLAMATION_MARK,HX_HCSTRING("EXCLAMATION_MARK","\xff","\x88","\x1c","\x48")},
	{hx::fsInt,(void *) &Char_Impl__obj::DOUBLE_QUOTE,HX_HCSTRING("DOUBLE_QUOTE","\x2e","\x9c","\x7d","\x7e")},
	{hx::fsInt,(void *) &Char_Impl__obj::HASH,HX_HCSTRING("HASH","\xce","\xf7","\xc8","\x2f")},
	{hx::fsInt,(void *) &Char_Impl__obj::DOLLAR,HX_HCSTRING("DOLLAR","\x7c","\x78","\x62","\xdf")},
	{hx::fsInt,(void *) &Char_Impl__obj::AMPERSAND,HX_HCSTRING("AMPERSAND","\x15","\xdc","\xb6","\xc6")},
	{hx::fsInt,(void *) &Char_Impl__obj::SINGLE_QUOTE,HX_HCSTRING("SINGLE_QUOTE","\xe5","\x4a","\x2c","\x30")},
	{hx::fsInt,(void *) &Char_Impl__obj::BRACKET_ROUND_LEFT,HX_HCSTRING("BRACKET_ROUND_LEFT","\x0f","\x75","\x5f","\xeb")},
	{hx::fsInt,(void *) &Char_Impl__obj::BRACKET_ROUND_RIGHT,HX_HCSTRING("BRACKET_ROUND_RIGHT","\xb4","\x05","\x34","\x7f")},
	{hx::fsInt,(void *) &Char_Impl__obj::ASTERISK,HX_HCSTRING("ASTERISK","\x72","\xfc","\x4f","\x88")},
	{hx::fsInt,(void *) &Char_Impl__obj::PLUS,HX_HCSTRING("PLUS","\x5a","\x07","\x1b","\x35")},
	{hx::fsInt,(void *) &Char_Impl__obj::COMMA,HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8")},
	{hx::fsInt,(void *) &Char_Impl__obj::MINUS,HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86")},
	{hx::fsInt,(void *) &Char_Impl__obj::DOT,HX_HCSTRING("DOT","\x69","\xde","\x33","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::SLASH,HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc")},
	{hx::fsInt,(void *) &Char_Impl__obj::ZERO,HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b")},
	{hx::fsInt,(void *) &Char_Impl__obj::ONE,HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::TWO,HX_HCSTRING("TWO","\x6c","\x09","\x40","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::TRHEE,HX_HCSTRING("TRHEE","\xea","\x17","\x13","\x94")},
	{hx::fsInt,(void *) &Char_Impl__obj::FOUR,HX_HCSTRING("FOUR","\xe6","\x2b","\x81","\x2e")},
	{hx::fsInt,(void *) &Char_Impl__obj::FIVE,HX_HCSTRING("FIVE","\x32","\x9f","\x7c","\x2e")},
	{hx::fsInt,(void *) &Char_Impl__obj::SIX,HX_HCSTRING("SIX","\x02","\x3b","\x3f","\x00")},
	{hx::fsInt,(void *) &Char_Impl__obj::SEVEN,HX_HCSTRING("SEVEN","\xed","\x5c","\x1f","\xf8")},
	{hx::fsInt,(void *) &Char_Impl__obj::EIGHT,HX_HCSTRING("EIGHT","\x2f","\xb9","\x1c","\xeb")},
	{hx::fsInt,(void *) &Char_Impl__obj::NINE,HX_HCSTRING("NINE","\x32","\x4d","\xc6","\x33")},
	{hx::fsInt,(void *) &Char_Impl__obj::COLON,HX_HCSTRING("COLON","\x3f","\xa9","\x4a","\xc8")},
	{hx::fsInt,(void *) &Char_Impl__obj::SEMICOLON,HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49")},
	{hx::fsInt,(void *) &Char_Impl__obj::LOWER_THAN,HX_HCSTRING("LOWER_THAN","\xbf","\x41","\x1a","\x88")},
	{hx::fsInt,(void *) &Char_Impl__obj::EQUALS,HX_HCSTRING("EQUALS","\x3f","\x9a","\x75","\x72")},
	{hx::fsInt,(void *) &Char_Impl__obj::GREATER_THAN,HX_HCSTRING("GREATER_THAN","\x26","\xa8","\x9b","\x94")},
	{hx::fsInt,(void *) &Char_Impl__obj::QUESTION_MARK,HX_HCSTRING("QUESTION_MARK","\x06","\xcf","\x45","\x6c")},
	{hx::fsInt,(void *) &Char_Impl__obj::BRACKET_SQUARE_LEFT,HX_HCSTRING("BRACKET_SQUARE_LEFT","\x32","\x5a","\x2c","\xf8")},
	{hx::fsInt,(void *) &Char_Impl__obj::BACKSLASH,HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3")},
	{hx::fsInt,(void *) &Char_Impl__obj::BRACKET_SQUARE_RIGHT,HX_HCSTRING("BRACKET_SQUARE_RIGHT","\x31","\x9f","\xaf","\xa5")},
	{hx::fsInt,(void *) &Char_Impl__obj::CARET,HX_HCSTRING("CARET","\x63","\x31","\x0e","\xbf")},
	{hx::fsInt,(void *) &Char_Impl__obj::UNDERSCORE,HX_HCSTRING("UNDERSCORE","\x3a","\x5f","\x02","\x45")},
	{hx::fsInt,(void *) &Char_Impl__obj::BRACKET_CURLY_LEFT,HX_HCSTRING("BRACKET_CURLY_LEFT","\xf0","\x34","\x67","\xff")},
	{hx::fsInt,(void *) &Char_Impl__obj::PIPE,HX_HCSTRING("PIPE","\x2e","\xbc","\x18","\x35")},
	{hx::fsInt,(void *) &Char_Impl__obj::BRACKET_CURLY_RIGHT,HX_HCSTRING("BRACKET_CURLY_RIGHT","\xb3","\x2a","\xf4","\xf1")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Char_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Char_Impl__obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::CHAR_CASE_MAPPER,"CHAR_CASE_MAPPER");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BACKSPACE,"BACKSPACE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::TAB,"TAB");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::LF,"LF");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::CR,"CR");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::ESC,"ESC");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::SPACE,"SPACE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::EXCLAMATION_MARK,"EXCLAMATION_MARK");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::DOUBLE_QUOTE,"DOUBLE_QUOTE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::HASH,"HASH");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::DOLLAR,"DOLLAR");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::AMPERSAND,"AMPERSAND");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::SINGLE_QUOTE,"SINGLE_QUOTE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BRACKET_ROUND_LEFT,"BRACKET_ROUND_LEFT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BRACKET_ROUND_RIGHT,"BRACKET_ROUND_RIGHT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::ASTERISK,"ASTERISK");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::PLUS,"PLUS");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::COMMA,"COMMA");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::MINUS,"MINUS");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::DOT,"DOT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::SLASH,"SLASH");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::ZERO,"ZERO");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::ONE,"ONE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::TWO,"TWO");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::TRHEE,"TRHEE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::FOUR,"FOUR");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::FIVE,"FIVE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::SIX,"SIX");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::SEVEN,"SEVEN");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::EIGHT,"EIGHT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::NINE,"NINE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::COLON,"COLON");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::SEMICOLON,"SEMICOLON");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::LOWER_THAN,"LOWER_THAN");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::EQUALS,"EQUALS");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::GREATER_THAN,"GREATER_THAN");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::QUESTION_MARK,"QUESTION_MARK");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BRACKET_SQUARE_LEFT,"BRACKET_SQUARE_LEFT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BACKSLASH,"BACKSLASH");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BRACKET_SQUARE_RIGHT,"BRACKET_SQUARE_RIGHT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::CARET,"CARET");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::UNDERSCORE,"UNDERSCORE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BRACKET_CURLY_LEFT,"BRACKET_CURLY_LEFT");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::PIPE,"PIPE");
	HX_MARK_MEMBER_NAME(Char_Impl__obj::BRACKET_CURLY_RIGHT,"BRACKET_CURLY_RIGHT");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Char_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::CHAR_CASE_MAPPER,"CHAR_CASE_MAPPER");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BACKSPACE,"BACKSPACE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::TAB,"TAB");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::LF,"LF");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::CR,"CR");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::ESC,"ESC");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::SPACE,"SPACE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::EXCLAMATION_MARK,"EXCLAMATION_MARK");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::DOUBLE_QUOTE,"DOUBLE_QUOTE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::HASH,"HASH");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::DOLLAR,"DOLLAR");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::AMPERSAND,"AMPERSAND");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::SINGLE_QUOTE,"SINGLE_QUOTE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BRACKET_ROUND_LEFT,"BRACKET_ROUND_LEFT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BRACKET_ROUND_RIGHT,"BRACKET_ROUND_RIGHT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::ASTERISK,"ASTERISK");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::PLUS,"PLUS");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::COMMA,"COMMA");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::MINUS,"MINUS");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::DOT,"DOT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::SLASH,"SLASH");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::ZERO,"ZERO");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::ONE,"ONE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::TWO,"TWO");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::TRHEE,"TRHEE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::FOUR,"FOUR");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::FIVE,"FIVE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::SIX,"SIX");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::SEVEN,"SEVEN");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::EIGHT,"EIGHT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::NINE,"NINE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::COLON,"COLON");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::SEMICOLON,"SEMICOLON");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::LOWER_THAN,"LOWER_THAN");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::EQUALS,"EQUALS");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::GREATER_THAN,"GREATER_THAN");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::QUESTION_MARK,"QUESTION_MARK");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BRACKET_SQUARE_LEFT,"BRACKET_SQUARE_LEFT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BACKSLASH,"BACKSLASH");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BRACKET_SQUARE_RIGHT,"BRACKET_SQUARE_RIGHT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::CARET,"CARET");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::UNDERSCORE,"UNDERSCORE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BRACKET_CURLY_LEFT,"BRACKET_CURLY_LEFT");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::PIPE,"PIPE");
	HX_VISIT_MEMBER_NAME(Char_Impl__obj::BRACKET_CURLY_RIGHT,"BRACKET_CURLY_RIGHT");
};

#endif

hx::Class Char_Impl__obj::__mClass;

static ::String Char_Impl__obj_sStaticFields[] = {
	HX_HCSTRING("CHAR_CASE_MAPPER","\x87","\x9e","\x2b","\x6a"),
	HX_HCSTRING("BACKSPACE","\x1f","\xf5","\x42","\xc6"),
	HX_HCSTRING("TAB","\x35","\xf6","\x3f","\x00"),
	HX_HCSTRING("LF","\x7a","\x42","\x00","\x00"),
	HX_HCSTRING("CR","\xaf","\x3a","\x00","\x00"),
	HX_HCSTRING("ESC","\x15","\xa4","\x34","\x00"),
	HX_HCSTRING("SPACE","\xa6","\xc4","\x54","\xff"),
	HX_HCSTRING("EXCLAMATION_MARK","\xff","\x88","\x1c","\x48"),
	HX_HCSTRING("DOUBLE_QUOTE","\x2e","\x9c","\x7d","\x7e"),
	HX_HCSTRING("HASH","\xce","\xf7","\xc8","\x2f"),
	HX_HCSTRING("DOLLAR","\x7c","\x78","\x62","\xdf"),
	HX_HCSTRING("AMPERSAND","\x15","\xdc","\xb6","\xc6"),
	HX_HCSTRING("SINGLE_QUOTE","\xe5","\x4a","\x2c","\x30"),
	HX_HCSTRING("BRACKET_ROUND_LEFT","\x0f","\x75","\x5f","\xeb"),
	HX_HCSTRING("BRACKET_ROUND_RIGHT","\xb4","\x05","\x34","\x7f"),
	HX_HCSTRING("ASTERISK","\x72","\xfc","\x4f","\x88"),
	HX_HCSTRING("PLUS","\x5a","\x07","\x1b","\x35"),
	HX_HCSTRING("COMMA","\xb5","\x69","\x4b","\xc8"),
	HX_HCSTRING("MINUS","\x50","\xb8","\x56","\x86"),
	HX_HCSTRING("DOT","\x69","\xde","\x33","\x00"),
	HX_HCSTRING("SLASH","\x1d","\xf8","\xaf","\xfc"),
	HX_HCSTRING("ZERO","\x28","\xd7","\xb1","\x3b"),
	HX_HCSTRING("ONE","\x46","\x36","\x3c","\x00"),
	HX_HCSTRING("TWO","\x6c","\x09","\x40","\x00"),
	HX_HCSTRING("TRHEE","\xea","\x17","\x13","\x94"),
	HX_HCSTRING("FOUR","\xe6","\x2b","\x81","\x2e"),
	HX_HCSTRING("FIVE","\x32","\x9f","\x7c","\x2e"),
	HX_HCSTRING("SIX","\x02","\x3b","\x3f","\x00"),
	HX_HCSTRING("SEVEN","\xed","\x5c","\x1f","\xf8"),
	HX_HCSTRING("EIGHT","\x2f","\xb9","\x1c","\xeb"),
	HX_HCSTRING("NINE","\x32","\x4d","\xc6","\x33"),
	HX_HCSTRING("COLON","\x3f","\xa9","\x4a","\xc8"),
	HX_HCSTRING("SEMICOLON","\x11","\x86","\x2a","\x49"),
	HX_HCSTRING("LOWER_THAN","\xbf","\x41","\x1a","\x88"),
	HX_HCSTRING("EQUALS","\x3f","\x9a","\x75","\x72"),
	HX_HCSTRING("GREATER_THAN","\x26","\xa8","\x9b","\x94"),
	HX_HCSTRING("QUESTION_MARK","\x06","\xcf","\x45","\x6c"),
	HX_HCSTRING("BRACKET_SQUARE_LEFT","\x32","\x5a","\x2c","\xf8"),
	HX_HCSTRING("BACKSLASH","\x96","\x28","\x9e","\xc3"),
	HX_HCSTRING("BRACKET_SQUARE_RIGHT","\x31","\x9f","\xaf","\xa5"),
	HX_HCSTRING("CARET","\x63","\x31","\x0e","\xbf"),
	HX_HCSTRING("UNDERSCORE","\x3a","\x5f","\x02","\x45"),
	HX_HCSTRING("BRACKET_CURLY_LEFT","\xf0","\x34","\x67","\xff"),
	HX_HCSTRING("PIPE","\x2e","\xbc","\x18","\x35"),
	HX_HCSTRING("BRACKET_CURLY_RIGHT","\xb3","\x2a","\xf4","\xf1"),
	HX_HCSTRING("fromString","\xdb","\x2d","\x74","\x54"),
	HX_HCSTRING("of","\x17","\x61","\x00","\x00"),
	HX_HCSTRING("op_plus_string","\xf8","\xb6","\xc6","\x6d"),
	HX_HCSTRING("op_plus_string2","\x3a","\x62","\x19","\xa0"),
	HX_HCSTRING("op_plus","\x78","\x42","\x32","\xcd"),
	HX_HCSTRING("isAscii","\x07","\xed","\xb2","\xc2"),
	HX_HCSTRING("isAsciiAlpha","\xd7","\x90","\xd5","\x4d"),
	HX_HCSTRING("isAsciiAlphanumeric","\xd6","\x2a","\x1b","\x5c"),
	HX_HCSTRING("isAsciiControl","\x16","\x65","\x68","\x02"),
	HX_HCSTRING("isAsciiPrintable","\x40","\x7a","\x6b","\x02"),
	HX_HCSTRING("isDigit","\x63","\x91","\x4d","\x76"),
	HX_HCSTRING("isEOF","\xf2","\x12","\x4b","\xc1"),
	HX_HCSTRING("isSpace","\x7c","\x30","\xec","\x1d"),
	HX_HCSTRING("isUTF8","\x3b","\xb6","\xfc","\x6a"),
	HX_HCSTRING("isWhitespace","\x07","\x26","\xac","\x17"),
	HX_HCSTRING("isLowerCase","\x07","\x90","\xff","\x2f"),
	HX_HCSTRING("isUpperCase","\xe8","\x73","\x98","\xb0"),
	HX_HCSTRING("toLowerCase","\x56","\x4c","\x64","\xb8"),
	HX_HCSTRING("toUpperCase","\x37","\x30","\xfd","\x38"),
	HX_HCSTRING("toInt","\x34","\xbe","\x11","\x14"),
	HX_HCSTRING("toString","\xac","\xd0","\x6e","\x38"),
	::String(null())
};

void Char_Impl__obj::__register()
{
	hx::Object *dummy = new Char_Impl__obj;
	Char_Impl__obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings._Char.Char_Impl_","\x99","\xf1","\x13","\x0e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Char_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Char_Impl__obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Char_Impl__obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Char_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Char_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Char_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Char_Impl__obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Char_Impl__obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_fedf12890863f20c_31_boot)
HXDLIN(  31)		CHAR_CASE_MAPPER =  ::hx::strings::_Char::CharCaseMapper_obj::__alloc( HX_CTX );
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_36_boot)
HXDLIN(  36)		BACKSPACE = (int)8;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_41_boot)
HXDLIN(  41)		TAB = (int)9;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_46_boot)
HXDLIN(  46)		LF = (int)10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_51_boot)
HXDLIN(  51)		CR = (int)13;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_56_boot)
HXDLIN(  56)		ESC = (int)27;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_61_boot)
HXDLIN(  61)		SPACE = (int)32;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_66_boot)
HXDLIN(  66)		EXCLAMATION_MARK = (int)33;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_71_boot)
HXDLIN(  71)		DOUBLE_QUOTE = (int)34;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_76_boot)
HXDLIN(  76)		HASH = (int)35;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_81_boot)
HXDLIN(  81)		DOLLAR = (int)36;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_86_boot)
HXDLIN(  86)		AMPERSAND = (int)38;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_91_boot)
HXDLIN(  91)		SINGLE_QUOTE = (int)39;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_96_boot)
HXDLIN(  96)		BRACKET_ROUND_LEFT = (int)40;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_101_boot)
HXDLIN( 101)		BRACKET_ROUND_RIGHT = (int)41;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_106_boot)
HXDLIN( 106)		ASTERISK = (int)42;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_111_boot)
HXDLIN( 111)		PLUS = (int)43;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_116_boot)
HXDLIN( 116)		COMMA = (int)44;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_121_boot)
HXDLIN( 121)		MINUS = (int)45;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_126_boot)
HXDLIN( 126)		DOT = (int)46;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_131_boot)
HXDLIN( 131)		SLASH = (int)47;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_136_boot)
HXDLIN( 136)		ZERO = (int)48;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_141_boot)
HXDLIN( 141)		ONE = (int)49;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_146_boot)
HXDLIN( 146)		TWO = (int)50;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_151_boot)
HXDLIN( 151)		TRHEE = (int)51;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_156_boot)
HXDLIN( 156)		FOUR = (int)52;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_161_boot)
HXDLIN( 161)		FIVE = (int)53;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_166_boot)
HXDLIN( 166)		SIX = (int)54;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_171_boot)
HXDLIN( 171)		SEVEN = (int)55;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_176_boot)
HXDLIN( 176)		EIGHT = (int)56;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_181_boot)
HXDLIN( 181)		NINE = (int)57;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_186_boot)
HXDLIN( 186)		COLON = (int)58;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_191_boot)
HXDLIN( 191)		SEMICOLON = (int)59;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_196_boot)
HXDLIN( 196)		LOWER_THAN = (int)60;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_201_boot)
HXDLIN( 201)		EQUALS = (int)61;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_206_boot)
HXDLIN( 206)		GREATER_THAN = (int)62;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_211_boot)
HXDLIN( 211)		QUESTION_MARK = (int)63;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_216_boot)
HXDLIN( 216)		BRACKET_SQUARE_LEFT = (int)91;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_221_boot)
HXDLIN( 221)		BACKSLASH = (int)92;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_226_boot)
HXDLIN( 226)		BRACKET_SQUARE_RIGHT = (int)93;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_231_boot)
HXDLIN( 231)		CARET = (int)94;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_236_boot)
HXDLIN( 236)		UNDERSCORE = (int)95;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_241_boot)
HXDLIN( 241)		BRACKET_CURLY_LEFT = (int)123;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_246_boot)
HXDLIN( 246)		PIPE = (int)124;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fedf12890863f20c_251_boot)
HXDLIN( 251)		BRACKET_CURLY_RIGHT = (int)125;
            	}
}

} // end namespace hx
} // end namespace strings
} // end namespace _Char
