// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_Utf8
#include <haxe/Utf8.h>
#endif
#ifndef INCLUDED_hx_strings_AnsiState
#include <hx/strings/AnsiState.h>
#endif
#ifndef INCLUDED_hx_strings_AnsiToHtmlRenderMethod
#include <hx/strings/AnsiToHtmlRenderMethod.h>
#endif
#ifndef INCLUDED_hx_strings_StringBuilder
#include <hx/strings/StringBuilder.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_221aeffc2a848937_4208_new,"hx.strings.AnsiState","new",0x9949d156,"hx.strings.AnsiState.new","hx/strings/Strings.hx",4208,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_221aeffc2a848937_4215_isActive,"hx.strings.AnsiState","isActive",0xf5c4a09a,"hx.strings.AnsiState.isActive","hx/strings/Strings.hx",4215,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_221aeffc2a848937_4218_reset,"hx.strings.AnsiState","reset",0x29f8f445,"hx.strings.AnsiState.reset","hx/strings/Strings.hx",4218,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_221aeffc2a848937_4226_copyFrom,"hx.strings.AnsiState","copyFrom",0x4f75cf09,"hx.strings.AnsiState.copyFrom","hx/strings/Strings.hx",4226,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_221aeffc2a848937_4235_setGraphicModeParameter,"hx.strings.AnsiState","setGraphicModeParameter",0xb1c78eb6,"hx.strings.AnsiState.setGraphicModeParameter","hx/strings/Strings.hx",4235,0x74f74a28)
HX_LOCAL_STACK_FRAME(_hx_pos_221aeffc2a848937_4259_toCSS,"hx.strings.AnsiState","toCSS",0x573dc37e,"hx.strings.AnsiState.toCSS","hx/strings/Strings.hx",4259,0x74f74a28)
static const ::String _hx_array_data_4d4d2e64_6[] = {
	HX_("color:",77,c5,86,c6),
};
static const ::String _hx_array_data_4d4d2e64_7[] = {
	HX_(";",3b,00,00,00),
};
static const ::String _hx_array_data_4d4d2e64_8[] = {
	HX_("background-color:",36,8b,bd,c1),
};
static const ::String _hx_array_data_4d4d2e64_9[] = {
	HX_(";",3b,00,00,00),
};
static const ::String _hx_array_data_4d4d2e64_10[] = {
	HX_("font-weight:bold;",92,98,cf,29),
};
static const ::String _hx_array_data_4d4d2e64_11[] = {
	HX_("text-decoration:underline;",59,c4,ff,8a),
};
static const ::String _hx_array_data_4d4d2e64_12[] = {
	HX_("text-decoration:blink;",09,91,3e,2b),
};
HX_LOCAL_STACK_FRAME(_hx_pos_221aeffc2a848937_4304_defaultCssClassesCallback,"hx.strings.AnsiState","defaultCssClassesCallback",0x63681c9f,"hx.strings.AnsiState.defaultCssClassesCallback","hx/strings/Strings.hx",4304,0x74f74a28)
namespace hx{
namespace strings{

void AnsiState_obj::__construct( ::hx::strings::AnsiState copyFrom){
            	HX_STACKFRAME(&_hx_pos_221aeffc2a848937_4208_new)
HXDLIN(4208)		if (hx::IsNull( copyFrom )) {
HXLINE(4209)			this->reset();
            		}
            		else {
HXLINE(4211)			this->copyFrom(copyFrom);
            		}
            	}

Dynamic AnsiState_obj::__CreateEmpty() { return new AnsiState_obj; }

void *AnsiState_obj::_hx_vtable = 0;

Dynamic AnsiState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AnsiState_obj > _hx_result = new AnsiState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AnsiState_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x121d64f0;
}

bool AnsiState_obj::isActive(){
            	HX_STACKFRAME(&_hx_pos_221aeffc2a848937_4215_isActive)
HXDLIN(4215)		bool _hx_tmp;
HXDLIN(4215)		bool _hx_tmp1;
HXDLIN(4215)		bool _hx_tmp2;
HXDLIN(4215)		if (hx::IsNull( this->fgcolor )) {
HXDLIN(4215)			_hx_tmp2 = hx::IsNotNull( this->bgcolor );
            		}
            		else {
HXDLIN(4215)			_hx_tmp2 = true;
            		}
HXDLIN(4215)		if (!(_hx_tmp2)) {
HXDLIN(4215)			_hx_tmp1 = this->bold;
            		}
            		else {
HXDLIN(4215)			_hx_tmp1 = true;
            		}
HXDLIN(4215)		if (!(_hx_tmp1)) {
HXDLIN(4215)			_hx_tmp = this->underline;
            		}
            		else {
HXDLIN(4215)			_hx_tmp = true;
            		}
HXDLIN(4215)		if (!(_hx_tmp)) {
HXDLIN(4215)			return this->blink;
            		}
            		else {
HXDLIN(4215)			return true;
            		}
HXDLIN(4215)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnsiState_obj,isActive,return )

void AnsiState_obj::reset(){
            	HX_STACKFRAME(&_hx_pos_221aeffc2a848937_4218_reset)
HXLINE(4219)		this->fgcolor = null();
HXLINE(4220)		this->bgcolor = null();
HXLINE(4221)		this->bold = false;
HXLINE(4222)		this->underline = false;
HXLINE(4223)		this->blink = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AnsiState_obj,reset,(void))

void AnsiState_obj::copyFrom( ::hx::strings::AnsiState other){
            	HX_STACKFRAME(&_hx_pos_221aeffc2a848937_4226_copyFrom)
HXLINE(4227)		this->fgcolor = other->fgcolor;
HXLINE(4228)		this->bgcolor = other->bgcolor;
HXLINE(4229)		this->bold = other->bold;
HXLINE(4230)		this->underline = other->underline;
HXLINE(4231)		this->blink = other->blink;
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnsiState_obj,copyFrom,(void))

void AnsiState_obj::setGraphicModeParameter(int param){
            	HX_STACKFRAME(&_hx_pos_221aeffc2a848937_4235_setGraphicModeParameter)
HXDLIN(4235)		switch((int)(param)){
            			case (int)0: {
HXLINE(4236)				this->reset();
            			}
            			break;
            			case (int)1: {
HXLINE(4237)				this->bold = true;
            			}
            			break;
            			case (int)4: {
HXLINE(4238)				this->underline = true;
            			}
            			break;
            			case (int)5: {
HXLINE(4239)				this->blink = true;
            			}
            			break;
            			case (int)30: {
HXLINE(4240)				this->fgcolor = HX_("black",bf,d5,f1,b4);
            			}
            			break;
            			case (int)31: {
HXLINE(4241)				this->fgcolor = HX_("red",51,d9,56,00);
            			}
            			break;
            			case (int)32: {
HXLINE(4242)				this->fgcolor = HX_("green",c3,0e,ed,99);
            			}
            			break;
            			case (int)33: {
HXLINE(4243)				this->fgcolor = HX_("yellow",74,9f,5c,d0);
            			}
            			break;
            			case (int)34: {
HXLINE(4244)				this->fgcolor = HX_("blue",9a,42,19,41);
            			}
            			break;
            			case (int)35: {
HXLINE(4245)				this->fgcolor = HX_("magenta",29,ba,9d,0e);
            			}
            			break;
            			case (int)36: {
HXLINE(4246)				this->fgcolor = HX_("cyan",23,45,cc,41);
            			}
            			break;
            			case (int)37: {
HXLINE(4247)				this->fgcolor = HX_("white",a9,4a,bd,c9);
            			}
            			break;
            			case (int)40: {
HXLINE(4248)				this->bgcolor = HX_("black",bf,d5,f1,b4);
            			}
            			break;
            			case (int)41: {
HXLINE(4249)				this->bgcolor = HX_("red",51,d9,56,00);
            			}
            			break;
            			case (int)42: {
HXLINE(4250)				this->bgcolor = HX_("green",c3,0e,ed,99);
            			}
            			break;
            			case (int)43: {
HXLINE(4251)				this->bgcolor = HX_("yellow",74,9f,5c,d0);
            			}
            			break;
            			case (int)44: {
HXLINE(4252)				this->bgcolor = HX_("blue",9a,42,19,41);
            			}
            			break;
            			case (int)45: {
HXLINE(4253)				this->bgcolor = HX_("magenta",29,ba,9d,0e);
            			}
            			break;
            			case (int)46: {
HXLINE(4254)				this->bgcolor = HX_("cyan",23,45,cc,41);
            			}
            			break;
            			case (int)47: {
HXLINE(4255)				this->bgcolor = HX_("white",a9,4a,bd,c9);
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnsiState_obj,setGraphicModeParameter,(void))

::String AnsiState_obj::toCSS( ::hx::strings::AnsiToHtmlRenderMethod renderMethod){
            	HX_GC_STACKFRAME(&_hx_pos_221aeffc2a848937_4259_toCSS)
HXLINE(4260)		if (this->isActive()) {
HXLINE(4261)			 ::hx::strings::StringBuilder sb =  ::hx::strings::StringBuilder_obj::__alloc( HX_CTX ,null());
HXLINE(4262)			if (hx::IsNull( renderMethod )) {
HXLINE(4262)				renderMethod = ::hx::strings::AnsiToHtmlRenderMethod_obj::StyleAttributes_dyn();
            			}
HXLINE(4263)			switch((int)(_hx_getEnumValueIndex(renderMethod))){
            				case (int)0: {
HXLINE(4265)					if (hx::IsNotNull( this->fgcolor )) {
HXLINE(4266)						{
HXLINE(4266)							 ::StringBuf _this = sb->sb;
HXDLIN(4266)							if (hx::IsNotNull( _this->charBuf )) {
HXLINE(4266)								_this->flush();
            							}
HXDLIN(4266)							if (hx::IsNull( _this->b )) {
HXLINE(4266)								_this->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_6,1);
            							}
            							else {
HXLINE(4266)								_this->b->push(HX_("color:",77,c5,86,c6));
            							}
            						}
HXDLIN(4266)						 ::hx::strings::StringBuilder sb1 = sb;
HXDLIN(4266)						int sb2 = sb1->len;
HXDLIN(4266)						sb1->len = (sb2 + ::haxe::Utf8_obj::length(HX_("color:",77,c5,86,c6)));
HXDLIN(4266)						 ::hx::strings::StringBuilder _this1 = sb;
HXDLIN(4266)						::String item = this->fgcolor;
HXDLIN(4266)						{
HXLINE(4266)							 ::StringBuf _this2 = _this1->sb;
HXDLIN(4266)							if (hx::IsNotNull( _this2->charBuf )) {
HXLINE(4266)								_this2->flush();
            							}
HXDLIN(4266)							if (hx::IsNull( _this2->b )) {
HXLINE(4266)								_this2->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item));
            							}
            							else {
HXLINE(4266)								::Array< ::String > _this3 = _this2->b;
HXDLIN(4266)								_this3->push(::Std_obj::string(item));
            							}
            						}
HXDLIN(4266)						 ::hx::strings::StringBuilder _this4 = _this1;
HXDLIN(4266)						int _this5 = _this4->len;
HXDLIN(4266)						int _hx_tmp;
HXDLIN(4266)						if (hx::IsNull( item )) {
HXLINE(4266)							_hx_tmp = (int)0;
            						}
            						else {
HXLINE(4266)							_hx_tmp = ::haxe::Utf8_obj::length(item);
            						}
HXDLIN(4266)						_this4->len = (_this5 + _hx_tmp);
HXDLIN(4266)						 ::hx::strings::StringBuilder _this6 = _this1;
HXDLIN(4266)						{
HXLINE(4266)							 ::StringBuf _this7 = _this6->sb;
HXDLIN(4266)							if (hx::IsNotNull( _this7->charBuf )) {
HXLINE(4266)								_this7->flush();
            							}
HXDLIN(4266)							if (hx::IsNull( _this7->b )) {
HXLINE(4266)								_this7->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_7,1);
            							}
            							else {
HXLINE(4266)								_this7->b->push(HX_(";",3b,00,00,00));
            							}
            						}
HXDLIN(4266)						 ::hx::strings::StringBuilder _this8 = _this6;
HXDLIN(4266)						int _this9 = _this8->len;
HXDLIN(4266)						_this8->len = (_this9 + ::haxe::Utf8_obj::length(HX_(";",3b,00,00,00)));
            					}
HXLINE(4267)					if (hx::IsNotNull( this->bgcolor )) {
HXLINE(4268)						{
HXLINE(4268)							 ::StringBuf _this10 = sb->sb;
HXDLIN(4268)							if (hx::IsNotNull( _this10->charBuf )) {
HXLINE(4268)								_this10->flush();
            							}
HXDLIN(4268)							if (hx::IsNull( _this10->b )) {
HXLINE(4268)								_this10->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_8,1);
            							}
            							else {
HXLINE(4268)								_this10->b->push(HX_("background-color:",36,8b,bd,c1));
            							}
            						}
HXDLIN(4268)						 ::hx::strings::StringBuilder sb3 = sb;
HXDLIN(4268)						int sb4 = sb3->len;
HXDLIN(4268)						sb3->len = (sb4 + ::haxe::Utf8_obj::length(HX_("background-color:",36,8b,bd,c1)));
HXDLIN(4268)						 ::hx::strings::StringBuilder _this11 = sb;
HXDLIN(4268)						::String item1 = this->bgcolor;
HXDLIN(4268)						{
HXLINE(4268)							 ::StringBuf _this12 = _this11->sb;
HXDLIN(4268)							if (hx::IsNotNull( _this12->charBuf )) {
HXLINE(4268)								_this12->flush();
            							}
HXDLIN(4268)							if (hx::IsNull( _this12->b )) {
HXLINE(4268)								_this12->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item1));
            							}
            							else {
HXLINE(4268)								::Array< ::String > _this13 = _this12->b;
HXDLIN(4268)								_this13->push(::Std_obj::string(item1));
            							}
            						}
HXDLIN(4268)						 ::hx::strings::StringBuilder _this14 = _this11;
HXDLIN(4268)						int _this15 = _this14->len;
HXDLIN(4268)						int _hx_tmp1;
HXDLIN(4268)						if (hx::IsNull( item1 )) {
HXLINE(4268)							_hx_tmp1 = (int)0;
            						}
            						else {
HXLINE(4268)							_hx_tmp1 = ::haxe::Utf8_obj::length(item1);
            						}
HXDLIN(4268)						_this14->len = (_this15 + _hx_tmp1);
HXDLIN(4268)						 ::hx::strings::StringBuilder _this16 = _this11;
HXDLIN(4268)						{
HXLINE(4268)							 ::StringBuf _this17 = _this16->sb;
HXDLIN(4268)							if (hx::IsNotNull( _this17->charBuf )) {
HXLINE(4268)								_this17->flush();
            							}
HXDLIN(4268)							if (hx::IsNull( _this17->b )) {
HXLINE(4268)								_this17->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_9,1);
            							}
            							else {
HXLINE(4268)								_this17->b->push(HX_(";",3b,00,00,00));
            							}
            						}
HXDLIN(4268)						 ::hx::strings::StringBuilder _this18 = _this16;
HXDLIN(4268)						int _this19 = _this18->len;
HXDLIN(4268)						_this18->len = (_this19 + ::haxe::Utf8_obj::length(HX_(";",3b,00,00,00)));
            					}
HXLINE(4269)					if (this->bold) {
HXLINE(4270)						{
HXLINE(4270)							 ::StringBuf _this20 = sb->sb;
HXDLIN(4270)							if (hx::IsNotNull( _this20->charBuf )) {
HXLINE(4270)								_this20->flush();
            							}
HXDLIN(4270)							if (hx::IsNull( _this20->b )) {
HXLINE(4270)								_this20->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_10,1);
            							}
            							else {
HXLINE(4270)								_this20->b->push(HX_("font-weight:bold;",92,98,cf,29));
            							}
            						}
HXDLIN(4270)						 ::hx::strings::StringBuilder sb5 = sb;
HXDLIN(4270)						int sb6 = sb5->len;
HXDLIN(4270)						sb5->len = (sb6 + ::haxe::Utf8_obj::length(HX_("font-weight:bold;",92,98,cf,29)));
            					}
HXLINE(4271)					if (this->underline) {
HXLINE(4272)						{
HXLINE(4272)							 ::StringBuf _this21 = sb->sb;
HXDLIN(4272)							if (hx::IsNotNull( _this21->charBuf )) {
HXLINE(4272)								_this21->flush();
            							}
HXDLIN(4272)							if (hx::IsNull( _this21->b )) {
HXLINE(4272)								_this21->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_11,1);
            							}
            							else {
HXLINE(4272)								_this21->b->push(HX_("text-decoration:underline;",59,c4,ff,8a));
            							}
            						}
HXDLIN(4272)						 ::hx::strings::StringBuilder sb7 = sb;
HXDLIN(4272)						int sb8 = sb7->len;
HXDLIN(4272)						sb7->len = (sb8 + ::haxe::Utf8_obj::length(HX_("text-decoration:underline;",59,c4,ff,8a)));
            					}
HXLINE(4273)					if (this->blink) {
HXLINE(4274)						{
HXLINE(4274)							 ::StringBuf _this22 = sb->sb;
HXDLIN(4274)							if (hx::IsNotNull( _this22->charBuf )) {
HXLINE(4274)								_this22->flush();
            							}
HXDLIN(4274)							if (hx::IsNull( _this22->b )) {
HXLINE(4274)								_this22->b = ::Array_obj< ::String >::fromData( _hx_array_data_4d4d2e64_12,1);
            							}
            							else {
HXLINE(4274)								_this22->b->push(HX_("text-decoration:blink;",09,91,3e,2b));
            							}
            						}
HXDLIN(4274)						 ::hx::strings::StringBuilder sb9 = sb;
HXDLIN(4274)						int sb10 = sb9->len;
HXDLIN(4274)						sb9->len = (sb10 + ::haxe::Utf8_obj::length(HX_("text-decoration:blink;",09,91,3e,2b)));
            					}
            				}
            				break;
            				case (int)1: {
HXLINE(4277)					::String item2 = ::hx::strings::AnsiState_obj::defaultCssClassesCallback(hx::ObjectPtr<OBJ_>(this));
HXDLIN(4277)					{
HXLINE(4277)						 ::StringBuf _this23 = sb->sb;
HXDLIN(4277)						if (hx::IsNotNull( _this23->charBuf )) {
HXLINE(4277)							_this23->flush();
            						}
HXDLIN(4277)						if (hx::IsNull( _this23->b )) {
HXLINE(4277)							_this23->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item2));
            						}
            						else {
HXLINE(4277)							::Array< ::String > _this24 = _this23->b;
HXDLIN(4277)							_this24->push(::Std_obj::string(item2));
            						}
            					}
HXDLIN(4277)					 ::hx::strings::StringBuilder sb11 = sb;
HXDLIN(4277)					int sb12 = sb11->len;
HXDLIN(4277)					int _hx_tmp2;
HXDLIN(4277)					if (hx::IsNull( item2 )) {
HXLINE(4277)						_hx_tmp2 = (int)0;
            					}
            					else {
HXLINE(4277)						_hx_tmp2 = ::haxe::Utf8_obj::length(item2);
            					}
HXDLIN(4277)					sb11->len = (sb12 + _hx_tmp2);
            				}
            				break;
            				case (int)2: {
HXLINE(4279)					 ::Dynamic func = renderMethod->_hx_getObject(0);
HXLINE(4280)					{
HXLINE(4280)						::String item3 = ( (::String)(func(hx::ObjectPtr<OBJ_>(this))) );
HXDLIN(4280)						{
HXLINE(4280)							 ::StringBuf _this25 = sb->sb;
HXDLIN(4280)							if (hx::IsNotNull( _this25->charBuf )) {
HXLINE(4280)								_this25->flush();
            							}
HXDLIN(4280)							if (hx::IsNull( _this25->b )) {
HXLINE(4280)								_this25->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(item3));
            							}
            							else {
HXLINE(4280)								::Array< ::String > _this26 = _this25->b;
HXDLIN(4280)								_this26->push(::Std_obj::string(item3));
            							}
            						}
HXDLIN(4280)						 ::hx::strings::StringBuilder sb13 = sb;
HXDLIN(4280)						int sb14 = sb13->len;
HXDLIN(4280)						int _hx_tmp3;
HXDLIN(4280)						if (hx::IsNull( item3 )) {
HXLINE(4280)							_hx_tmp3 = (int)0;
            						}
            						else {
HXLINE(4280)							_hx_tmp3 = ::haxe::Utf8_obj::length(item3);
            						}
HXDLIN(4280)						sb13->len = (sb14 + _hx_tmp3);
            					}
            				}
            				break;
            			}
HXLINE(4282)			return sb->toString();
            		}
HXLINE(4284)		return HX_("",00,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AnsiState_obj,toCSS,return )

::String AnsiState_obj::defaultCssClassesCallback( ::hx::strings::AnsiState state){
            	HX_STACKFRAME(&_hx_pos_221aeffc2a848937_4304_defaultCssClassesCallback)
HXLINE(4305)		::Array< ::String > classes = ::Array_obj< ::String >::__new(0);
HXLINE(4306)		if (hx::IsNotNull( state->fgcolor )) {
HXLINE(4306)			classes->push((HX_("ansi_fg_",42,b1,8c,39) + state->fgcolor));
            		}
HXLINE(4307)		if (hx::IsNotNull( state->bgcolor )) {
HXLINE(4307)			classes->push((HX_("ansi_bg_",3e,a8,89,39) + state->bgcolor));
            		}
HXLINE(4308)		if (state->bold) {
HXLINE(4308)			classes->push(HX_("ansi_bold",c1,ab,ef,1e));
            		}
HXLINE(4309)		if (state->underline) {
HXLINE(4309)			classes->push(HX_("ansi_underline",50,51,0e,04));
            		}
HXLINE(4310)		if (state->blink) {
HXLINE(4310)			classes->push(HX_("ansi_blink",a0,bb,c8,f0));
            		}
HXLINE(4311)		return classes->join(HX_(" ",20,00,00,00));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(AnsiState_obj,defaultCssClassesCallback,return )


hx::ObjectPtr< AnsiState_obj > AnsiState_obj::__new( ::hx::strings::AnsiState copyFrom) {
	hx::ObjectPtr< AnsiState_obj > __this = new AnsiState_obj();
	__this->__construct(copyFrom);
	return __this;
}

hx::ObjectPtr< AnsiState_obj > AnsiState_obj::__alloc(hx::Ctx *_hx_ctx, ::hx::strings::AnsiState copyFrom) {
	AnsiState_obj *__this = (AnsiState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AnsiState_obj), true, "hx.strings.AnsiState"));
	*(void **)__this = AnsiState_obj::_hx_vtable;
	__this->__construct(copyFrom);
	return __this;
}

AnsiState_obj::AnsiState_obj()
{
}

void AnsiState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AnsiState);
	HX_MARK_MEMBER_NAME(bgcolor,"bgcolor");
	HX_MARK_MEMBER_NAME(blink,"blink");
	HX_MARK_MEMBER_NAME(bold,"bold");
	HX_MARK_MEMBER_NAME(fgcolor,"fgcolor");
	HX_MARK_MEMBER_NAME(underline,"underline");
	HX_MARK_END_CLASS();
}

void AnsiState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bgcolor,"bgcolor");
	HX_VISIT_MEMBER_NAME(blink,"blink");
	HX_VISIT_MEMBER_NAME(bold,"bold");
	HX_VISIT_MEMBER_NAME(fgcolor,"fgcolor");
	HX_VISIT_MEMBER_NAME(underline,"underline");
}

hx::Val AnsiState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bold") ) { return hx::Val( bold ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"blink") ) { return hx::Val( blink ); }
		if (HX_FIELD_EQ(inName,"reset") ) { return hx::Val( reset_dyn() ); }
		if (HX_FIELD_EQ(inName,"toCSS") ) { return hx::Val( toCSS_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgcolor") ) { return hx::Val( bgcolor ); }
		if (HX_FIELD_EQ(inName,"fgcolor") ) { return hx::Val( fgcolor ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"isActive") ) { return hx::Val( isActive_dyn() ); }
		if (HX_FIELD_EQ(inName,"copyFrom") ) { return hx::Val( copyFrom_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"underline") ) { return hx::Val( underline ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"setGraphicModeParameter") ) { return hx::Val( setGraphicModeParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool AnsiState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 25:
		if (HX_FIELD_EQ(inName,"defaultCssClassesCallback") ) { outValue = defaultCssClassesCallback_dyn(); return true; }
	}
	return false;
}

hx::Val AnsiState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"bold") ) { bold=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"blink") ) { blink=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"bgcolor") ) { bgcolor=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fgcolor") ) { fgcolor=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"underline") ) { underline=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AnsiState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("bgcolor","\x7e","\x11","\x56","\x64"));
	outFields->push(HX_HCSTRING("blink","\x5c","\xf1","\xf7","\xb4"));
	outFields->push(HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"));
	outFields->push(HX_HCSTRING("fgcolor","\x82","\xec","\xab","\x0a"));
	outFields->push(HX_HCSTRING("underline","\x0c","\x15","\xd1","\x87"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo AnsiState_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(AnsiState_obj,bgcolor),HX_HCSTRING("bgcolor","\x7e","\x11","\x56","\x64")},
	{hx::fsBool,(int)offsetof(AnsiState_obj,blink),HX_HCSTRING("blink","\x5c","\xf1","\xf7","\xb4")},
	{hx::fsBool,(int)offsetof(AnsiState_obj,bold),HX_HCSTRING("bold","\x85","\x81","\x1b","\x41")},
	{hx::fsString,(int)offsetof(AnsiState_obj,fgcolor),HX_HCSTRING("fgcolor","\x82","\xec","\xab","\x0a")},
	{hx::fsBool,(int)offsetof(AnsiState_obj,underline),HX_HCSTRING("underline","\x0c","\x15","\xd1","\x87")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AnsiState_obj_sStaticStorageInfo = 0;
#endif

static ::String AnsiState_obj_sMemberFields[] = {
	HX_HCSTRING("bgcolor","\x7e","\x11","\x56","\x64"),
	HX_HCSTRING("blink","\x5c","\xf1","\xf7","\xb4"),
	HX_HCSTRING("bold","\x85","\x81","\x1b","\x41"),
	HX_HCSTRING("fgcolor","\x82","\xec","\xab","\x0a"),
	HX_HCSTRING("underline","\x0c","\x15","\xd1","\x87"),
	HX_HCSTRING("isActive","\x50","\xdd","\xaf","\x6e"),
	HX_HCSTRING("reset","\xcf","\x49","\xc8","\xe6"),
	HX_HCSTRING("copyFrom","\xbf","\x0b","\x61","\xc8"),
	HX_HCSTRING("setGraphicModeParameter","\xc0","\x0e","\x1d","\xdf"),
	HX_HCSTRING("toCSS","\x08","\x19","\x0d","\x14"),
	::String(null()) };

static void AnsiState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(AnsiState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void AnsiState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(AnsiState_obj::__mClass,"__mClass");
};

#endif

hx::Class AnsiState_obj::__mClass;

static ::String AnsiState_obj_sStaticFields[] = {
	HX_HCSTRING("defaultCssClassesCallback","\x29","\x33","\x25","\xb1"),
	::String(null())
};

void AnsiState_obj::__register()
{
	hx::Object *dummy = new AnsiState_obj;
	AnsiState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("hx.strings.AnsiState","\x64","\x2e","\x4d","\x4d");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AnsiState_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = AnsiState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(AnsiState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AnsiState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AnsiState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = AnsiState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AnsiState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AnsiState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace hx
} // end namespace strings
