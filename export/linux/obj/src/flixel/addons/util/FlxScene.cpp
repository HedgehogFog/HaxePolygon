// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxBackdrop
#include <flixel/addons/display/FlxBackdrop.h>
#endif
#ifndef INCLUDED_flixel_addons_util_FlxScene
#include <flixel/addons/util/FlxScene.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapAutoTiling
#include <flixel/tile/FlxTilemapAutoTiling.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml_Parser
#include <haxe/xml/Parser.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess
#include <haxe/xml/_Fast/HasNodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_461861eec1cb65ea_28_new,"flixel.addons.util.FlxScene","new",0x35ec818f,"flixel.addons.util.FlxScene.new","flixel/addons/util/FlxScene.hx",28,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_92_set,"flixel.addons.util.FlxScene","set",0x35f04cd1,"flixel.addons.util.FlxScene.set","flixel/addons/util/FlxScene.hx",92,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_132_spawn,"flixel.addons.util.FlxScene","spawn",0xd371392a,"flixel.addons.util.FlxScene.spawn","flixel/addons/util/FlxScene.hx",132,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_186_loadBackgrounds,"flixel.addons.util.FlxScene","loadBackgrounds",0x96b09bee,"flixel.addons.util.FlxScene.loadBackgrounds","flixel/addons/util/FlxScene.hx",186,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_225_loadTilemap,"flixel.addons.util.FlxScene","loadTilemap",0x47b0a6d7,"flixel.addons.util.FlxScene.loadTilemap","flixel/addons/util/FlxScene.hx",225,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_258_loadEverything,"flixel.addons.util.FlxScene","loadEverything",0xa3dee36a,"flixel.addons.util.FlxScene.loadEverything","flixel/addons/util/FlxScene.hx",258,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_268_loadConstants,"flixel.addons.util.FlxScene","loadConstants",0x5b66e978,"flixel.addons.util.FlxScene.loadConstants","flixel/addons/util/FlxScene.hx",268,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_309_addInstance,"flixel.addons.util.FlxScene","addInstance",0xbcc14f05,"flixel.addons.util.FlxScene.addInstance","flixel/addons/util/FlxScene.hx",309,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_327_applySpriteProperties,"flixel.addons.util.FlxScene","applySpriteProperties",0xf92d3ad5,"flixel.addons.util.FlxScene.applySpriteProperties","flixel/addons/util/FlxScene.hx",327,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_419_applyTextProperties,"flixel.addons.util.FlxScene","applyTextProperties",0x2c3c043d,"flixel.addons.util.FlxScene.applyTextProperties","flixel/addons/util/FlxScene.hx",419,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_457_const,"flixel.addons.util.FlxScene","const",0x9c689452,"flixel.addons.util.FlxScene.const","flixel/addons/util/FlxScene.hx",457,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_473_object,"flixel.addons.util.FlxScene","object",0x8c7c74f0,"flixel.addons.util.FlxScene.object","flixel/addons/util/FlxScene.hx",473,0x0c284480)
HX_LOCAL_STACK_FRAME(_hx_pos_461861eec1cb65ea_489_parseBool,"flixel.addons.util.FlxScene","parseBool",0x39e6146c,"flixel.addons.util.FlxScene.parseBool","flixel/addons/util/FlxScene.hx",489,0x0c284480)
namespace flixel{
namespace addons{
namespace util{

void FlxScene_obj::__construct(::String file){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_28_new)
HXLINE(  53)		this->assetsDirectory = HX_("assets/",4c,2a,dc,36);
HXLINE(  82)		if (hx::IsNotNull( file )) {
HXLINE(  83)			this->set(file);
            		}
            	}

Dynamic FlxScene_obj::__CreateEmpty() { return new FlxScene_obj; }

void *FlxScene_obj::_hx_vtable = 0;

Dynamic FlxScene_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxScene_obj > _hx_result = new FlxScene_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FlxScene_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x189c6873;
}

void FlxScene_obj::set(::String file){
            	HX_GC_STACKFRAME(&_hx_pos_461861eec1cb65ea_92_set)
HXLINE(  93)		this->_constants =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  94)		this->_objects =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  96)		::String data = ::openfl::utils::Assets_obj::getText(file);
HXLINE(  98)		this->_xml = ::haxe::xml::Parser_obj::parse(data,null());
HXLINE(  99)		this->_fastXml =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,this->_xml->firstElement());
HXLINE( 103)		if (this->_fastXml->has->resolve(HX_("width",06,b6,62,ca))) {
HXLINE( 104)			this->width = ::Std_obj::parseInt(this->_fastXml->att->resolve(HX_("width",06,b6,62,ca)));
            		}
HXLINE( 106)		if (this->_fastXml->has->resolve(HX_("height",e7,07,4c,02))) {
HXLINE( 107)			this->height = ::Std_obj::parseInt(this->_fastXml->att->resolve(HX_("height",e7,07,4c,02)));
            		}
HXLINE( 109)		if (this->_fastXml->has->resolve(HX_("name",4b,72,ff,48))) {
HXLINE( 110)			this->name = this->_fastXml->att->resolve(HX_("name",4b,72,ff,48));
            		}
HXLINE( 112)		if (this->_fastXml->has->resolve(HX_("description",fc,08,1d,5f))) {
HXLINE( 113)			this->description = this->_fastXml->att->resolve(HX_("description",fc,08,1d,5f));
            		}
HXLINE( 115)		if (this->_fastXml->has->resolve(HX_("version",18,e7,f1,7c))) {
HXLINE( 116)			this->version = this->_fastXml->att->resolve(HX_("version",18,e7,f1,7c));
            		}
HXLINE( 118)		if (this->_fastXml->has->resolve(HX_("bgColor",5e,81,83,f7))) {
HXLINE( 119)			 ::flixel::_hx_system::frontEnds::CameraFrontEnd _hx_tmp = ::flixel::FlxG_obj::cameras;
HXDLIN( 119)			_hx_tmp->set_bgColor(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(this->_fastXml->att->resolve(HX_("bgColor",5e,81,83,f7))));
            		}
HXLINE( 121)		if (this->_fastXml->hasNode->resolve(HX_("constants",8f,76,6b,44))) {
HXLINE( 122)			this->loadConstants();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxScene_obj,set,(void))

void FlxScene_obj::spawn( ::flixel::group::FlxTypedGroup container,::String layerId){
            	HX_GC_STACKFRAME(&_hx_pos_461861eec1cb65ea_132_spawn)
HXLINE( 133)		 ::List layerNodes = this->_fastXml->nodes->resolve(HX_("layer",d1,81,c0,6f));
HXLINE( 136)		{
HXLINE( 136)			 ::_List::ListNode _g_head = layerNodes->h;
HXDLIN( 136)			while(hx::IsNotNull( _g_head )){
HXLINE( 136)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 136)				_g_head = _g_head->next;
HXDLIN( 136)				 ::haxe::xml::Fast layer = val;
HXLINE( 139)				bool _hx_tmp;
HXDLIN( 139)				if (hx::IsNotNull( layerId )) {
HXLINE( 139)					_hx_tmp = (layer->att->resolve(HX_("id",db,5b,00,00)) == layerId);
            				}
            				else {
HXLINE( 139)					_hx_tmp = true;
            				}
HXDLIN( 139)				if (_hx_tmp) {
HXLINE( 142)					{
HXLINE( 142)						 ::Dynamic element = layer->get_elements();
HXDLIN( 142)						while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 142)							 ::haxe::xml::Fast element1 = ( ( ::haxe::xml::Fast)(element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 144)							{
HXLINE( 144)								::String _g = element1->get_name();
HXDLIN( 144)								::String _hx_switch_0 = _g;
            								if (  (_hx_switch_0==HX_("button",f2,61,e0,d9)) ){
HXLINE( 166)									 ::flixel::ui::FlxButton instance =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 167)									this->applySpriteProperties(instance,element1);
HXLINE( 168)									this->applyTextProperties(instance->label,element1);
HXLINE( 170)									this->addInstance(instance,container,element1);
HXLINE( 165)									goto _hx_goto_4;
            								}
            								if (  (_hx_switch_0==HX_("entity",23,13,1c,05)) ){
HXLINE( 153)									 ::flixel::FlxSprite instance1 = ( ( ::flixel::FlxSprite)(::Type_obj::createInstance(::Type_obj::resolveClass(element1->att->resolve(HX_("type",ba,f2,08,4d))),::cpp::VirtualArray_obj::__new(0))) );
HXLINE( 154)									this->applySpriteProperties(instance1,element1);
HXLINE( 156)									this->addInstance(instance1,container,element1);
HXLINE( 152)									goto _hx_goto_4;
            								}
            								if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE( 147)									 ::flixel::FlxSprite instance2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 148)									this->applySpriteProperties(instance2,element1);
HXLINE( 150)									this->addInstance(instance2,container,element1);
HXLINE( 146)									goto _hx_goto_4;
            								}
            								if (  (_hx_switch_0==HX_("text",ad,cc,f9,4c)) ){
HXLINE( 159)									 ::flixel::text::FlxText instance3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
HXLINE( 160)									this->applySpriteProperties(instance3,element1);
HXLINE( 161)									this->applyTextProperties(instance3,element1);
HXLINE( 163)									this->addInstance(instance3,container,element1);
HXLINE( 158)									goto _hx_goto_4;
            								}
            								_hx_goto_4:;
            							}
            						}
            					}
HXLINE( 174)					if (hx::IsNotNull( layerId )) {
HXLINE( 175)						goto _hx_goto_2;
            					}
            				}
            			}
            			_hx_goto_2:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxScene_obj,spawn,(void))

void FlxScene_obj::loadBackgrounds( ::flixel::group::FlxTypedGroup container){
            	HX_GC_STACKFRAME(&_hx_pos_461861eec1cb65ea_186_loadBackgrounds)
HXLINE( 187)		 ::haxe::xml::Fast backgroundsNode = this->_fastXml->node->resolve(HX_("backgrounds",c5,dc,c3,33));
HXLINE( 190)		{
HXLINE( 190)			 ::Dynamic element = backgroundsNode->get_elements();
HXDLIN( 190)			while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 190)				 ::haxe::xml::Fast element1 = ( ( ::haxe::xml::Fast)(element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 193)				{
HXLINE( 193)					::String _g = element1->get_name();
HXDLIN( 193)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("backdrop",d6,b1,96,1a)) ){
HXLINE( 196)						Float x_att = ::Std_obj::parseInt(element1->att->resolve(HX_("x",78,00,00,00)));
HXLINE( 197)						Float y_att = ::Std_obj::parseInt(element1->att->resolve(HX_("y",79,00,00,00)));
HXLINE( 198)						::String graphics = this->assetsDirectory;
HXDLIN( 198)						::String graphics1 = (graphics + element1->att->resolve(HX_("graphics",cb,f8,67,12)));
HXLINE( 199)						bool repeatX = this->parseBool(element1->att->resolve(HX_("repeatX",9d,d8,87,a6)));
HXLINE( 200)						bool repeatY = this->parseBool(element1->att->resolve(HX_("repeatY",9e,d8,87,a6)));
HXLINE( 201)						Float scrollFactorX = ::Std_obj::parseFloat(element1->att->resolve(HX_("scrollFactorX",1c,38,1f,1a)));
HXLINE( 202)						Float scrollFactorY = ::Std_obj::parseFloat(element1->att->resolve(HX_("scrollFactorY",1d,38,1f,1a)));
HXLINE( 204)						 ::flixel::addons::display::FlxBackdrop instance =  ::flixel::addons::display::FlxBackdrop_obj::__alloc( HX_CTX ,graphics1,scrollFactorX,scrollFactorY,repeatX,repeatY,null(),null());
HXLINE( 205)						instance->set_x(x_att);
HXLINE( 206)						instance->set_y(y_att);
HXLINE( 208)						this->addInstance(instance,container,element1);
HXLINE( 195)						goto _hx_goto_7;
            					}
            					if (  (_hx_switch_0==HX_("sprite",05,dc,95,c3)) ){
HXLINE( 211)						 ::flixel::FlxSprite instance1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 212)						this->applySpriteProperties(instance1,element1);
HXLINE( 214)						this->addInstance(instance1,container,element1);
HXLINE( 210)						goto _hx_goto_7;
            					}
            					_hx_goto_7:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxScene_obj,loadBackgrounds,(void))

void FlxScene_obj::loadTilemap( ::flixel::group::FlxTypedGroup container){
            	HX_GC_STACKFRAME(&_hx_pos_461861eec1cb65ea_225_loadTilemap)
HXLINE( 226)		 ::haxe::xml::Fast terrainNode = this->_fastXml->node->resolve(HX_("terrain",b5,ab,17,29));
HXLINE( 229)		{
HXLINE( 229)			 ::Dynamic element = terrainNode->get_elements();
HXDLIN( 229)			while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 229)				 ::haxe::xml::Fast element1 = ( ( ::haxe::xml::Fast)(element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 232)				{
HXLINE( 232)					::String _g = element1->get_name();
HXDLIN( 232)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("tile",2e,cb,fc,4c)) ){
HXLINE( 246)						 ::Dynamic id = ::Std_obj::parseInt(element1->att->resolve(HX_("id",db,5b,00,00)));
HXLINE( 247)						 ::Dynamic collision = ::Std_obj::parseInt(element1->att->resolve(HX_("collision",72,a8,3a,db)));
HXLINE( 249)						this->tilemap->setTileProperties(id,collision,null(),null(),null());
HXLINE( 245)						goto _hx_goto_10;
            					}
            					if (  (_hx_switch_0==HX_("tilemap",2e,f0,8e,45)) ){
HXLINE( 235)						::String data = element1->get_innerData();
HXLINE( 236)						::String graphics = element1->att->resolve(HX_("graphics",cb,f8,67,12));
HXLINE( 237)						int width = ::Std_obj::parseInt(element1->att->resolve(HX_("tileWidth",f8,13,be,55)));
HXLINE( 238)						int height = ::Std_obj::parseInt(element1->att->resolve(HX_("tileHeight",b5,dd,e2,66)));
HXLINE( 240)						this->tilemap =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE( 241)						this->tilemap->loadMapFromCSV(data,graphics,width,height,null(),null(),null(),null());
HXLINE( 243)						this->addInstance(this->tilemap,container,element1);
HXLINE( 234)						goto _hx_goto_10;
            					}
            					_hx_goto_10:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxScene_obj,loadTilemap,(void))

void FlxScene_obj::loadEverything(){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_258_loadEverything)
HXLINE( 259)		this->loadBackgrounds(null());
HXLINE( 260)		this->loadTilemap(null());
HXLINE( 261)		this->spawn(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxScene_obj,loadEverything,(void))

void FlxScene_obj::loadConstants(){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_268_loadConstants)
HXLINE( 270)		 ::haxe::xml::Fast constantsNode = this->_fastXml->node->resolve(HX_("constants",8f,76,6b,44));
HXLINE( 273)		{
HXLINE( 273)			 ::Dynamic element = constantsNode->get_elements();
HXDLIN( 273)			while(( (bool)(element->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 273)				 ::haxe::xml::Fast element1 = ( ( ::haxe::xml::Fast)(element->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 276)				bool _hx_tmp;
HXDLIN( 276)				bool _hx_tmp1;
HXDLIN( 276)				bool _hx_tmp2;
HXDLIN( 276)				if ((element1->get_name() == HX_("const",63,f9,5d,4a))) {
HXLINE( 276)					_hx_tmp2 = element1->has->resolve(HX_("id",db,5b,00,00));
            				}
            				else {
HXLINE( 276)					_hx_tmp2 = false;
            				}
HXDLIN( 276)				if (_hx_tmp2) {
HXLINE( 276)					_hx_tmp1 = element1->has->resolve(HX_("type",ba,f2,08,4d));
            				}
            				else {
HXLINE( 276)					_hx_tmp1 = false;
            				}
HXDLIN( 276)				if (_hx_tmp1) {
HXLINE( 276)					_hx_tmp = element1->has->resolve(HX_("value",71,7f,b8,31));
            				}
            				else {
HXLINE( 276)					_hx_tmp = false;
            				}
HXDLIN( 276)				if (_hx_tmp) {
HXLINE( 278)					::String _g = element1->att->resolve(HX_("type",ba,f2,08,4d));
HXDLIN( 278)					::String _hx_switch_0 = _g;
            					if (  (_hx_switch_0==HX_("Bool",4a,b0,f4,2b)) ){
HXLINE( 281)						bool _hx_const = this->parseBool(element1->att->resolve(HX_("value",71,7f,b8,31)));
HXLINE( 282)						{
HXLINE( 282)							::Dynamic this1 = this->_constants;
HXDLIN( 282)							::haxe::IMap_obj::set(this1,element1->att->resolve(HX_("id",db,5b,00,00)),_hx_const);
            						}
HXLINE( 280)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_0==HX_("Float",7c,35,c4,95)) ){
HXLINE( 289)						Float const1 = ::Std_obj::parseFloat(element1->att->resolve(HX_("value",71,7f,b8,31)));
HXLINE( 290)						{
HXLINE( 290)							::Dynamic this2 = this->_constants;
HXDLIN( 290)							::haxe::IMap_obj::set(this2,element1->att->resolve(HX_("id",db,5b,00,00)),const1);
            						}
HXLINE( 288)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_0==HX_("Int",cf,c4,37,00)) ){
HXLINE( 285)						int const2 = ::Std_obj::parseInt(element1->att->resolve(HX_("value",71,7f,b8,31)));
HXLINE( 286)						{
HXLINE( 286)							::Dynamic this3 = this->_constants;
HXDLIN( 286)							::haxe::IMap_obj::set(this3,element1->att->resolve(HX_("id",db,5b,00,00)),const2);
            						}
HXLINE( 284)						goto _hx_goto_14;
            					}
            					if (  (_hx_switch_0==HX_("String",f1,9c,c4,45)) ){
HXLINE( 293)						::String const3 = element1->att->resolve(HX_("value",71,7f,b8,31));
HXLINE( 294)						{
HXLINE( 294)							::Dynamic this4 = this->_constants;
HXDLIN( 294)							::haxe::IMap_obj::set(this4,element1->att->resolve(HX_("id",db,5b,00,00)),const3);
            						}
HXLINE( 292)						goto _hx_goto_14;
            					}
            					_hx_goto_14:;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxScene_obj,loadConstants,(void))

void FlxScene_obj::addInstance( ::Dynamic instance, ::flixel::group::FlxTypedGroup container, ::haxe::xml::Fast element){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_309_addInstance)
HXLINE( 310)		if (hx::IsNull( container )) {
HXLINE( 311)			::flixel::FlxG_obj::game->_state->add(instance).StaticCast<  ::flixel::FlxBasic >();
            		}
            		else {
HXLINE( 314)			container->add(instance);
            		}
HXLINE( 316)		if (element->has->resolve(HX_("id",db,5b,00,00))) {
HXLINE( 317)			::Dynamic this1 = this->_objects;
HXDLIN( 317)			 ::Dynamic v = instance;
HXDLIN( 317)			( ( ::haxe::ds::StringMap)(this1) )->set(element->att->resolve(HX_("id",db,5b,00,00)),v);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxScene_obj,addInstance,(void))

void FlxScene_obj::applySpriteProperties( ::flixel::FlxSprite instance, ::haxe::xml::Fast element){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_327_applySpriteProperties)
HXLINE( 330)		if (element->has->resolve(HX_("graphic",a8,5a,07,74))) {
HXLINE( 331)			::String _hx_tmp = this->assetsDirectory;
HXDLIN( 331)			instance->loadGraphic((_hx_tmp + element->att->resolve(HX_("graphic",a8,5a,07,74))),null(),null(),null(),null(),null());
            		}
HXLINE( 333)		if (element->has->resolve(HX_("alpha",5e,a7,96,21))) {
HXLINE( 334)			instance->set_alpha(::Std_obj::parseFloat(element->att->resolve(HX_("alpha",5e,a7,96,21))));
            		}
HXLINE( 336)		if (element->has->resolve(HX_("color",63,71,5c,4a))) {
HXLINE( 337)			instance->set_color(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(element->att->resolve(HX_("color",63,71,5c,4a))));
            		}
HXLINE( 339)		if (element->has->resolve(HX_("flipX",0b,45,92,02))) {
HXLINE( 340)			instance->set_flipX(this->parseBool(element->att->resolve(HX_("flipX",0b,45,92,02))));
            		}
HXLINE( 342)		if (element->has->resolve(HX_("flipY",0c,45,92,02))) {
HXLINE( 343)			instance->set_flipY(this->parseBool(element->att->resolve(HX_("flipY",0c,45,92,02))));
            		}
HXLINE( 345)		if (element->has->resolve(HX_("originX",b2,8f,f5,55))) {
HXLINE( 346)			 ::flixel::math::FlxPoint instance1 = instance->origin;
HXDLIN( 346)			instance1->set_x(::Std_obj::parseFloat(element->att->resolve(HX_("originX",b2,8f,f5,55))));
            		}
HXLINE( 348)		if (element->has->resolve(HX_("originY",b3,8f,f5,55))) {
HXLINE( 349)			 ::flixel::math::FlxPoint instance2 = instance->origin;
HXDLIN( 349)			instance2->set_y(::Std_obj::parseFloat(element->att->resolve(HX_("originY",b3,8f,f5,55))));
            		}
HXLINE( 351)		if (element->has->resolve(HX_("offsetX",65,09,65,d7))) {
HXLINE( 352)			 ::flixel::math::FlxPoint instance3 = instance->offset;
HXDLIN( 352)			instance3->set_x(::Std_obj::parseFloat(element->att->resolve(HX_("offsetX",65,09,65,d7))));
            		}
HXLINE( 354)		if (element->has->resolve(HX_("offsetY",66,09,65,d7))) {
HXLINE( 355)			 ::flixel::math::FlxPoint instance4 = instance->offset;
HXDLIN( 355)			instance4->set_y(::Std_obj::parseFloat(element->att->resolve(HX_("offsetY",66,09,65,d7))));
            		}
HXLINE( 357)		if (element->has->resolve(HX_("scaleX",8e,ea,25,3c))) {
HXLINE( 358)			 ::flixel::math::FlxPoint instance5 = instance->scale;
HXDLIN( 358)			instance5->set_x(::Std_obj::parseFloat(element->att->resolve(HX_("scaleX",8e,ea,25,3c))));
            		}
HXLINE( 360)		if (element->has->resolve(HX_("scaleY",8f,ea,25,3c))) {
HXLINE( 361)			 ::flixel::math::FlxPoint instance6 = instance->scale;
HXDLIN( 361)			instance6->set_y(::Std_obj::parseFloat(element->att->resolve(HX_("scaleY",8f,ea,25,3c))));
            		}
HXLINE( 365)		if (element->has->resolve(HX_("x",78,00,00,00))) {
HXLINE( 366)			instance->set_x(::Std_obj::parseFloat(element->att->resolve(HX_("x",78,00,00,00))));
            		}
HXLINE( 368)		if (element->has->resolve(HX_("y",79,00,00,00))) {
HXLINE( 369)			instance->set_y(::Std_obj::parseFloat(element->att->resolve(HX_("y",79,00,00,00))));
            		}
HXLINE( 371)		if (element->has->resolve(HX_("width",06,b6,62,ca))) {
HXLINE( 372)			instance->set_width(::Std_obj::parseFloat(element->att->resolve(HX_("width",06,b6,62,ca))));
            		}
HXLINE( 374)		if (element->has->resolve(HX_("height",e7,07,4c,02))) {
HXLINE( 375)			instance->set_height(::Std_obj::parseFloat(element->att->resolve(HX_("height",e7,07,4c,02))));
            		}
HXLINE( 377)		if (element->has->resolve(HX_("angle",d3,43,e2,22))) {
HXLINE( 378)			instance->set_angle(::Std_obj::parseFloat(element->att->resolve(HX_("angle",d3,43,e2,22))));
            		}
HXLINE( 380)		if (element->has->resolve(HX_("immovable",0a,27,70,27))) {
HXLINE( 381)			instance->set_immovable(this->parseBool(element->att->resolve(HX_("immovable",0a,27,70,27))));
            		}
HXLINE( 383)		if (element->has->resolve(HX_("solid",2b,b4,c5,80))) {
HXLINE( 384)			instance->set_solid(this->parseBool(element->att->resolve(HX_("solid",2b,b4,c5,80))));
            		}
HXLINE( 386)		if (element->has->resolve(HX_("scrollFactorX",1c,38,1f,1a))) {
HXLINE( 387)			 ::flixel::math::FlxPoint instance7 = instance->scrollFactor;
HXDLIN( 387)			instance7->set_x(::Std_obj::parseFloat(element->att->resolve(HX_("scrollFactorX",1c,38,1f,1a))));
            		}
HXLINE( 389)		if (element->has->resolve(HX_("scrollFactorY",1d,38,1f,1a))) {
HXLINE( 390)			 ::flixel::math::FlxPoint instance8 = instance->scrollFactor;
HXDLIN( 390)			instance8->set_y(::Std_obj::parseFloat(element->att->resolve(HX_("scrollFactorY",1d,38,1f,1a))));
            		}
HXLINE( 394)		if (element->has->resolve(HX_("alignBottom",90,93,47,f4))) {
HXLINE( 395)			int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN( 395)			Float _hx_tmp2 = (_hx_tmp1 - instance->get_height());
HXDLIN( 395)			instance->set_y((_hx_tmp2 - ::Std_obj::parseInt(element->att->resolve(HX_("alignBottom",90,93,47,f4)))));
            		}
HXLINE( 397)		if (element->has->resolve(HX_("alignRight",d7,7a,b6,82))) {
HXLINE( 398)			int _hx_tmp3 = ::flixel::FlxG_obj::width;
HXDLIN( 398)			Float _hx_tmp4 = (_hx_tmp3 - instance->get_width());
HXDLIN( 398)			instance->set_x((_hx_tmp4 - ::Std_obj::parseInt(element->att->resolve(HX_("alignRight",d7,7a,b6,82)))));
            		}
HXLINE( 400)		if (element->has->resolve(HX_("alignVertical",5b,9c,64,4b))) {
HXLINE( 401)			Float _hx_tmp5 = ((Float)::flixel::FlxG_obj::height / (Float)(int)2);
HXDLIN( 401)			Float _hx_tmp6 = (_hx_tmp5 - ((Float)instance->get_height() / (Float)(int)2));
HXDLIN( 401)			instance->set_y((_hx_tmp6 + ::Std_obj::parseInt(element->att->resolve(HX_("alignVertical",5b,9c,64,4b)))));
            		}
HXLINE( 403)		if (element->has->resolve(HX_("alignHorizontal",09,60,76,10))) {
HXLINE( 404)			Float _hx_tmp7 = ((Float)::flixel::FlxG_obj::width / (Float)(int)2);
HXDLIN( 404)			Float _hx_tmp8 = (_hx_tmp7 - ((Float)instance->get_width() / (Float)(int)2));
HXDLIN( 404)			instance->set_x((_hx_tmp8 + ::Std_obj::parseInt(element->att->resolve(HX_("alignHorizontal",09,60,76,10)))));
            		}
HXLINE( 408)		if (element->has->resolve(HX_("visible",72,78,24,a3))) {
HXLINE( 409)			instance->set_visible(this->parseBool(element->att->resolve(HX_("visible",72,78,24,a3))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxScene_obj,applySpriteProperties,(void))

void FlxScene_obj::applyTextProperties( ::flixel::text::FlxText instance, ::haxe::xml::Fast element){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_419_applyTextProperties)
HXLINE( 420)		bool _hx_tmp;
HXDLIN( 420)		if (hx::IsNotNull( instance )) {
HXLINE( 420)			_hx_tmp = hx::IsNull( element );
            		}
            		else {
HXLINE( 420)			_hx_tmp = true;
            		}
HXDLIN( 420)		if (_hx_tmp) {
HXLINE( 420)			return;
            		}
HXLINE( 422)		if (element->has->resolve(HX_("text",ad,cc,f9,4c))) {
HXLINE( 423)			instance->set_text(element->att->resolve(HX_("text",ad,cc,f9,4c)));
            		}
HXLINE( 425)		if (element->has->resolve(HX_("size",c1,a0,53,4c))) {
HXLINE( 426)			instance->set_size(::Std_obj::parseInt(element->att->resolve(HX_("size",c1,a0,53,4c))));
            		}
HXLINE( 428)		if (element->has->resolve(HX_("fieldWidth",ec,2e,e5,97))) {
HXLINE( 429)			instance->set_fieldWidth(::Std_obj::parseInt(element->att->resolve(HX_("fieldWidth",ec,2e,e5,97))));
            		}
HXLINE( 431)		if (element->has->resolve(HX_("font",cf,5d,c0,43))) {
HXLINE( 432)			::String _hx_tmp1 = this->assetsDirectory;
HXDLIN( 432)			instance->set_font((_hx_tmp1 + element->att->resolve(HX_("font",cf,5d,c0,43))));
            		}
HXLINE( 434)		if (element->has->resolve(HX_("alignment",e3,e2,3d,ea))) {
HXLINE( 435)			instance->set_alignment(element->att->resolve(HX_("alignment",e3,e2,3d,ea)));
            		}
HXLINE( 437)		if (element->has->resolve(HX_("borderStyle",a5,70,96,10))) {
HXLINE( 438)			instance->set_borderStyle(::Type_obj::createEnum(hx::ClassOf< ::flixel::text::FlxTextBorderStyle >(),element->att->resolve(HX_("borderStyle",a5,70,96,10)).toUpperCase(),null()));
            		}
HXLINE( 440)		if (element->has->resolve(HX_("borderColor",d7,3c,d5,d6))) {
HXLINE( 441)			instance->set_borderColor(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(element->att->resolve(HX_("borderColor",d7,3c,d5,d6))));
            		}
HXLINE( 443)		if (element->has->resolve(HX_("borderSize",cd,ff,ed,06))) {
HXLINE( 444)			instance->set_borderSize(::Std_obj::parseInt(element->att->resolve(HX_("borderSize",cd,ff,ed,06))));
            		}
HXLINE( 446)		if (element->has->resolve(HX_("wordWrap",b4,14,db,00))) {
HXLINE( 447)			instance->set_wordWrap(this->parseBool(element->att->resolve(HX_("wordWrap",b4,14,db,00))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxScene_obj,applyTextProperties,(void))

 ::Dynamic FlxScene_obj::_hx_const(::String id){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_457_const)
HXLINE( 458)		if (this->_constants->exists(id)) {
HXLINE( 460)			return this->_constants->get(id);
            		}
HXLINE( 463)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxScene_obj,_hx_const,return )

 ::Dynamic FlxScene_obj::object(::String id){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_473_object)
HXLINE( 474)		if (this->_objects->exists(id)) {
HXLINE( 476)			return this->_objects->get(id);
            		}
HXLINE( 479)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxScene_obj,object,return )

bool FlxScene_obj::parseBool(::String value){
            	HX_STACKFRAME(&_hx_pos_461861eec1cb65ea_489_parseBool)
HXDLIN( 489)		bool _hx_tmp;
HXDLIN( 489)		if ((value != HX_("false",a3,35,4f,fb))) {
HXDLIN( 489)			_hx_tmp = hx::IsEq( ::Std_obj::parseInt(value),(int)0 );
            		}
            		else {
HXDLIN( 489)			_hx_tmp = true;
            		}
HXDLIN( 489)		if (_hx_tmp) {
HXLINE( 490)			return false;
            		}
            		else {
HXLINE( 493)			return true;
            		}
HXLINE( 489)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxScene_obj,parseBool,return )


hx::ObjectPtr< FlxScene_obj > FlxScene_obj::__new(::String file) {
	hx::ObjectPtr< FlxScene_obj > __this = new FlxScene_obj();
	__this->__construct(file);
	return __this;
}

hx::ObjectPtr< FlxScene_obj > FlxScene_obj::__alloc(hx::Ctx *_hx_ctx,::String file) {
	FlxScene_obj *__this = (FlxScene_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxScene_obj), true, "flixel.addons.util.FlxScene"));
	*(void **)__this = FlxScene_obj::_hx_vtable;
	__this->__construct(file);
	return __this;
}

FlxScene_obj::FlxScene_obj()
{
}

void FlxScene_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxScene);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(description,"description");
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(assetsDirectory,"assetsDirectory");
	HX_MARK_MEMBER_NAME(tilemap,"tilemap");
	HX_MARK_MEMBER_NAME(_constants,"_constants");
	HX_MARK_MEMBER_NAME(_objects,"_objects");
	HX_MARK_MEMBER_NAME(_xml,"_xml");
	HX_MARK_MEMBER_NAME(_fastXml,"_fastXml");
	HX_MARK_END_CLASS();
}

void FlxScene_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(description,"description");
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(assetsDirectory,"assetsDirectory");
	HX_VISIT_MEMBER_NAME(tilemap,"tilemap");
	HX_VISIT_MEMBER_NAME(_constants,"_constants");
	HX_VISIT_MEMBER_NAME(_objects,"_objects");
	HX_VISIT_MEMBER_NAME(_xml,"_xml");
	HX_VISIT_MEMBER_NAME(_fastXml,"_fastXml");
}

hx::Val FlxScene_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"_xml") ) { return hx::Val( _xml ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"spawn") ) { return hx::Val( spawn_dyn() ); }
		if (HX_FIELD_EQ(inName,"const") ) { return hx::Val( _hx_const_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"object") ) { return hx::Val( object_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version ); }
		if (HX_FIELD_EQ(inName,"tilemap") ) { return hx::Val( tilemap ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_objects") ) { return hx::Val( _objects ); }
		if (HX_FIELD_EQ(inName,"_fastXml") ) { return hx::Val( _fastXml ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"parseBool") ) { return hx::Val( parseBool_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_constants") ) { return hx::Val( _constants ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { return hx::Val( description ); }
		if (HX_FIELD_EQ(inName,"loadTilemap") ) { return hx::Val( loadTilemap_dyn() ); }
		if (HX_FIELD_EQ(inName,"addInstance") ) { return hx::Val( addInstance_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"loadConstants") ) { return hx::Val( loadConstants_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadEverything") ) { return hx::Val( loadEverything_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"assetsDirectory") ) { return hx::Val( assetsDirectory ); }
		if (HX_FIELD_EQ(inName,"loadBackgrounds") ) { return hx::Val( loadBackgrounds_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"applyTextProperties") ) { return hx::Val( applyTextProperties_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"applySpriteProperties") ) { return hx::Val( applySpriteProperties_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxScene_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_xml") ) { _xml=inValue.Cast<  ::Xml >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tilemap") ) { tilemap=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_objects") ) { _objects=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fastXml") ) { _fastXml=inValue.Cast<  ::haxe::xml::Fast >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_constants") ) { _constants=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"description") ) { description=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"assetsDirectory") ) { assetsDirectory=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxScene_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"));
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("assetsDirectory","\x6a","\xe1","\x86","\xa5"));
	outFields->push(HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45"));
	outFields->push(HX_HCSTRING("_constants","\x50","\xf2","\x0d","\xa0"));
	outFields->push(HX_HCSTRING("_objects","\x55","\xc2","\x07","\xbc"));
	outFields->push(HX_HCSTRING("_xml","\xd8","\xb2","\x26","\x3f"));
	outFields->push(HX_HCSTRING("_fastXml","\x1c","\x46","\xe8","\x17"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxScene_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxScene_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(FlxScene_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsString,(int)offsetof(FlxScene_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsString,(int)offsetof(FlxScene_obj,description),HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f")},
	{hx::fsString,(int)offsetof(FlxScene_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsString,(int)offsetof(FlxScene_obj,assetsDirectory),HX_HCSTRING("assetsDirectory","\x6a","\xe1","\x86","\xa5")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(FlxScene_obj,tilemap),HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxScene_obj,_constants),HX_HCSTRING("_constants","\x50","\xf2","\x0d","\xa0")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(FlxScene_obj,_objects),HX_HCSTRING("_objects","\x55","\xc2","\x07","\xbc")},
	{hx::fsObject /*::Xml*/ ,(int)offsetof(FlxScene_obj,_xml),HX_HCSTRING("_xml","\xd8","\xb2","\x26","\x3f")},
	{hx::fsObject /*::haxe::xml::Fast*/ ,(int)offsetof(FlxScene_obj,_fastXml),HX_HCSTRING("_fastXml","\x1c","\x46","\xe8","\x17")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxScene_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxScene_obj_sMemberFields[] = {
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("description","\xfc","\x08","\x1d","\x5f"),
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("assetsDirectory","\x6a","\xe1","\x86","\xa5"),
	HX_HCSTRING("tilemap","\x2e","\xf0","\x8e","\x45"),
	HX_HCSTRING("_constants","\x50","\xf2","\x0d","\xa0"),
	HX_HCSTRING("_objects","\x55","\xc2","\x07","\xbc"),
	HX_HCSTRING("_xml","\xd8","\xb2","\x26","\x3f"),
	HX_HCSTRING("_fastXml","\x1c","\x46","\xe8","\x17"),
	HX_HCSTRING("set","\xa2","\x9b","\x57","\x00"),
	HX_HCSTRING("spawn","\x3b","\x9e","\x66","\x81"),
	HX_HCSTRING("loadBackgrounds","\x3f","\x60","\xfb","\x77"),
	HX_HCSTRING("loadTilemap","\xa8","\xae","\x2c","\x16"),
	HX_HCSTRING("loadEverything","\x39","\xd4","\x86","\x35"),
	HX_HCSTRING("loadConstants","\x89","\x47","\xd1","\xc6"),
	HX_HCSTRING("addInstance","\xd6","\x56","\x3d","\x8b"),
	HX_HCSTRING("applySpriteProperties","\xe6","\x91","\x2d","\x85"),
	HX_HCSTRING("applyTextProperties","\x0e","\xc5","\xad","\xa7"),
	HX_HCSTRING("const","\x63","\xf9","\x5d","\x4a"),
	HX_HCSTRING("object","\xbf","\x7e","\x3f","\x15"),
	HX_HCSTRING("parseBool","\xfd","\xd5","\xc1","\xc8"),
	::String(null()) };

static void FlxScene_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxScene_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxScene_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxScene_obj::__mClass,"__mClass");
};

#endif

hx::Class FlxScene_obj::__mClass;

void FlxScene_obj::__register()
{
	hx::Object *dummy = new FlxScene_obj;
	FlxScene_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.util.FlxScene","\x1d","\x0e","\xf3","\xd2");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxScene_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxScene_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxScene_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxScene_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxScene_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxScene_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace util
