// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_entity_Polygon
#include <entity/Polygon.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_state_PlayState
#include <state/PlayState.h>
#endif
#ifndef INCLUDED_system_DataSystem
#include <system/DataSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_12_new,"state.PlayState","new",0x358823b2,"state.PlayState.new","state/PlayState.hx",12,0xe469d57f)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_18_create,"state.PlayState","create",0x924472ea,"state.PlayState.create","state/PlayState.hx",18,0xe469d57f)
HX_LOCAL_STACK_FRAME(_hx_pos_f6a1c4a0dddad72c_34_update,"state.PlayState","update",0x9d3a91f7,"state.PlayState.update","state/PlayState.hx",34,0xe469d57f)
static const int _hx_array_data_082422c0_4[] = {
	(int)116,
};
static const int _hx_array_data_082422c0_5[] = {
	(int)117,
};
namespace state{

void PlayState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_12_new)
HXDLIN(  12)		super::__construct(MaxSize);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x56188a2c;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_18_create)
HXLINE(  19)		this->super::create();
HXLINE(  24)		this->polygon =  ::entity::Polygon_obj::__alloc( HX_CTX );
HXLINE(  25)		this->add(this->polygon);
HXLINE(  28)		::flixel::FlxG_obj::camera->set_antialiasing(true);
            	}


void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f6a1c4a0dddad72c_34_update)
HXLINE(  35)		this->super::update(elapsed);
HXLINE(  36)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_082422c0_4,1),(int)2)) {
HXLINE(  37)			::_hx_system::DataSystem_obj::save(this->polygon->points,this->polygon->rotation,this->polygon->scaleSize);
            		}
HXLINE(  39)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_082422c0_5,1),(int)2)) {
HXLINE(  40)			 ::Dynamic data = ::_hx_system::DataSystem_obj::load();
HXLINE(  41)			this->polygon->points = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  42)			{
HXLINE(  42)				int _g1 = (int)0;
HXDLIN(  42)				int _g = ( (::Array< ::Dynamic>)(data->__Field(HX_("points",23,12,2e,f7),hx::paccDynamic)) )->length;
HXDLIN(  42)				while((_g1 < _g)){
HXLINE(  42)					_g1 = (_g1 + (int)1);
HXDLIN(  42)					int i = (_g1 - (int)1);
HXLINE(  43)					this->polygon->points->__get(i).StaticCast<  ::flixel::math::FlxPoint >()->set(Dynamic(  ::Dynamic(data->__Field(HX_("points",23,12,2e,f7),hx::paccDynamic))->__GetItem(i)).StaticCast<  ::flixel::math::FlxPoint >()->x,Dynamic(  ::Dynamic(data->__Field(HX_("points",23,12,2e,f7),hx::paccDynamic))->__GetItem(i)).StaticCast<  ::flixel::math::FlxPoint >()->y);
            				}
            			}
HXLINE(  44)			this->polygon->rotation = ( (Float)(data->__Field(HX_("rotation",3e,3d,86,08),hx::paccDynamic)) );
HXLINE(  45)			this->polygon->scaleSize = ( (Float)(data->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
            		}
            	}



hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	PlayState_obj *__this = (PlayState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "state.PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(polygon,"polygon");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(polygon,"polygon");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val PlayState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"polygon") ) { return hx::Val( polygon ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val PlayState_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"polygon") ) { polygon=inValue.Cast<  ::entity::Polygon >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("polygon","\x7a","\x02","\x91","\x12"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::entity::Polygon*/ ,(int)offsetof(PlayState_obj,polygon),HX_HCSTRING("polygon","\x7a","\x02","\x91","\x12")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_HCSTRING("polygon","\x7a","\x02","\x91","\x12"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::__mClass,"__mClass");
};

#endif

hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	hx::Object *dummy = new PlayState_obj;
	PlayState_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("state.PlayState","\xc0","\x22","\x24","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace state
