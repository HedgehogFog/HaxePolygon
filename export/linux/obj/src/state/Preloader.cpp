// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_flixel_system_FlxBasePreloader
#include <flixel/system/FlxBasePreloader.h>
#endif
#ifndef INCLUDED_flixel_system__FlxBasePreloader_DefaultPreloader
#include <flixel/system/_FlxBasePreloader/DefaultPreloader.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_state_Preloader
#include <state/Preloader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f69e015a0cfd08af_14_new,"state.Preloader","new",0xccfad52b,"state.Preloader.new","state/Preloader.hx",14,0xf89bb626)
HX_LOCAL_STACK_FRAME(_hx_pos_f69e015a0cfd08af_27_create,"state.Preloader","create",0xfcd13311,"state.Preloader.create","state/Preloader.hx",27,0xf89bb626)
HX_LOCAL_STACK_FRAME(_hx_pos_f69e015a0cfd08af_36_destroy,"state.Preloader","destroy",0x4d56f345,"state.Preloader.destroy","state/Preloader.hx",36,0xf89bb626)
HX_LOCAL_STACK_FRAME(_hx_pos_f69e015a0cfd08af_44_update,"state.Preloader","update",0x07c7521e,"state.Preloader.update","state/Preloader.hx",44,0xf89bb626)
namespace state{

void Preloader_obj::__construct(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs){
Float MinDisplayTime = __o_MinDisplayTime.Default(0);
            	HX_STACKFRAME(&_hx_pos_f69e015a0cfd08af_14_new)
HXLINE(  15)		super::__construct(MinDisplayTime,AllowedURLs);
HXLINE(  16)		this->onLoaded();
            	}

Dynamic Preloader_obj::__CreateEmpty() { return new Preloader_obj; }

void *Preloader_obj::_hx_vtable = 0;

Dynamic Preloader_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Preloader_obj > _hx_result = new Preloader_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Preloader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1b123bf8) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573 || inClassId==(int)0x1b123bf8;
		}
	} else {
		if (inClassId<=(int)0x6eebd534) {
			if (inClassId<=(int)0x3f2b00af) {
				return inClassId==(int)0x33a4cb25 || inClassId==(int)0x3f2b00af;
			} else {
				return inClassId==(int)0x6eebd534;
			}
		} else {
			return inClassId==(int)0x7079d462;
		}
	}
}

void Preloader_obj::create(){
            	HX_STACKFRAME(&_hx_pos_f69e015a0cfd08af_27_create)
HXDLIN(  27)		this->super::create();
            	}


void Preloader_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_f69e015a0cfd08af_36_destroy)
HXDLIN(  36)		this->super::destroy();
            	}


void Preloader_obj::update(Float Percent){
            	HX_STACKFRAME(&_hx_pos_f69e015a0cfd08af_44_update)
            	}



hx::ObjectPtr< Preloader_obj > Preloader_obj::__new(hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs) {
	hx::ObjectPtr< Preloader_obj > __this = new Preloader_obj();
	__this->__construct(__o_MinDisplayTime,AllowedURLs);
	return __this;
}

hx::ObjectPtr< Preloader_obj > Preloader_obj::__alloc(hx::Ctx *_hx_ctx,hx::Null< Float >  __o_MinDisplayTime,::Array< ::String > AllowedURLs) {
	Preloader_obj *__this = (Preloader_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Preloader_obj), true, "state.Preloader"));
	*(void **)__this = Preloader_obj::_hx_vtable;
	__this->__construct(__o_MinDisplayTime,AllowedURLs);
	return __this;
}

Preloader_obj::Preloader_obj()
{
}

hx::Val Preloader_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Preloader_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Preloader_obj_sStaticStorageInfo = 0;
#endif

static ::String Preloader_obj_sMemberFields[] = {
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Preloader_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Preloader_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Preloader_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Preloader_obj::__mClass,"__mClass");
};

#endif

hx::Class Preloader_obj::__mClass;

void Preloader_obj::__register()
{
	hx::Object *dummy = new Preloader_obj;
	Preloader_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("state.Preloader","\xb9","\x63","\xb0","\xe5");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Preloader_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Preloader_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Preloader_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Preloader_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Preloader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Preloader_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace state
